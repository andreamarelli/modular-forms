var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
class I18n {
  /**
   * Initialize a new translation instance.
   *
   * @param  {string}  key
   * @return {void}
   */
  constructor(key = "translations") {
    this.key = key;
  }
  /**
   * Get and replace the string of the given key.
   *
   * @param  {string}  key
   * @param  {object}  replace
   * @return {string}
   */
  trans(key, replace = {}) {
    return this._replace(this._extract(key), replace);
  }
  /**
   * Get and pluralize the strings of the given key.
   *
   * @param  {string}  key
   * @param  {number}  count
   * @param  {object}  replace
   * @return {string}
   */
  trans_choice(key, count = 1, replace = {}) {
    let translations = this._extract(key, "|").split("|"), translation;
    translations.some((t) => translation = this._match(t, count));
    translation = translation || (count > 1 ? translations[1] : translations[0]);
    translation = translation.replace(/\[.*?\]|\{.*?\}/, "");
    return this._replace(translation, replace);
  }
  /**
   * Match the translation limit with the count.
   *
   * @param  {string}  translation
   * @param  {number}  count
   * @return {string|null}
   */
  _match(translation, count) {
    let match = translation.match(/^[\{\[]([^\[\]\{\}]*)[\}\]](.*)/);
    if (!match) return;
    if (match[1].includes(",")) {
      let [from, to] = match[1].split(",", 2);
      if (to === "*" && count >= from) {
        return match[2];
      } else if (from === "*" && count <= to) {
        return match[2];
      } else if (count >= from && count <= to) {
        return match[2];
      }
    }
    return match[1] == count ? match[2] : null;
  }
  /**
   * Replace the placeholders.
   *
   * @param  {string}  translation
   * @param  {object}  replace
   * @return {string}
   */
  _replace(translation, replace) {
    if (typeof translation === "object") {
      return translation;
    }
    for (let placeholder in replace) {
      translation = translation.toString().replace(`:${placeholder}`, replace[placeholder]).replace(`:${placeholder.toUpperCase()}`, replace[placeholder].toString().toUpperCase()).replace(
        `:${placeholder.charAt(0).toUpperCase()}${placeholder.slice(1)}`,
        replace[placeholder].toString().charAt(0).toUpperCase() + replace[placeholder].toString().slice(1)
      );
    }
    return translation.toString().trim();
  }
  /**
   * Extract values from objects by dot notation.
   *
   * @param  {string}  key
   * @param  {mixed}  value
   * @return {mixed}
   */
  _extract(key, value = null) {
    let path = key.toString().split("::"), keys = path.pop().toString().split(".");
    if (path.length > 0) {
      path[0] += "::";
    }
    return path.concat(keys).reduce((t, i) => t[i] || (value || key), window[this.key]);
  }
}
const Locale = {
  getLocale() {
    return window.Laravel.locale;
  },
  getLabel(key, arg = null) {
    let translator = new I18n();
    let label = "";
    if (arg === null) {
      label = translator.trans(key);
    } else if (typeof arg === "object") {
      label = translator.trans(key, arg);
    } else if (typeof arg === "number") {
      label = translator.trans_choice(key, arg);
    }
    return label.charAt(0).toUpperCase() + label.slice(1);
  }
};
/**
* @vue/shared v3.4.29
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function makeMap(str, expectsLowerCase) {
  const set2 = new Set(str.split(","));
  return expectsLowerCase ? (val) => set2.has(val.toLowerCase()) : (val) => set2.has(val);
}
const EMPTY_OBJ = Object.freeze({});
const EMPTY_ARR = Object.freeze([]);
const NOOP = () => {
};
const NO = () => false;
const isOn = (key) => key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && // uppercase letter
(key.charCodeAt(2) > 122 || key.charCodeAt(2) < 97);
const isModelListener = (key) => key.startsWith("onUpdate:");
const extend = Object.assign;
const remove = (arr, el) => {
  const i = arr.indexOf(el);
  if (i > -1) {
    arr.splice(i, 1);
  }
};
const hasOwnProperty$1 = Object.prototype.hasOwnProperty;
const hasOwn = (val, key) => hasOwnProperty$1.call(val, key);
const isArray = Array.isArray;
const isMap = (val) => toTypeString(val) === "[object Map]";
const isSet = (val) => toTypeString(val) === "[object Set]";
const isDate = (val) => toTypeString(val) === "[object Date]";
const isRegExp = (val) => toTypeString(val) === "[object RegExp]";
const isFunction = (val) => typeof val === "function";
const isString = (val) => typeof val === "string";
const isSymbol = (val) => typeof val === "symbol";
const isObject = (val) => val !== null && typeof val === "object";
const isPromise = (val) => {
  return (isObject(val) || isFunction(val)) && isFunction(val.then) && isFunction(val.catch);
};
const objectToString = Object.prototype.toString;
const toTypeString = (value) => objectToString.call(value);
const toRawType = (value) => {
  return toTypeString(value).slice(8, -1);
};
const isPlainObject$1 = (val) => toTypeString(val) === "[object Object]";
const isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
const isReservedProp = /* @__PURE__ */ makeMap(
  // the leading comma is intentional so empty string "" is also included
  ",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
);
const isBuiltInDirective = /* @__PURE__ */ makeMap(
  "bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text,memo"
);
const cacheStringFunction = (fn) => {
  const cache = /* @__PURE__ */ Object.create(null);
  return (str) => {
    const hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
};
const camelizeRE = /-(\w)/g;
const camelize = cacheStringFunction((str) => {
  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
});
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction(
  (str) => str.replace(hyphenateRE, "-$1").toLowerCase()
);
const capitalize = cacheStringFunction((str) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
const toHandlerKey = cacheStringFunction((str) => {
  const s = str ? `on${capitalize(str)}` : ``;
  return s;
});
const hasChanged = (value, oldValue) => !Object.is(value, oldValue);
const invokeArrayFns = (fns, ...arg) => {
  for (let i = 0; i < fns.length; i++) {
    fns[i](...arg);
  }
};
const def = (obj, key, value, writable = false) => {
  Object.defineProperty(obj, key, {
    configurable: true,
    enumerable: false,
    writable,
    value
  });
};
const looseToNumber = (val) => {
  const n = parseFloat(val);
  return isNaN(n) ? val : n;
};
const toNumber = (val) => {
  const n = isString(val) ? Number(val) : NaN;
  return isNaN(n) ? val : n;
};
let _globalThis;
const getGlobalThis = () => {
  return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
};
const PatchFlagNames = {
  [1]: `TEXT`,
  [2]: `CLASS`,
  [4]: `STYLE`,
  [8]: `PROPS`,
  [16]: `FULL_PROPS`,
  [32]: `NEED_HYDRATION`,
  [64]: `STABLE_FRAGMENT`,
  [128]: `KEYED_FRAGMENT`,
  [256]: `UNKEYED_FRAGMENT`,
  [512]: `NEED_PATCH`,
  [1024]: `DYNAMIC_SLOTS`,
  [2048]: `DEV_ROOT_FRAGMENT`,
  [-1]: `HOISTED`,
  [-2]: `BAIL`
};
const slotFlagsText = {
  [1]: "STABLE",
  [2]: "DYNAMIC",
  [3]: "FORWARDED"
};
const GLOBALS_ALLOWED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,console,Error";
const isGloballyAllowed = /* @__PURE__ */ makeMap(GLOBALS_ALLOWED);
const range = 2;
function generateCodeFrame(source, start = 0, end = source.length) {
  start = Math.max(0, Math.min(start, source.length));
  end = Math.max(0, Math.min(end, source.length));
  if (start > end) return "";
  let lines = source.split(/(\r?\n)/);
  const newlineSequences = lines.filter((_, idx) => idx % 2 === 1);
  lines = lines.filter((_, idx) => idx % 2 === 0);
  let count = 0;
  const res = [];
  for (let i = 0; i < lines.length; i++) {
    count += lines[i].length + (newlineSequences[i] && newlineSequences[i].length || 0);
    if (count >= start) {
      for (let j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) continue;
        const line = j + 1;
        res.push(
          `${line}${" ".repeat(Math.max(3 - String(line).length, 0))}|  ${lines[j]}`
        );
        const lineLength = lines[j].length;
        const newLineSeqLength = newlineSequences[j] && newlineSequences[j].length || 0;
        if (j === i) {
          const pad = start - (count - (lineLength + newLineSeqLength));
          const length = Math.max(
            1,
            end > count ? lineLength - pad : end - start
          );
          res.push(`   |  ` + " ".repeat(pad) + "^".repeat(length));
        } else if (j > i) {
          if (end > count) {
            const length = Math.max(Math.min(end - count, lineLength), 1);
            res.push(`   |  ` + "^".repeat(length));
          }
          count += lineLength + newLineSeqLength;
        }
      }
      break;
    }
  }
  return res.join("\n");
}
function normalizeStyle(value) {
  if (isArray(value)) {
    const res = {};
    for (let i = 0; i < value.length; i++) {
      const item = value[i];
      const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString(value) || isObject(value)) {
    return value;
  }
}
const listDelimiterRE = /;(?![^(]*\))/g;
const propertyDelimiterRE = /:([^]+)/;
const styleCommentRE = /\/\*[^]*?\*\//g;
function parseStringStyle(cssText) {
  const ret = {};
  cssText.replace(styleCommentRE, "").split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function stringifyStyle(styles) {
  let ret = "";
  if (!styles || isString(styles)) {
    return ret;
  }
  for (const key in styles) {
    const value = styles[key];
    if (isString(value) || typeof value === "number") {
      const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);
      ret += `${normalizedKey}:${value};`;
    }
  }
  return ret;
}
function normalizeClass(value) {
  let res = "";
  if (isString(value)) {
    res = value;
  } else if (isArray(value)) {
    for (let i = 0; i < value.length; i++) {
      const normalized = normalizeClass(value[i]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + " ";
      }
    }
  }
  return res.trim();
}
function normalizeProps(props) {
  if (!props) return null;
  let { class: klass, style } = props;
  if (klass && !isString(klass)) {
    props.class = normalizeClass(klass);
  }
  if (style) {
    props.style = normalizeStyle(style);
  }
  return props;
}
const HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,hgroup,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
const SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistantLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
const MATH_TAGS = "annotation,annotation-xml,maction,maligngroup,malignmark,math,menclose,merror,mfenced,mfrac,mfraction,mglyph,mi,mlabeledtr,mlongdiv,mmultiscripts,mn,mo,mover,mpadded,mphantom,mprescripts,mroot,mrow,ms,mscarries,mscarry,msgroup,msline,mspace,msqrt,msrow,mstack,mstyle,msub,msubsup,msup,mtable,mtd,mtext,mtr,munder,munderover,none,semantics";
const VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
const isHTMLTag = /* @__PURE__ */ makeMap(HTML_TAGS);
const isSVGTag = /* @__PURE__ */ makeMap(SVG_TAGS);
const isMathMLTag = /* @__PURE__ */ makeMap(MATH_TAGS);
const isVoidTag = /* @__PURE__ */ makeMap(VOID_TAGS);
const specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
const isSpecialBooleanAttr = /* @__PURE__ */ makeMap(specialBooleanAttrs);
const isBooleanAttr = /* @__PURE__ */ makeMap(
  specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,inert,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`
);
function includeBooleanAttr(value) {
  return !!value || value === "";
}
const isKnownHtmlAttr = /* @__PURE__ */ makeMap(
  `accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,inert,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap`
);
const isKnownSvgAttr = /* @__PURE__ */ makeMap(
  `xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xmlns:xlink,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`
);
function isRenderableAttrValue(value) {
  if (value == null) {
    return false;
  }
  const type = typeof value;
  return type === "string" || type === "number" || type === "boolean";
}
function looseCompareArrays(a, b) {
  if (a.length !== b.length) return false;
  let equal = true;
  for (let i = 0; equal && i < a.length; i++) {
    equal = looseEqual(a[i], b[i]);
  }
  return equal;
}
function looseEqual(a, b) {
  if (a === b) return true;
  let aValidType = isDate(a);
  let bValidType = isDate(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? a.getTime() === b.getTime() : false;
  }
  aValidType = isSymbol(a);
  bValidType = isSymbol(b);
  if (aValidType || bValidType) {
    return a === b;
  }
  aValidType = isArray(a);
  bValidType = isArray(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? looseCompareArrays(a, b) : false;
  }
  aValidType = isObject(a);
  bValidType = isObject(b);
  if (aValidType || bValidType) {
    if (!aValidType || !bValidType) {
      return false;
    }
    const aKeysCount = Object.keys(a).length;
    const bKeysCount = Object.keys(b).length;
    if (aKeysCount !== bKeysCount) {
      return false;
    }
    for (const key in a) {
      const aHasKey = a.hasOwnProperty(key);
      const bHasKey = b.hasOwnProperty(key);
      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {
        return false;
      }
    }
  }
  return String(a) === String(b);
}
function looseIndexOf(arr, val) {
  return arr.findIndex((item) => looseEqual(item, val));
}
const toDisplayString = (val) => {
  return isString(val) ? val : val == null ? "" : isArray(val) || isObject(val) && (val.toString === objectToString || !isFunction(val.toString)) ? JSON.stringify(val, replacer, 2) : String(val);
};
const replacer = (_key, val) => {
  if (val && val.__v_isRef) {
    return replacer(_key, val.value);
  } else if (isMap(val)) {
    return {
      [`Map(${val.size})`]: [...val.entries()].reduce(
        (entries, [key, val2], i) => {
          entries[stringifySymbol(key, i) + " =>"] = val2;
          return entries;
        },
        {}
      )
    };
  } else if (isSet(val)) {
    return {
      [`Set(${val.size})`]: [...val.values()].map((v) => stringifySymbol(v))
    };
  } else if (isSymbol(val)) {
    return stringifySymbol(val);
  } else if (isObject(val) && !isArray(val) && !isPlainObject$1(val)) {
    return String(val);
  }
  return val;
};
const stringifySymbol = (v, i = "") => {
  var _a;
  return (
    // Symbol.description in es2019+ so we need to cast here to pass
    // the lib: es2016 check
    isSymbol(v) ? `Symbol(${(_a = v.description) != null ? _a : i})` : v
  );
};
/**
* @vue/reactivity v3.4.29
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
function warn$2(msg, ...args) {
  console.warn(`[Vue warn] ${msg}`, ...args);
}
let activeEffectScope;
class EffectScope {
  constructor(detached = false) {
    this.detached = detached;
    this._active = true;
    this.effects = [];
    this.cleanups = [];
    this.parent = activeEffectScope;
    if (!detached && activeEffectScope) {
      this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(
        this
      ) - 1;
    }
  }
  get active() {
    return this._active;
  }
  run(fn) {
    if (this._active) {
      const currentEffectScope = activeEffectScope;
      try {
        activeEffectScope = this;
        return fn();
      } finally {
        activeEffectScope = currentEffectScope;
      }
    } else {
      warn$2(`cannot run an inactive effect scope.`);
    }
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  on() {
    activeEffectScope = this;
  }
  /**
   * This should only be called on non-detached scopes
   * @internal
   */
  off() {
    activeEffectScope = this.parent;
  }
  stop(fromParent) {
    if (this._active) {
      let i, l;
      for (i = 0, l = this.effects.length; i < l; i++) {
        this.effects[i].stop();
      }
      for (i = 0, l = this.cleanups.length; i < l; i++) {
        this.cleanups[i]();
      }
      if (this.scopes) {
        for (i = 0, l = this.scopes.length; i < l; i++) {
          this.scopes[i].stop(true);
        }
      }
      if (!this.detached && this.parent && !fromParent) {
        const last = this.parent.scopes.pop();
        if (last && last !== this) {
          this.parent.scopes[this.index] = last;
          last.index = this.index;
        }
      }
      this.parent = void 0;
      this._active = false;
    }
  }
}
function effectScope(detached) {
  return new EffectScope(detached);
}
function recordEffectScope(effect2, scope = activeEffectScope) {
  if (scope && scope.active) {
    scope.effects.push(effect2);
  }
}
function getCurrentScope() {
  return activeEffectScope;
}
function onScopeDispose(fn) {
  if (activeEffectScope) {
    activeEffectScope.cleanups.push(fn);
  } else {
    warn$2(
      `onScopeDispose() is called when there is no active effect scope to be associated with.`
    );
  }
}
let activeEffect;
class ReactiveEffect {
  constructor(fn, trigger2, scheduler, scope) {
    this.fn = fn;
    this.trigger = trigger2;
    this.scheduler = scheduler;
    this.active = true;
    this.deps = [];
    this._dirtyLevel = 5;
    this._trackId = 0;
    this._runnings = 0;
    this._shouldSchedule = false;
    this._depsLength = 0;
    recordEffectScope(this, scope);
  }
  get dirty() {
    if (this._dirtyLevel === 2)
      return false;
    if (this._dirtyLevel === 3 || this._dirtyLevel === 4) {
      this._dirtyLevel = 1;
      pauseTracking();
      for (let i = 0; i < this._depsLength; i++) {
        const dep = this.deps[i];
        if (dep.computed) {
          if (dep.computed.effect._dirtyLevel === 2)
            return true;
          triggerComputed(dep.computed);
          if (this._dirtyLevel >= 5) {
            break;
          }
        }
      }
      if (this._dirtyLevel === 1) {
        this._dirtyLevel = 0;
      }
      resetTracking();
    }
    return this._dirtyLevel >= 5;
  }
  set dirty(v) {
    this._dirtyLevel = v ? 5 : 0;
  }
  run() {
    this._dirtyLevel = 0;
    if (!this.active) {
      return this.fn();
    }
    let lastShouldTrack = shouldTrack;
    let lastEffect = activeEffect;
    try {
      shouldTrack = true;
      activeEffect = this;
      this._runnings++;
      preCleanupEffect(this);
      return this.fn();
    } finally {
      postCleanupEffect(this);
      this._runnings--;
      activeEffect = lastEffect;
      shouldTrack = lastShouldTrack;
    }
  }
  stop() {
    if (this.active) {
      preCleanupEffect(this);
      postCleanupEffect(this);
      this.onStop && this.onStop();
      this.active = false;
    }
  }
}
function triggerComputed(computed2) {
  return computed2.value;
}
function preCleanupEffect(effect2) {
  effect2._trackId++;
  effect2._depsLength = 0;
}
function postCleanupEffect(effect2) {
  if (effect2.deps.length > effect2._depsLength) {
    for (let i = effect2._depsLength; i < effect2.deps.length; i++) {
      cleanupDepEffect(effect2.deps[i], effect2);
    }
    effect2.deps.length = effect2._depsLength;
  }
}
function cleanupDepEffect(dep, effect2) {
  const trackId = dep.get(effect2);
  if (trackId !== void 0 && effect2._trackId !== trackId) {
    dep.delete(effect2);
    if (dep.size === 0) {
      dep.cleanup();
    }
  }
}
function effect(fn, options) {
  if (fn.effect instanceof ReactiveEffect) {
    fn = fn.effect.fn;
  }
  const _effect = new ReactiveEffect(fn, NOOP, () => {
    if (_effect.dirty) {
      _effect.run();
    }
  });
  if (options) {
    extend(_effect, options);
    if (options.scope) recordEffectScope(_effect, options.scope);
  }
  if (!options || !options.lazy) {
    _effect.run();
  }
  const runner = _effect.run.bind(_effect);
  runner.effect = _effect;
  return runner;
}
function stop(runner) {
  runner.effect.stop();
}
let shouldTrack = true;
let pauseScheduleStack = 0;
const trackStack = [];
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function resetTracking() {
  const last = trackStack.pop();
  shouldTrack = last === void 0 ? true : last;
}
function pauseScheduling() {
  pauseScheduleStack++;
}
function resetScheduling() {
  pauseScheduleStack--;
  while (!pauseScheduleStack && queueEffectSchedulers.length) {
    queueEffectSchedulers.shift()();
  }
}
function trackEffect(effect2, dep, debuggerEventExtraInfo) {
  var _a;
  if (dep.get(effect2) !== effect2._trackId) {
    dep.set(effect2, effect2._trackId);
    const oldDep = effect2.deps[effect2._depsLength];
    if (oldDep !== dep) {
      if (oldDep) {
        cleanupDepEffect(oldDep, effect2);
      }
      effect2.deps[effect2._depsLength++] = dep;
    } else {
      effect2._depsLength++;
    }
    {
      (_a = effect2.onTrack) == null ? void 0 : _a.call(effect2, extend({ effect: effect2 }, debuggerEventExtraInfo));
    }
  }
}
const queueEffectSchedulers = [];
function triggerEffects(dep, dirtyLevel, debuggerEventExtraInfo) {
  var _a;
  pauseScheduling();
  for (const effect2 of dep.keys()) {
    if (!dep.computed && effect2.computed) {
      if (dep.get(effect2) === effect2._trackId && effect2._runnings > 0) {
        effect2._dirtyLevel = 2;
        continue;
      }
    }
    let tracking;
    if (effect2._dirtyLevel < dirtyLevel && (tracking != null ? tracking : tracking = dep.get(effect2) === effect2._trackId)) {
      effect2._shouldSchedule || (effect2._shouldSchedule = effect2._dirtyLevel === 0);
      if (effect2.computed && effect2._dirtyLevel === 2) {
        effect2._shouldSchedule = true;
      }
      effect2._dirtyLevel = dirtyLevel;
    }
    if (effect2._shouldSchedule && (tracking != null ? tracking : tracking = dep.get(effect2) === effect2._trackId)) {
      {
        (_a = effect2.onTrigger) == null ? void 0 : _a.call(effect2, extend({ effect: effect2 }, debuggerEventExtraInfo));
      }
      effect2.trigger();
      if ((!effect2._runnings || effect2.allowRecurse) && effect2._dirtyLevel !== 3) {
        effect2._shouldSchedule = false;
        if (effect2.scheduler) {
          queueEffectSchedulers.push(effect2.scheduler);
        }
      }
    }
  }
  resetScheduling();
}
const createDep = (cleanup, computed2) => {
  const dep = /* @__PURE__ */ new Map();
  dep.cleanup = cleanup;
  dep.computed = computed2;
  return dep;
};
const targetMap = /* @__PURE__ */ new WeakMap();
const ITERATE_KEY = Symbol("iterate");
const MAP_KEY_ITERATE_KEY = Symbol("Map key iterate");
function track(target, type, key) {
  if (shouldTrack && activeEffect) {
    let depsMap = targetMap.get(target);
    if (!depsMap) {
      targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
    }
    let dep = depsMap.get(key);
    if (!dep) {
      depsMap.set(key, dep = createDep(() => depsMap.delete(key)));
    }
    trackEffect(
      activeEffect,
      dep,
      {
        target,
        type,
        key
      }
    );
  }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    return;
  }
  let deps = [];
  if (type === "clear") {
    deps = [...depsMap.values()];
  } else if (key === "length" && isArray(target)) {
    const newLength = Number(newValue);
    depsMap.forEach((dep, key2) => {
      if (key2 === "length" || !isSymbol(key2) && key2 >= newLength) {
        deps.push(dep);
      }
    });
  } else {
    if (key !== void 0) {
      deps.push(depsMap.get(key));
    }
    switch (type) {
      case "add":
        if (!isArray(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        } else if (isIntegerKey(key)) {
          deps.push(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!isArray(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        }
        break;
      case "set":
        if (isMap(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
        }
        break;
    }
  }
  pauseScheduling();
  for (const dep of deps) {
    if (dep) {
      triggerEffects(
        dep,
        5,
        {
          target,
          type,
          key,
          newValue,
          oldValue,
          oldTarget
        }
      );
    }
  }
  resetScheduling();
}
function getDepFromReactive(object, key) {
  const depsMap = targetMap.get(object);
  return depsMap && depsMap.get(key);
}
const isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);
const builtInSymbols = new Set(
  /* @__PURE__ */ Object.getOwnPropertyNames(Symbol).filter((key) => key !== "arguments" && key !== "caller").map((key) => Symbol[key]).filter(isSymbol)
);
const arrayInstrumentations = /* @__PURE__ */ createArrayInstrumentations();
function createArrayInstrumentations() {
  const instrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
    instrumentations[key] = function(...args) {
      const arr = toRaw(this);
      for (let i = 0, l = this.length; i < l; i++) {
        track(arr, "get", i + "");
      }
      const res = arr[key](...args);
      if (res === -1 || res === false) {
        return arr[key](...args.map(toRaw));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
    instrumentations[key] = function(...args) {
      pauseTracking();
      pauseScheduling();
      const res = toRaw(this)[key].apply(this, args);
      resetScheduling();
      resetTracking();
      return res;
    };
  });
  return instrumentations;
}
function hasOwnProperty(key) {
  if (!isSymbol(key)) key = String(key);
  const obj = toRaw(this);
  track(obj, "has", key);
  return obj.hasOwnProperty(key);
}
class BaseReactiveHandler {
  constructor(_isReadonly = false, _isShallow = false) {
    this._isReadonly = _isReadonly;
    this._isShallow = _isShallow;
  }
  get(target, key, receiver) {
    const isReadonly2 = this._isReadonly, isShallow2 = this._isShallow;
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_isShallow") {
      return isShallow2;
    } else if (key === "__v_raw") {
      if (receiver === (isReadonly2 ? isShallow2 ? shallowReadonlyMap : readonlyMap : isShallow2 ? shallowReactiveMap : reactiveMap).get(target) || // receiver is not the reactive proxy, but has the same prototype
      // this means the reciever is a user proxy of the reactive proxy
      Object.getPrototypeOf(target) === Object.getPrototypeOf(receiver)) {
        return target;
      }
      return;
    }
    const targetIsArray = isArray(target);
    if (!isReadonly2) {
      if (targetIsArray && hasOwn(arrayInstrumentations, key)) {
        return Reflect.get(arrayInstrumentations, key, receiver);
      }
      if (key === "hasOwnProperty") {
        return hasOwnProperty;
      }
    }
    const res = Reflect.get(target, key, receiver);
    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res;
    }
    if (!isReadonly2) {
      track(target, "get", key);
    }
    if (isShallow2) {
      return res;
    }
    if (isRef(res)) {
      return targetIsArray && isIntegerKey(key) ? res : res.value;
    }
    if (isObject(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  }
}
class MutableReactiveHandler extends BaseReactiveHandler {
  constructor(isShallow2 = false) {
    super(false, isShallow2);
  }
  set(target, key, value, receiver) {
    let oldValue = target[key];
    if (!this._isShallow) {
      const isOldValueReadonly = isReadonly(oldValue);
      if (!isShallow(value) && !isReadonly(value)) {
        oldValue = toRaw(oldValue);
        value = toRaw(value);
      }
      if (!isArray(target) && isRef(oldValue) && !isRef(value)) {
        if (isOldValueReadonly) {
          return false;
        } else {
          oldValue.value = value;
          return true;
        }
      }
    }
    const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
    const result = Reflect.set(target, key, value, receiver);
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, "set", key, value, oldValue);
      }
    }
    return result;
  }
  deleteProperty(target, key) {
    const hadKey = hasOwn(target, key);
    const oldValue = target[key];
    const result = Reflect.deleteProperty(target, key);
    if (result && hadKey) {
      trigger(target, "delete", key, void 0, oldValue);
    }
    return result;
  }
  has(target, key) {
    const result = Reflect.has(target, key);
    if (!isSymbol(key) || !builtInSymbols.has(key)) {
      track(target, "has", key);
    }
    return result;
  }
  ownKeys(target) {
    track(
      target,
      "iterate",
      isArray(target) ? "length" : ITERATE_KEY
    );
    return Reflect.ownKeys(target);
  }
}
class ReadonlyReactiveHandler extends BaseReactiveHandler {
  constructor(isShallow2 = false) {
    super(true, isShallow2);
  }
  set(target, key) {
    {
      warn$2(
        `Set operation on key "${String(key)}" failed: target is readonly.`,
        target
      );
    }
    return true;
  }
  deleteProperty(target, key) {
    {
      warn$2(
        `Delete operation on key "${String(key)}" failed: target is readonly.`,
        target
      );
    }
    return true;
  }
}
const mutableHandlers = /* @__PURE__ */ new MutableReactiveHandler();
const readonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler();
const shallowReactiveHandlers = /* @__PURE__ */ new MutableReactiveHandler(
  true
);
const shallowReadonlyHandlers = /* @__PURE__ */ new ReadonlyReactiveHandler(true);
const toShallow = (value) => value;
const getProto = (v) => Reflect.getPrototypeOf(v);
function get(target, key, isReadonly2 = false, isShallow2 = false) {
  target = target["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (hasChanged(key, rawKey)) {
      track(rawTarget, "get", key);
    }
    track(rawTarget, "get", rawKey);
  }
  const { has: has2 } = getProto(rawTarget);
  const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
  if (has2.call(rawTarget, key)) {
    return wrap(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key);
  }
}
function has(key, isReadonly2 = false) {
  const target = this["__v_raw"];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (!isReadonly2) {
    if (hasChanged(key, rawKey)) {
      track(rawTarget, "has", key);
    }
    track(rawTarget, "has", rawKey);
  }
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly2 = false) {
  target = target["__v_raw"];
  !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
  return Reflect.get(target, "size", target);
}
function add(value) {
  value = toRaw(value);
  const target = toRaw(this);
  const proto = getProto(target);
  const hadKey = proto.has.call(target, value);
  if (!hadKey) {
    target.add(value);
    trigger(target, "add", value, value);
  }
  return this;
}
function set$1(key, value) {
  value = toRaw(value);
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get2.call(target, key);
  target.set(key, value);
  if (!hadKey) {
    trigger(target, "add", key, value);
  } else if (hasChanged(value, oldValue)) {
    trigger(target, "set", key, value, oldValue);
  }
  return this;
}
function deleteEntry(key) {
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get2 ? get2.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function clear() {
  const target = toRaw(this);
  const hadItems = target.size !== 0;
  const oldTarget = isMap(target) ? new Map(target) : new Set(target);
  const result = target.clear();
  if (hadItems) {
    trigger(target, "clear", void 0, void 0, oldTarget);
  }
  return result;
}
function createForEach(isReadonly2, isShallow2) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target = observed["__v_raw"];
    const rawTarget = toRaw(target);
    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap(value), wrap(key), observed);
    });
  };
}
function createIterableMethod(method, isReadonly2, isShallow2) {
  return function(...args) {
    const target = this["__v_raw"];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap = isShallow2 ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(
      rawTarget,
      "iterate",
      isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY
    );
    return {
      // iterator protocol
      next() {
        const { value, done } = innerIterator.next();
        return done ? { value, done } : {
          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
          done
        };
      },
      // iterable protocol
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    {
      const key = args[0] ? `on key "${args[0]}" ` : ``;
      warn$2(
        `${capitalize(type)} operation ${key}failed: target is readonly.`,
        toRaw(this)
      );
    }
    return type === "delete" ? false : type === "clear" ? void 0 : this;
  };
}
function createInstrumentations() {
  const mutableInstrumentations2 = {
    get(key) {
      return get(this, key);
    },
    get size() {
      return size(this);
    },
    has,
    add,
    set: set$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, false)
  };
  const shallowInstrumentations2 = {
    get(key) {
      return get(this, key, false, true);
    },
    get size() {
      return size(this);
    },
    has,
    add,
    set: set$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key) {
      return get(this, key, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key) {
      return get(this, key, true, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has.call(this, key, true);
    },
    add: createReadonlyMethod("add"),
    set: createReadonlyMethod("set"),
    delete: createReadonlyMethod("delete"),
    clear: createReadonlyMethod("clear"),
    forEach: createForEach(true, true)
  };
  const iteratorMethods = [
    "keys",
    "values",
    "entries",
    Symbol.iterator
  ];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations2[method] = createIterableMethod(method, false, false);
    readonlyInstrumentations2[method] = createIterableMethod(method, true, false);
    shallowInstrumentations2[method] = createIterableMethod(method, false, true);
    shallowReadonlyInstrumentations2[method] = createIterableMethod(
      method,
      true,
      true
    );
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
const [
  mutableInstrumentations,
  readonlyInstrumentations,
  shallowInstrumentations,
  shallowReadonlyInstrumentations
] = /* @__PURE__ */ createInstrumentations();
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(
      hasOwn(instrumentations, key) && key in target ? instrumentations : target,
      key,
      receiver
    );
  };
}
const mutableCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, false)
};
const shallowCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(false, true)
};
const readonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, false)
};
const shallowReadonlyCollectionHandlers = {
  get: /* @__PURE__ */ createInstrumentationGetter(true, true)
};
function checkIdentityKeys(target, has2, key) {
  const rawKey = toRaw(key);
  if (rawKey !== key && has2.call(target, rawKey)) {
    const type = toRawType(target);
    warn$2(
      `Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`
    );
  }
}
const reactiveMap = /* @__PURE__ */ new WeakMap();
const shallowReactiveMap = /* @__PURE__ */ new WeakMap();
const readonlyMap = /* @__PURE__ */ new WeakMap();
const shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value) {
  return value["__v_skip"] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
}
function reactive(target) {
  if (isReadonly(target)) {
    return target;
  }
  return createReactiveObject(
    target,
    false,
    mutableHandlers,
    mutableCollectionHandlers,
    reactiveMap
  );
}
function shallowReactive(target) {
  return createReactiveObject(
    target,
    false,
    shallowReactiveHandlers,
    shallowCollectionHandlers,
    shallowReactiveMap
  );
}
function readonly(target) {
  return createReactiveObject(
    target,
    true,
    readonlyHandlers,
    readonlyCollectionHandlers,
    readonlyMap
  );
}
function shallowReadonly(target) {
  return createReactiveObject(
    target,
    true,
    shallowReadonlyHandlers,
    shallowReadonlyCollectionHandlers,
    shallowReadonlyMap
  );
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject(target)) {
    {
      warn$2(
        `value cannot be made ${isReadonly2 ? "readonly" : "reactive"}: ${String(
          target
        )}`
      );
    }
    return target;
  }
  if (target["__v_raw"] && !(isReadonly2 && target["__v_isReactive"])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(
    target,
    targetType === 2 ? collectionHandlers : baseHandlers
  );
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value) {
  if (isReadonly(value)) {
    return isReactive(value["__v_raw"]);
  }
  return !!(value && value["__v_isReactive"]);
}
function isReadonly(value) {
  return !!(value && value["__v_isReadonly"]);
}
function isShallow(value) {
  return !!(value && value["__v_isShallow"]);
}
function isProxy(value) {
  return value ? !!value["__v_raw"] : false;
}
function toRaw(observed) {
  const raw = observed && observed["__v_raw"];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
  if (Object.isExtensible(value)) {
    def(value, "__v_skip", true);
  }
  return value;
}
const toReactive = (value) => isObject(value) ? reactive(value) : value;
const toReadonly = (value) => isObject(value) ? readonly(value) : value;
const COMPUTED_SIDE_EFFECT_WARN = `Computed is still dirty after getter evaluation, likely because a computed is mutating its own dependency in its getter. State mutations in computed getters should be avoided.  Check the docs for more details: https://vuejs.org/guide/essentials/computed.html#getters-should-be-side-effect-free`;
class ComputedRefImpl {
  constructor(getter, _setter, isReadonly2, isSSR) {
    this.getter = getter;
    this._setter = _setter;
    this.dep = void 0;
    this.__v_isRef = true;
    this["__v_isReadonly"] = false;
    this.effect = new ReactiveEffect(
      () => getter(this._value),
      () => triggerRefValue(
        this,
        this.effect._dirtyLevel === 3 ? 3 : 4
      )
    );
    this.effect.computed = this;
    this.effect.active = this._cacheable = !isSSR;
    this["__v_isReadonly"] = isReadonly2;
  }
  get value() {
    const self2 = toRaw(this);
    if ((!self2._cacheable || self2.effect.dirty) && hasChanged(self2._value, self2._value = self2.effect.run())) {
      triggerRefValue(self2, 5);
    }
    trackRefValue(self2);
    if (self2.effect._dirtyLevel >= 2) {
      if (this._warnRecursive) {
        warn$2(COMPUTED_SIDE_EFFECT_WARN, `

getter: `, this.getter);
      }
      triggerRefValue(self2, 3);
    }
    return self2._value;
  }
  set value(newValue) {
    this._setter(newValue);
  }
  // #region polyfill _dirty for backward compatibility third party code for Vue <= 3.3.x
  get _dirty() {
    return this.effect.dirty;
  }
  set _dirty(v) {
    this.effect.dirty = v;
  }
  // #endregion
}
function computed$1(getterOrOptions, debugOptions, isSSR = false) {
  let getter;
  let setter;
  const onlyGetter = isFunction(getterOrOptions);
  if (onlyGetter) {
    getter = getterOrOptions;
    setter = () => {
      warn$2("Write operation failed: computed value is readonly");
    };
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl(getter, setter, onlyGetter || !setter, isSSR);
  if (debugOptions && !isSSR) {
    cRef.effect.onTrack = debugOptions.onTrack;
    cRef.effect.onTrigger = debugOptions.onTrigger;
  }
  return cRef;
}
function trackRefValue(ref2) {
  var _a;
  if (shouldTrack && activeEffect) {
    ref2 = toRaw(ref2);
    trackEffect(
      activeEffect,
      (_a = ref2.dep) != null ? _a : ref2.dep = createDep(
        () => ref2.dep = void 0,
        ref2 instanceof ComputedRefImpl ? ref2 : void 0
      ),
      {
        target: ref2,
        type: "get",
        key: "value"
      }
    );
  }
}
function triggerRefValue(ref2, dirtyLevel = 5, newVal, oldVal) {
  ref2 = toRaw(ref2);
  const dep = ref2.dep;
  if (dep) {
    triggerEffects(
      dep,
      dirtyLevel,
      {
        target: ref2,
        type: "set",
        key: "value",
        newValue: newVal,
        oldValue: oldVal
      }
    );
  }
}
function isRef(r) {
  return !!(r && r.__v_isRef === true);
}
function ref(value) {
  return createRef(value, false);
}
function shallowRef(value) {
  return createRef(value, true);
}
function createRef(rawValue, shallow) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
class RefImpl {
  constructor(value, __v_isShallow) {
    this.__v_isShallow = __v_isShallow;
    this.dep = void 0;
    this.__v_isRef = true;
    this._rawValue = __v_isShallow ? value : toRaw(value);
    this._value = __v_isShallow ? value : toReactive(value);
  }
  get value() {
    trackRefValue(this);
    return this._value;
  }
  set value(newVal) {
    const useDirectValue = this.__v_isShallow || isShallow(newVal) || isReadonly(newVal);
    newVal = useDirectValue ? newVal : toRaw(newVal);
    if (hasChanged(newVal, this._rawValue)) {
      const oldVal = this._rawValue;
      this._rawValue = newVal;
      this._value = useDirectValue ? newVal : toReactive(newVal);
      triggerRefValue(this, 5, newVal, oldVal);
    }
  }
}
function triggerRef(ref2) {
  triggerRefValue(ref2, 5, ref2.value);
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
function toValue(source) {
  return isFunction(source) ? source() : unref(source);
}
const shallowUnwrapHandlers = {
  get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
  set: (target, key, value, receiver) => {
    const oldValue = target[key];
    if (isRef(oldValue) && !isRef(value)) {
      oldValue.value = value;
      return true;
    } else {
      return Reflect.set(target, key, value, receiver);
    }
  }
};
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
class CustomRefImpl {
  constructor(factory) {
    this.dep = void 0;
    this.__v_isRef = true;
    const { get: get2, set: set2 } = factory(
      () => trackRefValue(this),
      () => triggerRefValue(this)
    );
    this._get = get2;
    this._set = set2;
  }
  get value() {
    return this._get();
  }
  set value(newVal) {
    this._set(newVal);
  }
}
function customRef(factory) {
  return new CustomRefImpl(factory);
}
function toRefs(object) {
  if (!isProxy(object)) {
    warn$2(`toRefs() expects a reactive object but received a plain one.`);
  }
  const ret = isArray(object) ? new Array(object.length) : {};
  for (const key in object) {
    ret[key] = propertyToRef(object, key);
  }
  return ret;
}
class ObjectRefImpl {
  constructor(_object, _key, _defaultValue) {
    this._object = _object;
    this._key = _key;
    this._defaultValue = _defaultValue;
    this.__v_isRef = true;
  }
  get value() {
    const val = this._object[this._key];
    return val === void 0 ? this._defaultValue : val;
  }
  set value(newVal) {
    this._object[this._key] = newVal;
  }
  get dep() {
    return getDepFromReactive(toRaw(this._object), this._key);
  }
}
class GetterRefImpl {
  constructor(_getter) {
    this._getter = _getter;
    this.__v_isRef = true;
    this.__v_isReadonly = true;
  }
  get value() {
    return this._getter();
  }
}
function toRef(source, key, defaultValue) {
  if (isRef(source)) {
    return source;
  } else if (isFunction(source)) {
    return new GetterRefImpl(source);
  } else if (isObject(source) && arguments.length > 1) {
    return propertyToRef(source, key, defaultValue);
  } else {
    return ref(source);
  }
}
function propertyToRef(source, key, defaultValue) {
  const val = source[key];
  return isRef(val) ? val : new ObjectRefImpl(source, key, defaultValue);
}
const TrackOpTypes = {
  "GET": "get",
  "HAS": "has",
  "ITERATE": "iterate"
};
const TriggerOpTypes = {
  "SET": "set",
  "ADD": "add",
  "DELETE": "delete",
  "CLEAR": "clear"
};
/**
* @vue/runtime-core v3.4.29
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
const stack$1 = [];
function pushWarningContext(vnode) {
  stack$1.push(vnode);
}
function popWarningContext() {
  stack$1.pop();
}
function warn$1(msg, ...args) {
  pauseTracking();
  const instance = stack$1.length ? stack$1[stack$1.length - 1].component : null;
  const appWarnHandler = instance && instance.appContext.config.warnHandler;
  const trace = getComponentTrace();
  if (appWarnHandler) {
    callWithErrorHandling(
      appWarnHandler,
      instance,
      11,
      [
        // eslint-disable-next-line no-restricted-syntax
        msg + args.map((a) => {
          var _a, _b;
          return (_b = (_a = a.toString) == null ? void 0 : _a.call(a)) != null ? _b : JSON.stringify(a);
        }).join(""),
        instance && instance.proxy,
        trace.map(
          ({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`
        ).join("\n"),
        trace
      ]
    );
  } else {
    const warnArgs = [`[Vue warn]: ${msg}`, ...args];
    if (trace.length && // avoid spamming console during tests
    true) {
      warnArgs.push(`
`, ...formatTrace(trace));
    }
    console.warn(...warnArgs);
  }
  resetTracking();
}
function getComponentTrace() {
  let currentVNode = stack$1[stack$1.length - 1];
  if (!currentVNode) {
    return [];
  }
  const normalizedStack = [];
  while (currentVNode) {
    const last = normalizedStack[0];
    if (last && last.vnode === currentVNode) {
      last.recurseCount++;
    } else {
      normalizedStack.push({
        vnode: currentVNode,
        recurseCount: 0
      });
    }
    const parentInstance = currentVNode.component && currentVNode.component.parent;
    currentVNode = parentInstance && parentInstance.vnode;
  }
  return normalizedStack;
}
function formatTrace(trace) {
  const logs = [];
  trace.forEach((entry, i) => {
    logs.push(...i === 0 ? [] : [`
`], ...formatTraceEntry(entry));
  });
  return logs;
}
function formatTraceEntry({ vnode, recurseCount }) {
  const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
  const isRoot = vnode.component ? vnode.component.parent == null : false;
  const open2 = ` at <${formatComponentName(
    vnode.component,
    vnode.type,
    isRoot
  )}`;
  const close = `>` + postfix;
  return vnode.props ? [open2, ...formatProps(vnode.props), close] : [open2 + close];
}
function formatProps(props) {
  const res = [];
  const keys = Object.keys(props);
  keys.slice(0, 3).forEach((key) => {
    res.push(...formatProp(key, props[key]));
  });
  if (keys.length > 3) {
    res.push(` ...`);
  }
  return res;
}
function formatProp(key, value, raw) {
  if (isString(value)) {
    value = JSON.stringify(value);
    return raw ? value : [`${key}=${value}`];
  } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
    return raw ? value : [`${key}=${value}`];
  } else if (isRef(value)) {
    value = formatProp(key, toRaw(value.value), true);
    return raw ? value : [`${key}=Ref<`, value, `>`];
  } else if (isFunction(value)) {
    return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
  } else {
    value = toRaw(value);
    return raw ? value : [`${key}=`, value];
  }
}
function assertNumber(val, type) {
  if (val === void 0) {
    return;
  } else if (typeof val !== "number") {
    warn$1(`${type} is not a valid number - got ${JSON.stringify(val)}.`);
  } else if (isNaN(val)) {
    warn$1(`${type} is NaN - the duration expression might be incorrect.`);
  }
}
const ErrorCodes = {
  "SETUP_FUNCTION": 0,
  "0": "SETUP_FUNCTION",
  "RENDER_FUNCTION": 1,
  "1": "RENDER_FUNCTION",
  "WATCH_GETTER": 2,
  "2": "WATCH_GETTER",
  "WATCH_CALLBACK": 3,
  "3": "WATCH_CALLBACK",
  "WATCH_CLEANUP": 4,
  "4": "WATCH_CLEANUP",
  "NATIVE_EVENT_HANDLER": 5,
  "5": "NATIVE_EVENT_HANDLER",
  "COMPONENT_EVENT_HANDLER": 6,
  "6": "COMPONENT_EVENT_HANDLER",
  "VNODE_HOOK": 7,
  "7": "VNODE_HOOK",
  "DIRECTIVE_HOOK": 8,
  "8": "DIRECTIVE_HOOK",
  "TRANSITION_HOOK": 9,
  "9": "TRANSITION_HOOK",
  "APP_ERROR_HANDLER": 10,
  "10": "APP_ERROR_HANDLER",
  "APP_WARN_HANDLER": 11,
  "11": "APP_WARN_HANDLER",
  "FUNCTION_REF": 12,
  "12": "FUNCTION_REF",
  "ASYNC_COMPONENT_LOADER": 13,
  "13": "ASYNC_COMPONENT_LOADER",
  "SCHEDULER": 14,
  "14": "SCHEDULER"
};
const ErrorTypeStrings$1 = {
  ["sp"]: "serverPrefetch hook",
  ["bc"]: "beforeCreate hook",
  ["c"]: "created hook",
  ["bm"]: "beforeMount hook",
  ["m"]: "mounted hook",
  ["bu"]: "beforeUpdate hook",
  ["u"]: "updated",
  ["bum"]: "beforeUnmount hook",
  ["um"]: "unmounted hook",
  ["a"]: "activated hook",
  ["da"]: "deactivated hook",
  ["ec"]: "errorCaptured hook",
  ["rtc"]: "renderTracked hook",
  ["rtg"]: "renderTriggered hook",
  [0]: "setup function",
  [1]: "render function",
  [2]: "watcher getter",
  [3]: "watcher callback",
  [4]: "watcher cleanup function",
  [5]: "native event handler",
  [6]: "component event handler",
  [7]: "vnode hook",
  [8]: "directive hook",
  [9]: "transition hook",
  [10]: "app errorHandler",
  [11]: "app warnHandler",
  [12]: "ref function",
  [13]: "async component loader",
  [14]: "scheduler flush. This is likely a Vue internals bug. Please open an issue at https://github.com/vuejs/core ."
};
function callWithErrorHandling(fn, instance, type, args) {
  try {
    return args ? fn(...args) : fn();
  } catch (err) {
    handleError(err, instance, type);
  }
}
function callWithAsyncErrorHandling(fn, instance, type, args) {
  if (isFunction(fn)) {
    const res = callWithErrorHandling(fn, instance, type, args);
    if (res && isPromise(res)) {
      res.catch((err) => {
        handleError(err, instance, type);
      });
    }
    return res;
  }
  if (isArray(fn)) {
    const values = [];
    for (let i = 0; i < fn.length; i++) {
      values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
    }
    return values;
  } else {
    warn$1(
      `Invalid value type passed to callWithAsyncErrorHandling(): ${typeof fn}`
    );
  }
}
function handleError(err, instance, type, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = ErrorTypeStrings$1[type];
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i = 0; i < errorCapturedHooks.length; i++) {
          if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    const appErrorHandler = instance.appContext.config.errorHandler;
    if (appErrorHandler) {
      pauseTracking();
      callWithErrorHandling(
        appErrorHandler,
        null,
        10,
        [err, exposedInstance, errorInfo]
      );
      resetTracking();
      return;
    }
  }
  logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
  {
    const info = ErrorTypeStrings$1[type];
    if (contextVNode) {
      pushWarningContext(contextVNode);
    }
    warn$1(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
    if (contextVNode) {
      popWarningContext();
    }
    if (throwInDev) {
      throw err;
    } else {
      console.error(err);
    }
  }
}
let isFlushing = false;
let isFlushPending = false;
const queue = [];
let flushIndex = 0;
const pendingPostFlushCbs = [];
let activePostFlushCbs = null;
let postFlushIndex = 0;
const resolvedPromise = /* @__PURE__ */ Promise.resolve();
let currentFlushPromise = null;
const RECURSION_LIMIT = 100;
function nextTick(fn) {
  const p2 = currentFlushPromise || resolvedPromise;
  return fn ? p2.then(this ? fn.bind(this) : fn) : p2;
}
function findInsertionIndex(id) {
  let start = flushIndex + 1;
  let end = queue.length;
  while (start < end) {
    const middle = start + end >>> 1;
    const middleJob = queue[middle];
    const middleJobId = getId(middleJob);
    if (middleJobId < id || middleJobId === id && middleJob.pre) {
      start = middle + 1;
    } else {
      end = middle;
    }
  }
  return start;
}
function queueJob(job) {
  if (!queue.length || !queue.includes(
    job,
    isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex
  )) {
    if (job.id == null) {
      queue.push(job);
    } else {
      queue.splice(findInsertionIndex(job.id), 0, job);
    }
    queueFlush();
  }
}
function queueFlush() {
  if (!isFlushing && !isFlushPending) {
    isFlushPending = true;
    currentFlushPromise = resolvedPromise.then(flushJobs);
  }
}
function invalidateJob(job) {
  const i = queue.indexOf(job);
  if (i > flushIndex) {
    queue.splice(i, 1);
  }
}
function queuePostFlushCb(cb) {
  if (!isArray(cb)) {
    if (!activePostFlushCbs || !activePostFlushCbs.includes(
      cb,
      cb.allowRecurse ? postFlushIndex + 1 : postFlushIndex
    )) {
      pendingPostFlushCbs.push(cb);
    }
  } else {
    pendingPostFlushCbs.push(...cb);
  }
  queueFlush();
}
function flushPreFlushCbs(instance, seen2, i = isFlushing ? flushIndex + 1 : 0) {
  {
    seen2 = seen2 || /* @__PURE__ */ new Map();
  }
  for (; i < queue.length; i++) {
    const cb = queue[i];
    if (cb && cb.pre) {
      if (instance && cb.id !== instance.uid) {
        continue;
      }
      if (checkRecursiveUpdates(seen2, cb)) {
        continue;
      }
      queue.splice(i, 1);
      i--;
      cb();
    }
  }
}
function flushPostFlushCbs(seen2) {
  if (pendingPostFlushCbs.length) {
    const deduped = [...new Set(pendingPostFlushCbs)].sort(
      (a, b) => getId(a) - getId(b)
    );
    pendingPostFlushCbs.length = 0;
    if (activePostFlushCbs) {
      activePostFlushCbs.push(...deduped);
      return;
    }
    activePostFlushCbs = deduped;
    {
      seen2 = seen2 || /* @__PURE__ */ new Map();
    }
    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
      const cb = activePostFlushCbs[postFlushIndex];
      if (checkRecursiveUpdates(seen2, cb)) {
        continue;
      }
      if (cb.active !== false) cb();
    }
    activePostFlushCbs = null;
    postFlushIndex = 0;
  }
}
const getId = (job) => job.id == null ? Infinity : job.id;
const comparator = (a, b) => {
  const diff = getId(a) - getId(b);
  if (diff === 0) {
    if (a.pre && !b.pre) return -1;
    if (b.pre && !a.pre) return 1;
  }
  return diff;
};
function flushJobs(seen2) {
  isFlushPending = false;
  isFlushing = true;
  {
    seen2 = seen2 || /* @__PURE__ */ new Map();
  }
  queue.sort(comparator);
  const check = (job) => checkRecursiveUpdates(seen2, job);
  try {
    for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
      const job = queue[flushIndex];
      if (job && job.active !== false) {
        if (check(job)) {
          continue;
        }
        callWithErrorHandling(job, null, 14);
      }
    }
  } finally {
    flushIndex = 0;
    queue.length = 0;
    flushPostFlushCbs(seen2);
    isFlushing = false;
    currentFlushPromise = null;
    if (queue.length || pendingPostFlushCbs.length) {
      flushJobs(seen2);
    }
  }
}
function checkRecursiveUpdates(seen2, fn) {
  if (!seen2.has(fn)) {
    seen2.set(fn, 1);
  } else {
    const count = seen2.get(fn);
    if (count > RECURSION_LIMIT) {
      const instance = fn.ownerInstance;
      const componentName = instance && getComponentName(instance.type);
      handleError(
        `Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,
        null,
        10
      );
      return true;
    } else {
      seen2.set(fn, count + 1);
    }
  }
}
let isHmrUpdating = false;
const hmrDirtyComponents = /* @__PURE__ */ new Set();
{
  getGlobalThis().__VUE_HMR_RUNTIME__ = {
    createRecord: tryWrap(createRecord),
    rerender: tryWrap(rerender),
    reload: tryWrap(reload)
  };
}
const map = /* @__PURE__ */ new Map();
function registerHMR(instance) {
  const id = instance.type.__hmrId;
  let record = map.get(id);
  if (!record) {
    createRecord(id, instance.type);
    record = map.get(id);
  }
  record.instances.add(instance);
}
function unregisterHMR(instance) {
  map.get(instance.type.__hmrId).instances.delete(instance);
}
function createRecord(id, initialDef) {
  if (map.has(id)) {
    return false;
  }
  map.set(id, {
    initialDef: normalizeClassComponent(initialDef),
    instances: /* @__PURE__ */ new Set()
  });
  return true;
}
function normalizeClassComponent(component) {
  return isClassComponent(component) ? component.__vccOpts : component;
}
function rerender(id, newRender) {
  const record = map.get(id);
  if (!record) {
    return;
  }
  record.initialDef.render = newRender;
  [...record.instances].forEach((instance) => {
    if (newRender) {
      instance.render = newRender;
      normalizeClassComponent(instance.type).render = newRender;
    }
    instance.renderCache = [];
    isHmrUpdating = true;
    instance.effect.dirty = true;
    instance.update();
    isHmrUpdating = false;
  });
}
function reload(id, newComp) {
  const record = map.get(id);
  if (!record) return;
  newComp = normalizeClassComponent(newComp);
  updateComponentDef(record.initialDef, newComp);
  const instances = [...record.instances];
  for (const instance of instances) {
    const oldComp = normalizeClassComponent(instance.type);
    if (!hmrDirtyComponents.has(oldComp)) {
      if (oldComp !== record.initialDef) {
        updateComponentDef(oldComp, newComp);
      }
      hmrDirtyComponents.add(oldComp);
    }
    instance.appContext.propsCache.delete(instance.type);
    instance.appContext.emitsCache.delete(instance.type);
    instance.appContext.optionsCache.delete(instance.type);
    if (instance.ceReload) {
      hmrDirtyComponents.add(oldComp);
      instance.ceReload(newComp.styles);
      hmrDirtyComponents.delete(oldComp);
    } else if (instance.parent) {
      instance.parent.effect.dirty = true;
      queueJob(() => {
        instance.parent.update();
        hmrDirtyComponents.delete(oldComp);
      });
    } else if (instance.appContext.reload) {
      instance.appContext.reload();
    } else if (typeof window !== "undefined") {
      window.location.reload();
    } else {
      console.warn(
        "[HMR] Root or manually mounted instance modified. Full reload required."
      );
    }
  }
  queuePostFlushCb(() => {
    for (const instance of instances) {
      hmrDirtyComponents.delete(
        normalizeClassComponent(instance.type)
      );
    }
  });
}
function updateComponentDef(oldComp, newComp) {
  extend(oldComp, newComp);
  for (const key in oldComp) {
    if (key !== "__file" && !(key in newComp)) {
      delete oldComp[key];
    }
  }
}
function tryWrap(fn) {
  return (id, arg) => {
    try {
      return fn(id, arg);
    } catch (e) {
      console.error(e);
      console.warn(
        `[HMR] Something went wrong during Vue component hot-reload. Full reload required.`
      );
    }
  };
}
let devtools$1;
let buffer = [];
let devtoolsNotInstalled = false;
function emit$1(event, ...args) {
  if (devtools$1) {
    devtools$1.emit(event, ...args);
  } else if (!devtoolsNotInstalled) {
    buffer.push({ event, args });
  }
}
function setDevtoolsHook$1(hook, target) {
  var _a, _b;
  devtools$1 = hook;
  if (devtools$1) {
    devtools$1.enabled = true;
    buffer.forEach(({ event, args }) => devtools$1.emit(event, ...args));
    buffer = [];
  } else if (
    // handle late devtools injection - only do this if we are in an actual
    // browser environment to avoid the timer handle stalling test runner exit
    // (#4815)
    typeof window !== "undefined" && // some envs mock window but not fully
    window.HTMLElement && // also exclude jsdom
    // eslint-disable-next-line no-restricted-syntax
    !((_b = (_a = window.navigator) == null ? void 0 : _a.userAgent) == null ? void 0 : _b.includes("jsdom"))
  ) {
    const replay = target.__VUE_DEVTOOLS_HOOK_REPLAY__ = target.__VUE_DEVTOOLS_HOOK_REPLAY__ || [];
    replay.push((newHook) => {
      setDevtoolsHook$1(newHook, target);
    });
    setTimeout(() => {
      if (!devtools$1) {
        target.__VUE_DEVTOOLS_HOOK_REPLAY__ = null;
        devtoolsNotInstalled = true;
        buffer = [];
      }
    }, 3e3);
  } else {
    devtoolsNotInstalled = true;
    buffer = [];
  }
}
function devtoolsInitApp(app, version2) {
  emit$1("app:init", app, version2, {
    Fragment,
    Text,
    Comment,
    Static
  });
}
function devtoolsUnmountApp(app) {
  emit$1("app:unmount", app);
}
const devtoolsComponentAdded = /* @__PURE__ */ createDevtoolsComponentHook(
  "component:added"
  /* COMPONENT_ADDED */
);
const devtoolsComponentUpdated = /* @__PURE__ */ createDevtoolsComponentHook(
  "component:updated"
  /* COMPONENT_UPDATED */
);
const _devtoolsComponentRemoved = /* @__PURE__ */ createDevtoolsComponentHook(
  "component:removed"
  /* COMPONENT_REMOVED */
);
const devtoolsComponentRemoved = (component) => {
  if (devtools$1 && typeof devtools$1.cleanupBuffer === "function" && // remove the component if it wasn't buffered
  !devtools$1.cleanupBuffer(component)) {
    _devtoolsComponentRemoved(component);
  }
};
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function createDevtoolsComponentHook(hook) {
  return (component) => {
    emit$1(
      hook,
      component.appContext.app,
      component.uid,
      component.parent ? component.parent.uid : void 0,
      component
    );
  };
}
const devtoolsPerfStart = /* @__PURE__ */ createDevtoolsPerformanceHook(
  "perf:start"
  /* PERFORMANCE_START */
);
const devtoolsPerfEnd = /* @__PURE__ */ createDevtoolsPerformanceHook(
  "perf:end"
  /* PERFORMANCE_END */
);
function createDevtoolsPerformanceHook(hook) {
  return (component, type, time) => {
    emit$1(hook, component.appContext.app, component.uid, component, type, time);
  };
}
function devtoolsComponentEmit(component, event, params) {
  emit$1(
    "component:emit",
    component.appContext.app,
    component,
    event,
    params
  );
}
function emit(instance, event, ...rawArgs) {
  if (instance.isUnmounted) return;
  const props = instance.vnode.props || EMPTY_OBJ;
  {
    const {
      emitsOptions,
      propsOptions: [propsOptions]
    } = instance;
    if (emitsOptions) {
      if (!(event in emitsOptions) && true) {
        if (!propsOptions || !(toHandlerKey(event) in propsOptions)) {
          warn$1(
            `Component emitted event "${event}" but it is neither declared in the emits option nor as an "${toHandlerKey(event)}" prop.`
          );
        }
      } else {
        const validator = emitsOptions[event];
        if (isFunction(validator)) {
          const isValid = validator(...rawArgs);
          if (!isValid) {
            warn$1(
              `Invalid event arguments: event validation failed for event "${event}".`
            );
          }
        }
      }
    }
  }
  let args = rawArgs;
  const isModelListener2 = event.startsWith("update:");
  const modelArg = isModelListener2 && event.slice(7);
  if (modelArg && modelArg in props) {
    const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
    const { number, trim } = props[modifiersKey] || EMPTY_OBJ;
    if (trim) {
      args = rawArgs.map((a) => isString(a) ? a.trim() : a);
    }
    if (number) {
      args = rawArgs.map(looseToNumber);
    }
  }
  {
    devtoolsComponentEmit(instance, event, args);
  }
  {
    const lowerCaseEvent = event.toLowerCase();
    if (lowerCaseEvent !== event && props[toHandlerKey(lowerCaseEvent)]) {
      warn$1(
        `Event "${lowerCaseEvent}" is emitted in component ${formatComponentName(
          instance,
          instance.type
        )} but the handler is registered for "${event}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${hyphenate(
          event
        )}" instead of "${event}".`
      );
    }
  }
  let handlerName;
  let handler = props[handlerName = toHandlerKey(event)] || // also try camelCase event handler (#2249)
  props[handlerName = toHandlerKey(camelize(event))];
  if (!handler && isModelListener2) {
    handler = props[handlerName = toHandlerKey(hyphenate(event))];
  }
  if (handler) {
    callWithAsyncErrorHandling(
      handler,
      instance,
      6,
      args
    );
  }
  const onceHandler = props[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling(
      onceHandler,
      instance,
      6,
      args
    );
  }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
  const cache = appContext.emitsCache;
  const cached = cache.get(comp);
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (!isFunction(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        extend(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject(comp)) {
      cache.set(comp, null);
    }
    return null;
  }
  if (isArray(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    extend(normalized, raw);
  }
  if (isObject(comp)) {
    cache.set(comp, normalized);
  }
  return normalized;
}
function isEmitListener(options, key) {
  if (!options || !isOn(key)) {
    return false;
  }
  key = key.slice(2).replace(/Once$/, "");
  return hasOwn(options, key[0].toLowerCase() + key.slice(1)) || hasOwn(options, hyphenate(key)) || hasOwn(options, key);
}
let currentRenderingInstance = null;
let currentScopeId = null;
function setCurrentRenderingInstance(instance) {
  const prev = currentRenderingInstance;
  currentRenderingInstance = instance;
  currentScopeId = instance && instance.type.__scopeId || null;
  return prev;
}
function pushScopeId(id) {
  currentScopeId = id;
}
function popScopeId() {
  currentScopeId = null;
}
const withScopeId = (_id) => withCtx;
function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot) {
  if (!ctx) return fn;
  if (fn._n) {
    return fn;
  }
  const renderFnWithContext = (...args) => {
    if (renderFnWithContext._d) {
      setBlockTracking(-1);
    }
    const prevInstance = setCurrentRenderingInstance(ctx);
    let res;
    try {
      res = fn(...args);
    } finally {
      setCurrentRenderingInstance(prevInstance);
      if (renderFnWithContext._d) {
        setBlockTracking(1);
      }
    }
    {
      devtoolsComponentUpdated(ctx);
    }
    return res;
  };
  renderFnWithContext._n = true;
  renderFnWithContext._c = true;
  renderFnWithContext._d = true;
  return renderFnWithContext;
}
let accessedAttrs = false;
function markAttrsAccessed() {
  accessedAttrs = true;
}
function renderComponentRoot(instance) {
  const {
    type: Component,
    vnode,
    proxy,
    withProxy,
    propsOptions: [propsOptions],
    slots,
    attrs,
    emit: emit2,
    render: render2,
    renderCache,
    props,
    data,
    setupState,
    ctx,
    inheritAttrs
  } = instance;
  const prev = setCurrentRenderingInstance(instance);
  let result;
  let fallthroughAttrs;
  {
    accessedAttrs = false;
  }
  try {
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      const thisProxy = setupState.__isScriptSetup ? new Proxy(proxyToUse, {
        get(target, key, receiver) {
          warn$1(
            `Property '${String(
              key
            )}' was accessed via 'this'. Avoid using 'this' in templates.`
          );
          return Reflect.get(target, key, receiver);
        }
      }) : proxyToUse;
      result = normalizeVNode(
        render2.call(
          thisProxy,
          proxyToUse,
          renderCache,
          true ? shallowReadonly(props) : props,
          setupState,
          data,
          ctx
        )
      );
      fallthroughAttrs = attrs;
    } else {
      const render22 = Component;
      if (attrs === props) {
        markAttrsAccessed();
      }
      result = normalizeVNode(
        render22.length > 1 ? render22(
          true ? shallowReadonly(props) : props,
          true ? {
            get attrs() {
              markAttrsAccessed();
              return shallowReadonly(attrs);
            },
            slots,
            emit: emit2
          } : { attrs, slots, emit: emit2 }
        ) : render22(
          true ? shallowReadonly(props) : props,
          null
        )
      );
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
    }
  } catch (err) {
    blockStack.length = 0;
    handleError(err, instance, 1);
    result = createVNode(Comment);
  }
  let root = result;
  let setRoot = void 0;
  if (result.patchFlag > 0 && result.patchFlag & 2048) {
    [root, setRoot] = getChildRoot(result);
  }
  if (fallthroughAttrs && inheritAttrs !== false) {
    const keys = Object.keys(fallthroughAttrs);
    const { shapeFlag } = root;
    if (keys.length) {
      if (shapeFlag & (1 | 6)) {
        if (propsOptions && keys.some(isModelListener)) {
          fallthroughAttrs = filterModelListeners(
            fallthroughAttrs,
            propsOptions
          );
        }
        root = cloneVNode(root, fallthroughAttrs, false, true);
      } else if (!accessedAttrs && root.type !== Comment) {
        const allAttrs = Object.keys(attrs);
        const eventAttrs = [];
        const extraAttrs = [];
        for (let i = 0, l = allAttrs.length; i < l; i++) {
          const key = allAttrs[i];
          if (isOn(key)) {
            if (!isModelListener(key)) {
              eventAttrs.push(key[2].toLowerCase() + key.slice(3));
            }
          } else {
            extraAttrs.push(key);
          }
        }
        if (extraAttrs.length) {
          warn$1(
            `Extraneous non-props attributes (${extraAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`
          );
        }
        if (eventAttrs.length) {
          warn$1(
            `Extraneous non-emits event listeners (${eventAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`
          );
        }
      }
    }
  }
  if (vnode.dirs) {
    if (!isElementRoot(root)) {
      warn$1(
        `Runtime directive used on component with non-element root node. The directives will not function as intended.`
      );
    }
    root = cloneVNode(root, null, false, true);
    root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
  }
  if (vnode.transition) {
    if (!isElementRoot(root)) {
      warn$1(
        `Component inside <Transition> renders non-element root node that cannot be animated.`
      );
    }
    root.transition = vnode.transition;
  }
  if (setRoot) {
    setRoot(root);
  } else {
    result = root;
  }
  setCurrentRenderingInstance(prev);
  return result;
}
const getChildRoot = (vnode) => {
  const rawChildren = vnode.children;
  const dynamicChildren = vnode.dynamicChildren;
  const childRoot = filterSingleRoot(rawChildren, false);
  if (!childRoot) {
    return [vnode, void 0];
  } else if (childRoot.patchFlag > 0 && childRoot.patchFlag & 2048) {
    return getChildRoot(childRoot);
  }
  const index = rawChildren.indexOf(childRoot);
  const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
  const setRoot = (updatedRoot) => {
    rawChildren[index] = updatedRoot;
    if (dynamicChildren) {
      if (dynamicIndex > -1) {
        dynamicChildren[dynamicIndex] = updatedRoot;
      } else if (updatedRoot.patchFlag > 0) {
        vnode.dynamicChildren = [...dynamicChildren, updatedRoot];
      }
    }
  };
  return [normalizeVNode(childRoot), setRoot];
};
function filterSingleRoot(children, recurse = true) {
  let singleRoot;
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    if (isVNode(child)) {
      if (child.type !== Comment || child.children === "v-if") {
        if (singleRoot) {
          return;
        } else {
          singleRoot = child;
          if (recurse && singleRoot.patchFlag > 0 && singleRoot.patchFlag & 2048) {
            return filterSingleRoot(singleRoot.children);
          }
        }
      }
    } else {
      return;
    }
  }
  return singleRoot;
}
const getFunctionalFallthrough = (attrs) => {
  let res;
  for (const key in attrs) {
    if (key === "class" || key === "style" || isOn(key)) {
      (res || (res = {}))[key] = attrs[key];
    }
  }
  return res;
};
const filterModelListeners = (attrs, props) => {
  const res = {};
  for (const key in attrs) {
    if (!isModelListener(key) || !(key.slice(9) in props)) {
      res[key] = attrs[key];
    }
  }
  return res;
};
const isElementRoot = (vnode) => {
  return vnode.shapeFlag & (6 | 1) || vnode.type === Comment;
};
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
  const { props: prevProps, children: prevChildren, component } = prevVNode;
  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
  const emits = component.emitsOptions;
  if ((prevChildren || nextChildren) && isHmrUpdating) {
    return true;
  }
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i = 0; i < dynamicProps.length; i++) {
        const key = dynamicProps[i];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i = 0; i < nextKeys.length; i++) {
    const key = nextKeys[i];
    if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl({ vnode, parent }, el) {
  while (parent) {
    const root = parent.subTree;
    if (root.suspense && root.suspense.activeBranch === vnode) {
      root.el = vnode.el;
    }
    if (root === vnode) {
      (vnode = parent.vnode).el = el;
      parent = parent.parent;
    } else {
      break;
    }
  }
}
const COMPONENTS = "components";
const DIRECTIVES = "directives";
function resolveComponent(name, maybeSelfReference) {
  return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
const NULL_DYNAMIC_COMPONENT = Symbol.for("v-ndc");
function resolveDynamicComponent(component) {
  if (isString(component)) {
    return resolveAsset(COMPONENTS, component, false) || component;
  } else {
    return component || NULL_DYNAMIC_COMPONENT;
  }
}
function resolveDirective(name) {
  return resolveAsset(DIRECTIVES, name);
}
function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
  const instance = currentRenderingInstance || currentInstance;
  if (instance) {
    const Component = instance.type;
    if (type === COMPONENTS) {
      const selfName = getComponentName(
        Component,
        false
      );
      if (selfName && (selfName === name || selfName === camelize(name) || selfName === capitalize(camelize(name)))) {
        return Component;
      }
    }
    const res = (
      // local registration
      // check instance[type] first which is resolved for options API
      resolve(instance[type] || Component[type], name) || // global registration
      resolve(instance.appContext[type], name)
    );
    if (!res && maybeSelfReference) {
      return Component;
    }
    if (warnMissing && !res) {
      const extra = type === COMPONENTS ? `
If this is a native custom element, make sure to exclude it from component resolution via compilerOptions.isCustomElement.` : ``;
      warn$1(`Failed to resolve ${type.slice(0, -1)}: ${name}${extra}`);
    }
    return res;
  } else {
    warn$1(
      `resolve${capitalize(type.slice(0, -1))} can only be used in render() or setup().`
    );
  }
}
function resolve(registry, name) {
  return registry && (registry[name] || registry[camelize(name)] || registry[capitalize(camelize(name))]);
}
const isSuspense = (type) => type.__isSuspense;
let suspenseId = 0;
const SuspenseImpl = {
  name: "Suspense",
  // In order to make Suspense tree-shakable, we need to avoid importing it
  // directly in the renderer. The renderer checks for the __isSuspense flag
  // on a vnode's type and calls the `process` method, passing in renderer
  // internals.
  __isSuspense: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals) {
    if (n1 == null) {
      mountSuspense(
        n2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized,
        rendererInternals
      );
    } else {
      if (parentSuspense && parentSuspense.deps > 0 && !n1.suspense.isInFallback) {
        n2.suspense = n1.suspense;
        n2.suspense.vnode = n2;
        n2.el = n1.el;
        return;
      }
      patchSuspense(
        n1,
        n2,
        container,
        anchor,
        parentComponent,
        namespace,
        slotScopeIds,
        optimized,
        rendererInternals
      );
    }
  },
  hydrate: hydrateSuspense,
  create: createSuspenseBoundary,
  normalize: normalizeSuspenseChildren
};
const Suspense = SuspenseImpl;
function triggerEvent(vnode, name) {
  const eventListener = vnode.props && vnode.props[name];
  if (isFunction(eventListener)) {
    eventListener();
  }
}
function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals) {
  const {
    p: patch,
    o: { createElement }
  } = rendererInternals;
  const hiddenContainer = createElement("div");
  const suspense = vnode.suspense = createSuspenseBoundary(
    vnode,
    parentSuspense,
    parentComponent,
    container,
    hiddenContainer,
    anchor,
    namespace,
    slotScopeIds,
    optimized,
    rendererInternals
  );
  patch(
    null,
    suspense.pendingBranch = vnode.ssContent,
    hiddenContainer,
    null,
    parentComponent,
    suspense,
    namespace,
    slotScopeIds
  );
  if (suspense.deps > 0) {
    triggerEvent(vnode, "onPending");
    triggerEvent(vnode, "onFallback");
    patch(
      null,
      vnode.ssFallback,
      container,
      anchor,
      parentComponent,
      null,
      // fallback tree will not have suspense context
      namespace,
      slotScopeIds
    );
    setActiveBranch(suspense, vnode.ssFallback);
  } else {
    suspense.resolve(false, true);
  }
}
function patchSuspense(n1, n2, container, anchor, parentComponent, namespace, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {
  const suspense = n2.suspense = n1.suspense;
  suspense.vnode = n2;
  n2.el = n1.el;
  const newBranch = n2.ssContent;
  const newFallback = n2.ssFallback;
  const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;
  if (pendingBranch) {
    suspense.pendingBranch = newBranch;
    if (isSameVNodeType(newBranch, pendingBranch)) {
      patch(
        pendingBranch,
        newBranch,
        suspense.hiddenContainer,
        null,
        parentComponent,
        suspense,
        namespace,
        slotScopeIds,
        optimized
      );
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else if (isInFallback) {
        if (!isHydrating) {
          patch(
            activeBranch,
            newFallback,
            container,
            anchor,
            parentComponent,
            null,
            // fallback tree will not have suspense context
            namespace,
            slotScopeIds,
            optimized
          );
          setActiveBranch(suspense, newFallback);
        }
      }
    } else {
      suspense.pendingId = suspenseId++;
      if (isHydrating) {
        suspense.isHydrating = false;
        suspense.activeBranch = pendingBranch;
      } else {
        unmount(pendingBranch, parentComponent, suspense);
      }
      suspense.deps = 0;
      suspense.effects.length = 0;
      suspense.hiddenContainer = createElement("div");
      if (isInFallback) {
        patch(
          null,
          newBranch,
          suspense.hiddenContainer,
          null,
          parentComponent,
          suspense,
          namespace,
          slotScopeIds,
          optimized
        );
        if (suspense.deps <= 0) {
          suspense.resolve();
        } else {
          patch(
            activeBranch,
            newFallback,
            container,
            anchor,
            parentComponent,
            null,
            // fallback tree will not have suspense context
            namespace,
            slotScopeIds,
            optimized
          );
          setActiveBranch(suspense, newFallback);
        }
      } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
        patch(
          activeBranch,
          newBranch,
          container,
          anchor,
          parentComponent,
          suspense,
          namespace,
          slotScopeIds,
          optimized
        );
        suspense.resolve(true);
      } else {
        patch(
          null,
          newBranch,
          suspense.hiddenContainer,
          null,
          parentComponent,
          suspense,
          namespace,
          slotScopeIds,
          optimized
        );
        if (suspense.deps <= 0) {
          suspense.resolve();
        }
      }
    }
  } else {
    if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
      patch(
        activeBranch,
        newBranch,
        container,
        anchor,
        parentComponent,
        suspense,
        namespace,
        slotScopeIds,
        optimized
      );
      setActiveBranch(suspense, newBranch);
    } else {
      triggerEvent(n2, "onPending");
      suspense.pendingBranch = newBranch;
      if (newBranch.shapeFlag & 512) {
        suspense.pendingId = newBranch.component.suspenseId;
      } else {
        suspense.pendingId = suspenseId++;
      }
      patch(
        null,
        newBranch,
        suspense.hiddenContainer,
        null,
        parentComponent,
        suspense,
        namespace,
        slotScopeIds,
        optimized
      );
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else {
        const { timeout, pendingId } = suspense;
        if (timeout > 0) {
          setTimeout(() => {
            if (suspense.pendingId === pendingId) {
              suspense.fallback(newFallback);
            }
          }, timeout);
        } else if (timeout === 0) {
          suspense.fallback(newFallback);
        }
      }
    }
  }
}
let hasWarned = false;
function createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, namespace, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
  if (!hasWarned) {
    hasWarned = true;
    console[console.info ? "info" : "log"](
      `<Suspense> is an experimental feature and its API will likely change.`
    );
  }
  const {
    p: patch,
    m: move,
    um: unmount,
    n: next,
    o: { parentNode, remove: remove2 }
  } = rendererInternals;
  let parentSuspenseId;
  const isSuspensible = isVNodeSuspensible(vnode);
  if (isSuspensible) {
    if (parentSuspense && parentSuspense.pendingBranch) {
      parentSuspenseId = parentSuspense.pendingId;
      parentSuspense.deps++;
    }
  }
  const timeout = vnode.props ? toNumber(vnode.props.timeout) : void 0;
  {
    assertNumber(timeout, `Suspense timeout`);
  }
  const initialAnchor = anchor;
  const suspense = {
    vnode,
    parent: parentSuspense,
    parentComponent,
    namespace,
    container,
    hiddenContainer,
    deps: 0,
    pendingId: suspenseId++,
    timeout: typeof timeout === "number" ? timeout : -1,
    activeBranch: null,
    pendingBranch: null,
    isInFallback: !isHydrating,
    isHydrating,
    isUnmounted: false,
    effects: [],
    resolve(resume = false, sync = false) {
      {
        if (!resume && !suspense.pendingBranch) {
          throw new Error(
            `suspense.resolve() is called without a pending branch.`
          );
        }
        if (suspense.isUnmounted) {
          throw new Error(
            `suspense.resolve() is called on an already unmounted suspense boundary.`
          );
        }
      }
      const {
        vnode: vnode2,
        activeBranch,
        pendingBranch,
        pendingId,
        effects,
        parentComponent: parentComponent2,
        container: container2
      } = suspense;
      let delayEnter = false;
      if (suspense.isHydrating) {
        suspense.isHydrating = false;
      } else if (!resume) {
        delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === "out-in";
        if (delayEnter) {
          activeBranch.transition.afterLeave = () => {
            if (pendingId === suspense.pendingId) {
              move(
                pendingBranch,
                container2,
                anchor === initialAnchor ? next(activeBranch) : anchor,
                0
              );
              queuePostFlushCb(effects);
            }
          };
        }
        if (activeBranch) {
          if (parentNode(activeBranch.el) !== suspense.hiddenContainer) {
            anchor = next(activeBranch);
          }
          unmount(activeBranch, parentComponent2, suspense, true);
        }
        if (!delayEnter) {
          move(pendingBranch, container2, anchor, 0);
        }
      }
      setActiveBranch(suspense, pendingBranch);
      suspense.pendingBranch = null;
      suspense.isInFallback = false;
      let parent = suspense.parent;
      let hasUnresolvedAncestor = false;
      while (parent) {
        if (parent.pendingBranch) {
          parent.effects.push(...effects);
          hasUnresolvedAncestor = true;
          break;
        }
        parent = parent.parent;
      }
      if (!hasUnresolvedAncestor && !delayEnter) {
        queuePostFlushCb(effects);
      }
      suspense.effects = [];
      if (isSuspensible) {
        if (parentSuspense && parentSuspense.pendingBranch && parentSuspenseId === parentSuspense.pendingId) {
          parentSuspense.deps--;
          if (parentSuspense.deps === 0 && !sync) {
            parentSuspense.resolve();
          }
        }
      }
      triggerEvent(vnode2, "onResolve");
    },
    fallback(fallbackVNode) {
      if (!suspense.pendingBranch) {
        return;
      }
      const { vnode: vnode2, activeBranch, parentComponent: parentComponent2, container: container2, namespace: namespace2 } = suspense;
      triggerEvent(vnode2, "onFallback");
      const anchor2 = next(activeBranch);
      const mountFallback = () => {
        if (!suspense.isInFallback) {
          return;
        }
        patch(
          null,
          fallbackVNode,
          container2,
          anchor2,
          parentComponent2,
          null,
          // fallback tree will not have suspense context
          namespace2,
          slotScopeIds,
          optimized
        );
        setActiveBranch(suspense, fallbackVNode);
      };
      const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === "out-in";
      if (delayEnter) {
        activeBranch.transition.afterLeave = mountFallback;
      }
      suspense.isInFallback = true;
      unmount(
        activeBranch,
        parentComponent2,
        null,
        // no suspense so unmount hooks fire now
        true
        // shouldRemove
      );
      if (!delayEnter) {
        mountFallback();
      }
    },
    move(container2, anchor2, type) {
      suspense.activeBranch && move(suspense.activeBranch, container2, anchor2, type);
      suspense.container = container2;
    },
    next() {
      return suspense.activeBranch && next(suspense.activeBranch);
    },
    registerDep(instance, setupRenderEffect, optimized2) {
      const isInPendingSuspense = !!suspense.pendingBranch;
      if (isInPendingSuspense) {
        suspense.deps++;
      }
      const hydratedEl = instance.vnode.el;
      instance.asyncDep.catch((err) => {
        handleError(err, instance, 0);
      }).then((asyncSetupResult) => {
        if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) {
          return;
        }
        instance.asyncResolved = true;
        const { vnode: vnode2 } = instance;
        {
          pushWarningContext(vnode2);
        }
        handleSetupResult(instance, asyncSetupResult, false);
        if (hydratedEl) {
          vnode2.el = hydratedEl;
        }
        const placeholder = !hydratedEl && instance.subTree.el;
        setupRenderEffect(
          instance,
          vnode2,
          // component may have been moved before resolve.
          // if this is not a hydration, instance.subTree will be the comment
          // placeholder.
          parentNode(hydratedEl || instance.subTree.el),
          // anchor will not be used if this is hydration, so only need to
          // consider the comment placeholder case.
          hydratedEl ? null : next(instance.subTree),
          suspense,
          namespace,
          optimized2
        );
        if (placeholder) {
          remove2(placeholder);
        }
        updateHOCHostEl(instance, vnode2.el);
        {
          popWarningContext();
        }
        if (isInPendingSuspense && --suspense.deps === 0) {
          suspense.resolve();
        }
      });
    },
    unmount(parentSuspense2, doRemove) {
      suspense.isUnmounted = true;
      if (suspense.activeBranch) {
        unmount(
          suspense.activeBranch,
          parentComponent,
          parentSuspense2,
          doRemove
        );
      }
      if (suspense.pendingBranch) {
        unmount(
          suspense.pendingBranch,
          parentComponent,
          parentSuspense2,
          doRemove
        );
      }
    }
  };
  return suspense;
}
function hydrateSuspense(node, vnode, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, rendererInternals, hydrateNode) {
  const suspense = vnode.suspense = createSuspenseBoundary(
    vnode,
    parentSuspense,
    parentComponent,
    node.parentNode,
    // eslint-disable-next-line no-restricted-globals
    document.createElement("div"),
    null,
    namespace,
    slotScopeIds,
    optimized,
    rendererInternals,
    true
  );
  const result = hydrateNode(
    node,
    suspense.pendingBranch = vnode.ssContent,
    parentComponent,
    suspense,
    slotScopeIds,
    optimized
  );
  if (suspense.deps === 0) {
    suspense.resolve(false, true);
  }
  return result;
}
function normalizeSuspenseChildren(vnode) {
  const { shapeFlag, children } = vnode;
  const isSlotChildren = shapeFlag & 32;
  vnode.ssContent = normalizeSuspenseSlot(
    isSlotChildren ? children.default : children
  );
  vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children.fallback) : createVNode(Comment);
}
function normalizeSuspenseSlot(s) {
  let block;
  if (isFunction(s)) {
    const trackBlock = isBlockTreeEnabled && s._c;
    if (trackBlock) {
      s._d = false;
      openBlock();
    }
    s = s();
    if (trackBlock) {
      s._d = true;
      block = currentBlock;
      closeBlock();
    }
  }
  if (isArray(s)) {
    const singleChild = filterSingleRoot(s);
    if (!singleChild && s.filter((child) => child !== NULL_DYNAMIC_COMPONENT).length > 0) {
      warn$1(`<Suspense> slots expect a single root node.`);
    }
    s = singleChild;
  }
  s = normalizeVNode(s);
  if (block && !s.dynamicChildren) {
    s.dynamicChildren = block.filter((c) => c !== s);
  }
  return s;
}
function queueEffectWithSuspense(fn, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray(fn)) {
      suspense.effects.push(...fn);
    } else {
      suspense.effects.push(fn);
    }
  } else {
    queuePostFlushCb(fn);
  }
}
function setActiveBranch(suspense, branch) {
  suspense.activeBranch = branch;
  const { vnode, parentComponent } = suspense;
  let el = branch.el;
  while (!el && branch.component) {
    branch = branch.component.subTree;
    el = branch.el;
  }
  vnode.el = el;
  if (parentComponent && parentComponent.subTree === vnode) {
    parentComponent.vnode.el = el;
    updateHOCHostEl(parentComponent, el);
  }
}
function isVNodeSuspensible(vnode) {
  const suspensible = vnode.props && vnode.props.suspensible;
  return suspensible != null && suspensible !== false;
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
  if (target) {
    const hooks = target[type] || (target[type] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      pauseTracking();
      const reset2 = setCurrentInstance(target);
      const res = callWithAsyncErrorHandling(hook, target, type, args);
      reset2();
      resetTracking();
      return res;
    });
    if (prepend) {
      hooks.unshift(wrappedHook);
    } else {
      hooks.push(wrappedHook);
    }
    return wrappedHook;
  } else {
    const apiName = toHandlerKey(ErrorTypeStrings$1[type].replace(/ hook$/, ""));
    warn$1(
      `${apiName} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`
    );
  }
}
const createHook = (lifecycle) => (hook, target = currentInstance) => {
  if (!isInSSRComponentSetup || lifecycle === "sp") {
    injectHook(lifecycle, (...args) => hook(...args), target);
  }
};
const onBeforeMount = createHook("bm");
const onMounted = createHook("m");
const onBeforeUpdate = createHook("bu");
const onUpdated = createHook("u");
const onBeforeUnmount = createHook("bum");
const onUnmounted = createHook("um");
const onServerPrefetch = createHook("sp");
const onRenderTriggered = createHook(
  "rtg"
);
const onRenderTracked = createHook(
  "rtc"
);
function onErrorCaptured(hook, target = currentInstance) {
  injectHook("ec", hook, target);
}
function validateDirectiveName(name) {
  if (isBuiltInDirective(name)) {
    warn$1("Do not use built-in directive ids as custom directive id: " + name);
  }
}
function withDirectives(vnode, directives) {
  if (currentRenderingInstance === null) {
    warn$1(`withDirectives can only be used inside render functions.`);
    return vnode;
  }
  const instance = getComponentPublicInstance(currentRenderingInstance);
  const bindings = vnode.dirs || (vnode.dirs = []);
  for (let i = 0; i < directives.length; i++) {
    let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i];
    if (dir) {
      if (isFunction(dir)) {
        dir = {
          mounted: dir,
          updated: dir
        };
      }
      if (dir.deep) {
        traverse(value);
      }
      bindings.push({
        dir,
        instance,
        value,
        oldValue: void 0,
        arg,
        modifiers
      });
    }
  }
  return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i = 0; i < bindings.length; i++) {
    const binding = bindings[i];
    if (oldBindings) {
      binding.oldValue = oldBindings[i].value;
    }
    let hook = binding.dir[name];
    if (hook) {
      pauseTracking();
      callWithAsyncErrorHandling(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
      resetTracking();
    }
  }
}
function renderList(source, renderItem, cache, index) {
  let ret;
  const cached = cache && cache[index];
  if (isArray(source) || isString(source)) {
    ret = new Array(source.length);
    for (let i = 0, l = source.length; i < l; i++) {
      ret[i] = renderItem(source[i], i, void 0, cached && cached[i]);
    }
  } else if (typeof source === "number") {
    if (!Number.isInteger(source)) {
      warn$1(`The v-for range expect an integer value but got ${source}.`);
    }
    ret = new Array(source);
    for (let i = 0; i < source; i++) {
      ret[i] = renderItem(i + 1, i, void 0, cached && cached[i]);
    }
  } else if (isObject(source)) {
    if (source[Symbol.iterator]) {
      ret = Array.from(
        source,
        (item, i) => renderItem(item, i, void 0, cached && cached[i])
      );
    } else {
      const keys = Object.keys(source);
      ret = new Array(keys.length);
      for (let i = 0, l = keys.length; i < l; i++) {
        const key = keys[i];
        ret[i] = renderItem(source[key], key, i, cached && cached[i]);
      }
    }
  } else {
    ret = [];
  }
  if (cache) {
    cache[index] = ret;
  }
  return ret;
}
function createSlots(slots, dynamicSlots) {
  for (let i = 0; i < dynamicSlots.length; i++) {
    const slot = dynamicSlots[i];
    if (isArray(slot)) {
      for (let j = 0; j < slot.length; j++) {
        slots[slot[j].name] = slot[j].fn;
      }
    } else if (slot) {
      slots[slot.name] = slot.key ? (...args) => {
        const res = slot.fn(...args);
        if (res) res.key = slot.key;
        return res;
      } : slot.fn;
    }
  }
  return slots;
}
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function defineComponent(options, extraOptions) {
  return isFunction(options) ? (
    // #8326: extend call and options.name access are considered side-effects
    // by Rollup, so we have to wrap it in a pure-annotated IIFE.
    /* @__PURE__ */ (() => extend({ name: options.name }, extraOptions, { setup: options }))()
  ) : options;
}
const isAsyncWrapper = (i) => !!i.type.__asyncLoader;
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function defineAsyncComponent(source) {
  if (isFunction(source)) {
    source = { loader: source };
  }
  const {
    loader,
    loadingComponent,
    errorComponent,
    delay = 200,
    timeout,
    // undefined = never times out
    suspensible = true,
    onError: userOnError
  } = source;
  let pendingRequest = null;
  let resolvedComp;
  let retries = 0;
  const retry = () => {
    retries++;
    pendingRequest = null;
    return load();
  };
  const load = () => {
    let thisRequest;
    return pendingRequest || (thisRequest = pendingRequest = loader().catch((err) => {
      err = err instanceof Error ? err : new Error(String(err));
      if (userOnError) {
        return new Promise((resolve2, reject) => {
          const userRetry = () => resolve2(retry());
          const userFail = () => reject(err);
          userOnError(err, userRetry, userFail, retries + 1);
        });
      } else {
        throw err;
      }
    }).then((comp) => {
      if (thisRequest !== pendingRequest && pendingRequest) {
        return pendingRequest;
      }
      if (!comp) {
        warn$1(
          `Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.`
        );
      }
      if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) {
        comp = comp.default;
      }
      if (comp && !isObject(comp) && !isFunction(comp)) {
        throw new Error(`Invalid async component load result: ${comp}`);
      }
      resolvedComp = comp;
      return comp;
    }));
  };
  return /* @__PURE__ */ defineComponent({
    name: "AsyncComponentWrapper",
    __asyncLoader: load,
    get __asyncResolved() {
      return resolvedComp;
    },
    setup() {
      const instance = currentInstance;
      if (resolvedComp) {
        return () => createInnerComp(resolvedComp, instance);
      }
      const onError = (err) => {
        pendingRequest = null;
        handleError(
          err,
          instance,
          13,
          !errorComponent
        );
      };
      if (suspensible && instance.suspense || isInSSRComponentSetup) {
        return load().then((comp) => {
          return () => createInnerComp(comp, instance);
        }).catch((err) => {
          onError(err);
          return () => errorComponent ? createVNode(errorComponent, {
            error: err
          }) : null;
        });
      }
      const loaded = ref(false);
      const error = ref();
      const delayed = ref(!!delay);
      if (delay) {
        setTimeout(() => {
          delayed.value = false;
        }, delay);
      }
      if (timeout != null) {
        setTimeout(() => {
          if (!loaded.value && !error.value) {
            const err = new Error(
              `Async component timed out after ${timeout}ms.`
            );
            onError(err);
            error.value = err;
          }
        }, timeout);
      }
      load().then(() => {
        loaded.value = true;
        if (instance.parent && isKeepAlive(instance.parent.vnode)) {
          instance.parent.effect.dirty = true;
          queueJob(instance.parent.update);
        }
      }).catch((err) => {
        onError(err);
        error.value = err;
      });
      return () => {
        if (loaded.value && resolvedComp) {
          return createInnerComp(resolvedComp, instance);
        } else if (error.value && errorComponent) {
          return createVNode(errorComponent, {
            error: error.value
          });
        } else if (loadingComponent && !delayed.value) {
          return createVNode(loadingComponent);
        }
      };
    }
  });
}
function createInnerComp(comp, parent) {
  const { ref: ref22, props, children, ce: ce2 } = parent.vnode;
  const vnode = createVNode(comp, props, children);
  vnode.ref = ref22;
  vnode.ce = ce2;
  delete parent.vnode.ce;
  return vnode;
}
function renderSlot(slots, name, props = {}, fallback, noSlotted) {
  if (currentRenderingInstance.isCE || currentRenderingInstance.parent && isAsyncWrapper(currentRenderingInstance.parent) && currentRenderingInstance.parent.isCE) {
    if (name !== "default") props.name = name;
    return createVNode("slot", props, fallback && fallback());
  }
  let slot = slots[name];
  if (slot && slot.length > 1) {
    warn$1(
      `SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.`
    );
    slot = () => [];
  }
  if (slot && slot._c) {
    slot._d = false;
  }
  openBlock();
  const validSlotContent = slot && ensureValidVNode(slot(props));
  const rendered = createBlock(
    Fragment,
    {
      key: props.key || // slot content array of a dynamic conditional slot may have a branch
      // key attached in the `createSlots` helper, respect that
      validSlotContent && validSlotContent.key || `_${name}`
    },
    validSlotContent || (fallback ? fallback() : []),
    validSlotContent && slots._ === 1 ? 64 : -2
  );
  if (!noSlotted && rendered.scopeId) {
    rendered.slotScopeIds = [rendered.scopeId + "-s"];
  }
  if (slot && slot._c) {
    slot._d = true;
  }
  return rendered;
}
function ensureValidVNode(vnodes) {
  return vnodes.some((child) => {
    if (!isVNode(child)) return true;
    if (child.type === Comment) return false;
    if (child.type === Fragment && !ensureValidVNode(child.children))
      return false;
    return true;
  }) ? vnodes : null;
}
function toHandlers(obj, preserveCaseIfNecessary) {
  const ret = {};
  if (!isObject(obj)) {
    warn$1(`v-on with no argument expects an object value.`);
    return ret;
  }
  for (const key in obj) {
    ret[preserveCaseIfNecessary && /[A-Z]/.test(key) ? `on:${key}` : toHandlerKey(key)] = obj[key];
  }
  return ret;
}
const getPublicInstance = (i) => {
  if (!i) return null;
  if (isStatefulComponent(i)) return getComponentPublicInstance(i);
  return getPublicInstance(i.parent);
};
const publicPropertiesMap = (
  // Move PURE marker to new line to workaround compiler discarding it
  // due to type annotation
  /* @__PURE__ */ extend(/* @__PURE__ */ Object.create(null), {
    $: (i) => i,
    $el: (i) => i.vnode.el,
    $data: (i) => i.data,
    $props: (i) => shallowReadonly(i.props),
    $attrs: (i) => shallowReadonly(i.attrs),
    $slots: (i) => shallowReadonly(i.slots),
    $refs: (i) => shallowReadonly(i.refs),
    $parent: (i) => getPublicInstance(i.parent),
    $root: (i) => getPublicInstance(i.root),
    $emit: (i) => i.emit,
    $options: (i) => resolveMergedOptions(i),
    $forceUpdate: (i) => i.f || (i.f = () => {
      i.effect.dirty = true;
      queueJob(i.update);
    }),
    $nextTick: (i) => i.n || (i.n = nextTick.bind(i.proxy)),
    $watch: (i) => instanceWatch.bind(i)
  })
);
const isReservedPrefix = (key) => key === "_" || key === "$";
const hasSetupBinding = (state, key) => state !== EMPTY_OBJ && !state.__isScriptSetup && hasOwn(state, key);
const PublicInstanceProxyHandlers = {
  get({ _: instance }, key) {
    if (key === "__v_skip") {
      return true;
    }
    const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
    if (key === "__isVue") {
      return true;
    }
    let normalizedProps;
    if (key[0] !== "$") {
      const n = accessCache[key];
      if (n !== void 0) {
        switch (n) {
          case 1:
            return setupState[key];
          case 2:
            return data[key];
          case 4:
            return ctx[key];
          case 3:
            return props[key];
        }
      } else if (hasSetupBinding(setupState, key)) {
        accessCache[key] = 1;
        return setupState[key];
      } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
        accessCache[key] = 2;
        return data[key];
      } else if (
        // only cache other properties when instance has declared (thus stable)
        // props
        (normalizedProps = instance.propsOptions[0]) && hasOwn(normalizedProps, key)
      ) {
        accessCache[key] = 3;
        return props[key];
      } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
        accessCache[key] = 4;
        return ctx[key];
      } else if (shouldCacheAccess) {
        accessCache[key] = 0;
      }
    }
    const publicGetter = publicPropertiesMap[key];
    let cssModule, globalProperties;
    if (publicGetter) {
      if (key === "$attrs") {
        track(instance.attrs, "get", "");
        markAttrsAccessed();
      } else if (key === "$slots") {
        track(instance, "get", key);
      }
      return publicGetter(instance);
    } else if (
      // css module (injected by vue-loader)
      (cssModule = type.__cssModules) && (cssModule = cssModule[key])
    ) {
      return cssModule;
    } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
      accessCache[key] = 4;
      return ctx[key];
    } else if (
      // global properties
      globalProperties = appContext.config.globalProperties, hasOwn(globalProperties, key)
    ) {
      {
        return globalProperties[key];
      }
    } else if (currentRenderingInstance && (!isString(key) || // #1091 avoid internal isRef/isVNode checks on component instance leading
    // to infinite warning loop
    key.indexOf("__v") !== 0)) {
      if (data !== EMPTY_OBJ && isReservedPrefix(key[0]) && hasOwn(data, key)) {
        warn$1(
          `Property ${JSON.stringify(
            key
          )} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`
        );
      } else if (instance === currentRenderingInstance) {
        warn$1(
          `Property ${JSON.stringify(key)} was accessed during render but is not defined on instance.`
        );
      }
    }
  },
  set({ _: instance }, key, value) {
    const { data, setupState, ctx } = instance;
    if (hasSetupBinding(setupState, key)) {
      setupState[key] = value;
      return true;
    } else if (setupState.__isScriptSetup && hasOwn(setupState, key)) {
      warn$1(`Cannot mutate <script setup> binding "${key}" from Options API.`);
      return false;
    } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
      data[key] = value;
      return true;
    } else if (hasOwn(instance.props, key)) {
      warn$1(`Attempting to mutate prop "${key}". Props are readonly.`);
      return false;
    }
    if (key[0] === "$" && key.slice(1) in instance) {
      warn$1(
        `Attempting to mutate public property "${key}". Properties starting with $ are reserved and readonly.`
      );
      return false;
    } else {
      if (key in instance.appContext.config.globalProperties) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          value
        });
      } else {
        ctx[key] = value;
      }
    }
    return true;
  },
  has({
    _: { data, setupState, accessCache, ctx, appContext, propsOptions }
  }, key) {
    let normalizedProps;
    return !!accessCache[key] || data !== EMPTY_OBJ && hasOwn(data, key) || hasSetupBinding(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key) || hasOwn(ctx, key) || hasOwn(publicPropertiesMap, key) || hasOwn(appContext.config.globalProperties, key);
  },
  defineProperty(target, key, descriptor) {
    if (descriptor.get != null) {
      target._.accessCache[key] = 0;
    } else if (hasOwn(descriptor, "value")) {
      this.set(target, key, descriptor.value, null);
    }
    return Reflect.defineProperty(target, key, descriptor);
  }
};
{
  PublicInstanceProxyHandlers.ownKeys = (target) => {
    warn$1(
      `Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.`
    );
    return Reflect.ownKeys(target);
  };
}
const RuntimeCompiledPublicInstanceProxyHandlers = /* @__PURE__ */ extend(
  {},
  PublicInstanceProxyHandlers,
  {
    get(target, key) {
      if (key === Symbol.unscopables) {
        return;
      }
      return PublicInstanceProxyHandlers.get(target, key, target);
    },
    has(_, key) {
      const has2 = key[0] !== "_" && !isGloballyAllowed(key);
      if (!has2 && PublicInstanceProxyHandlers.has(_, key)) {
        warn$1(
          `Property ${JSON.stringify(
            key
          )} should not start with _ which is a reserved prefix for Vue internals.`
        );
      }
      return has2;
    }
  }
);
function createDevRenderContext(instance) {
  const target = {};
  Object.defineProperty(target, `_`, {
    configurable: true,
    enumerable: false,
    get: () => instance
  });
  Object.keys(publicPropertiesMap).forEach((key) => {
    Object.defineProperty(target, key, {
      configurable: true,
      enumerable: false,
      get: () => publicPropertiesMap[key](instance),
      // intercepted by the proxy so no need for implementation,
      // but needed to prevent set errors
      set: NOOP
    });
  });
  return target;
}
function exposePropsOnRenderContext(instance) {
  const {
    ctx,
    propsOptions: [propsOptions]
  } = instance;
  if (propsOptions) {
    Object.keys(propsOptions).forEach((key) => {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => instance.props[key],
        set: NOOP
      });
    });
  }
}
function exposeSetupStateOnRenderContext(instance) {
  const { ctx, setupState } = instance;
  Object.keys(toRaw(setupState)).forEach((key) => {
    if (!setupState.__isScriptSetup) {
      if (isReservedPrefix(key[0])) {
        warn$1(
          `setup() return property ${JSON.stringify(
            key
          )} should not start with "$" or "_" which are reserved prefixes for Vue internals.`
        );
        return;
      }
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => setupState[key],
        set: NOOP
      });
    }
  });
}
const warnRuntimeUsage = (method) => warn$1(
  `${method}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`
);
function defineProps() {
  {
    warnRuntimeUsage(`defineProps`);
  }
  return null;
}
function defineEmits() {
  {
    warnRuntimeUsage(`defineEmits`);
  }
  return null;
}
function defineExpose(exposed) {
  {
    warnRuntimeUsage(`defineExpose`);
  }
}
function defineOptions(options) {
  {
    warnRuntimeUsage(`defineOptions`);
  }
}
function defineSlots() {
  {
    warnRuntimeUsage(`defineSlots`);
  }
  return null;
}
function defineModel() {
  {
    warnRuntimeUsage("defineModel");
  }
}
function withDefaults(props, defaults) {
  {
    warnRuntimeUsage(`withDefaults`);
  }
  return null;
}
function useSlots() {
  return getContext().slots;
}
function useAttrs() {
  return getContext().attrs;
}
function getContext() {
  const i = getCurrentInstance();
  if (!i) {
    warn$1(`useContext() called without active instance.`);
  }
  return i.setupContext || (i.setupContext = createSetupContext(i));
}
function normalizePropsOrEmits(props) {
  return isArray(props) ? props.reduce(
    (normalized, p2) => (normalized[p2] = null, normalized),
    {}
  ) : props;
}
function mergeDefaults(raw, defaults) {
  const props = normalizePropsOrEmits(raw);
  for (const key in defaults) {
    if (key.startsWith("__skip")) continue;
    let opt = props[key];
    if (opt) {
      if (isArray(opt) || isFunction(opt)) {
        opt = props[key] = { type: opt, default: defaults[key] };
      } else {
        opt.default = defaults[key];
      }
    } else if (opt === null) {
      opt = props[key] = { default: defaults[key] };
    } else {
      warn$1(`props default key "${key}" has no corresponding declaration.`);
    }
    if (opt && defaults[`__skip_${key}`]) {
      opt.skipFactory = true;
    }
  }
  return props;
}
function mergeModels(a, b) {
  if (!a || !b) return a || b;
  if (isArray(a) && isArray(b)) return a.concat(b);
  return extend({}, normalizePropsOrEmits(a), normalizePropsOrEmits(b));
}
function createPropsRestProxy(props, excludedKeys) {
  const ret = {};
  for (const key in props) {
    if (!excludedKeys.includes(key)) {
      Object.defineProperty(ret, key, {
        enumerable: true,
        get: () => props[key]
      });
    }
  }
  return ret;
}
function withAsyncContext(getAwaitable) {
  const ctx = getCurrentInstance();
  if (!ctx) {
    warn$1(
      `withAsyncContext called without active current instance. This is likely a bug.`
    );
  }
  let awaitable = getAwaitable();
  unsetCurrentInstance();
  if (isPromise(awaitable)) {
    awaitable = awaitable.catch((e) => {
      setCurrentInstance(ctx);
      throw e;
    });
  }
  return [awaitable, () => setCurrentInstance(ctx)];
}
function createDuplicateChecker() {
  const cache = /* @__PURE__ */ Object.create(null);
  return (type, key) => {
    if (cache[key]) {
      warn$1(`${type} property "${key}" is already defined in ${cache[key]}.`);
    } else {
      cache[key] = type;
    }
  };
}
let shouldCacheAccess = true;
function applyOptions(instance) {
  const options = resolveMergedOptions(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess = false;
  if (options.beforeCreate) {
    callHook$1(options.beforeCreate, instance, "bc");
  }
  const {
    // state
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    // lifecycle
    created,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render: render2,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    // public API
    expose,
    inheritAttrs,
    // assets
    components,
    directives,
    filters
  } = options;
  const checkDuplicateProperties = createDuplicateChecker();
  {
    const [propsOptions] = instance.propsOptions;
    if (propsOptions) {
      for (const key in propsOptions) {
        checkDuplicateProperties("Props", key);
      }
    }
  }
  if (injectOptions) {
    resolveInjections(injectOptions, ctx, checkDuplicateProperties);
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if (isFunction(methodHandler)) {
        {
          Object.defineProperty(ctx, key, {
            value: methodHandler.bind(publicThis),
            configurable: true,
            enumerable: true,
            writable: true
          });
        }
        {
          checkDuplicateProperties("Methods", key);
        }
      } else {
        warn$1(
          `Method "${key}" has type "${typeof methodHandler}" in the component definition. Did you reference the function correctly?`
        );
      }
    }
  }
  if (dataOptions) {
    if (!isFunction(dataOptions)) {
      warn$1(
        `The data option must be a function. Plain object usage is no longer supported.`
      );
    }
    const data = dataOptions.call(publicThis, publicThis);
    if (isPromise(data)) {
      warn$1(
        `data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.`
      );
    }
    if (!isObject(data)) {
      warn$1(`data() should return an object.`);
    } else {
      instance.data = reactive(data);
      {
        for (const key in data) {
          checkDuplicateProperties("Data", key);
          if (!isReservedPrefix(key[0])) {
            Object.defineProperty(ctx, key, {
              configurable: true,
              enumerable: true,
              get: () => data[key],
              set: NOOP
            });
          }
        }
      }
    }
  }
  shouldCacheAccess = true;
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get2 = isFunction(opt) ? opt.bind(publicThis, publicThis) : isFunction(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
      if (get2 === NOOP) {
        warn$1(`Computed property "${key}" has no getter.`);
      }
      const set2 = !isFunction(opt) && isFunction(opt.set) ? opt.set.bind(publicThis) : () => {
        warn$1(
          `Write operation failed: computed property "${key}" is readonly.`
        );
      };
      const c = computed({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c.value,
        set: (v) => c.value = v
      });
      {
        checkDuplicateProperties("Computed", key);
      }
    }
  }
  if (watchOptions) {
    for (const key in watchOptions) {
      createWatcher(watchOptions[key], ctx, publicThis, key);
    }
  }
  if (provideOptions) {
    const provides = isFunction(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    Reflect.ownKeys(provides).forEach((key) => {
      provide(key, provides[key]);
    });
  }
  if (created) {
    callHook$1(created, instance, "c");
  }
  function registerLifecycleHook(register, hook) {
    if (isArray(hook)) {
      hook.forEach((_hook) => register(_hook.bind(publicThis)));
    } else if (hook) {
      register(hook.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount, beforeMount);
  registerLifecycleHook(onMounted, mounted);
  registerLifecycleHook(onBeforeUpdate, beforeUpdate);
  registerLifecycleHook(onUpdated, updated);
  registerLifecycleHook(onActivated, activated);
  registerLifecycleHook(onDeactivated, deactivated);
  registerLifecycleHook(onErrorCaptured, errorCaptured);
  registerLifecycleHook(onRenderTracked, renderTracked);
  registerLifecycleHook(onRenderTriggered, renderTriggered);
  registerLifecycleHook(onBeforeUnmount, beforeUnmount);
  registerLifecycleHook(onUnmounted, unmounted);
  registerLifecycleHook(onServerPrefetch, serverPrefetch);
  if (isArray(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key) => {
        Object.defineProperty(exposed, key, {
          get: () => publicThis[key],
          set: (val) => publicThis[key] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render2 && instance.render === NOOP) {
    instance.render = render2;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components) instance.components = components;
  if (directives) instance.directives = directives;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP) {
  if (isArray(injectOptions)) {
    injectOptions = normalizeInject(injectOptions);
  }
  for (const key in injectOptions) {
    const opt = injectOptions[key];
    let injected;
    if (isObject(opt)) {
      if ("default" in opt) {
        injected = inject(
          opt.from || key,
          opt.default,
          true
        );
      } else {
        injected = inject(opt.from || key);
      }
    } else {
      injected = inject(opt);
    }
    if (isRef(injected)) {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => injected.value,
        set: (v) => injected.value = v
      });
    } else {
      ctx[key] = injected;
    }
    {
      checkDuplicateProperties("Inject", key);
    }
  }
}
function callHook$1(hook, instance, type) {
  callWithAsyncErrorHandling(
    isArray(hook) ? hook.map((h2) => h2.bind(instance.proxy)) : hook.bind(instance.proxy),
    instance,
    type
  );
}
function createWatcher(raw, ctx, publicThis, key) {
  const getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
  if (isString(raw)) {
    const handler = ctx[raw];
    if (isFunction(handler)) {
      watch(getter, handler);
    } else {
      warn$1(`Invalid watch handler specified by key "${raw}"`, handler);
    }
  } else if (isFunction(raw)) {
    watch(getter, raw.bind(publicThis));
  } else if (isObject(raw)) {
    if (isArray(raw)) {
      raw.forEach((r) => createWatcher(r, ctx, publicThis, key));
    } else {
      const handler = isFunction(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction(handler)) {
        watch(getter, handler, raw);
      } else {
        warn$1(`Invalid watch handler specified by key "${raw.handler}"`, handler);
      }
    }
  } else {
    warn$1(`Invalid watch option: "${key}"`, raw);
  }
}
function resolveMergedOptions(instance) {
  const base = instance.type;
  const { mixins, extends: extendsOptions } = base;
  const {
    mixins: globalMixins,
    optionsCache: cache,
    config: { optionMergeStrategies }
  } = instance.appContext;
  const cached = cache.get(base);
  let resolved;
  if (cached) {
    resolved = cached;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach(
        (m2) => mergeOptions(resolved, m2, optionMergeStrategies, true)
      );
    }
    mergeOptions(resolved, base, optionMergeStrategies);
  }
  if (isObject(base)) {
    cache.set(base, resolved);
  }
  return resolved;
}
function mergeOptions(to, from, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from;
  if (extendsOptions) {
    mergeOptions(to, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach(
      (m2) => mergeOptions(to, m2, strats, true)
    );
  }
  for (const key in from) {
    if (asMixin && key === "expose") {
      warn$1(
        `"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.`
      );
    } else {
      const strat = internalOptionMergeStrats[key] || strats && strats[key];
      to[key] = strat ? strat(to[key], from[key]) : from[key];
    }
  }
  return to;
}
const internalOptionMergeStrats = {
  data: mergeDataFn,
  props: mergeEmitsOrPropsOptions,
  emits: mergeEmitsOrPropsOptions,
  // objects
  methods: mergeObjectOptions,
  computed: mergeObjectOptions,
  // lifecycle
  beforeCreate: mergeAsArray$1,
  created: mergeAsArray$1,
  beforeMount: mergeAsArray$1,
  mounted: mergeAsArray$1,
  beforeUpdate: mergeAsArray$1,
  updated: mergeAsArray$1,
  beforeDestroy: mergeAsArray$1,
  beforeUnmount: mergeAsArray$1,
  destroyed: mergeAsArray$1,
  unmounted: mergeAsArray$1,
  activated: mergeAsArray$1,
  deactivated: mergeAsArray$1,
  errorCaptured: mergeAsArray$1,
  serverPrefetch: mergeAsArray$1,
  // assets
  components: mergeObjectOptions,
  directives: mergeObjectOptions,
  // watch
  watch: mergeWatchOptions,
  // provide / inject
  provide: mergeDataFn,
  inject: mergeInject
};
function mergeDataFn(to, from) {
  if (!from) {
    return to;
  }
  if (!to) {
    return from;
  }
  return function mergedDataFn() {
    return extend(
      isFunction(to) ? to.call(this, this) : to,
      isFunction(from) ? from.call(this, this) : from
    );
  };
}
function mergeInject(to, from) {
  return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
}
function normalizeInject(raw) {
  if (isArray(raw)) {
    const res = {};
    for (let i = 0; i < raw.length; i++) {
      res[raw[i]] = raw[i];
    }
    return res;
  }
  return raw;
}
function mergeAsArray$1(to, from) {
  return to ? [...new Set([].concat(to, from))] : from;
}
function mergeObjectOptions(to, from) {
  return to ? extend(/* @__PURE__ */ Object.create(null), to, from) : from;
}
function mergeEmitsOrPropsOptions(to, from) {
  if (to) {
    if (isArray(to) && isArray(from)) {
      return [.../* @__PURE__ */ new Set([...to, ...from])];
    }
    return extend(
      /* @__PURE__ */ Object.create(null),
      normalizePropsOrEmits(to),
      normalizePropsOrEmits(from != null ? from : {})
    );
  } else {
    return from;
  }
}
function mergeWatchOptions(to, from) {
  if (!to) return from;
  if (!from) return to;
  const merged = extend(/* @__PURE__ */ Object.create(null), to);
  for (const key in from) {
    merged[key] = mergeAsArray$1(to[key], from[key]);
  }
  return merged;
}
function createAppContext() {
  return {
    app: null,
    config: {
      isNativeTag: NO,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: /* @__PURE__ */ Object.create(null),
    optionsCache: /* @__PURE__ */ new WeakMap(),
    propsCache: /* @__PURE__ */ new WeakMap(),
    emitsCache: /* @__PURE__ */ new WeakMap()
  };
}
let uid$1 = 0;
function createAppAPI(render2, hydrate2) {
  return function createApp2(rootComponent, rootProps = null) {
    if (!isFunction(rootComponent)) {
      rootComponent = extend({}, rootComponent);
    }
    if (rootProps != null && !isObject(rootProps)) {
      warn$1(`root props passed to app.mount() must be an object.`);
      rootProps = null;
    }
    const context = createAppContext();
    const installedPlugins = /* @__PURE__ */ new WeakSet();
    let isMounted = false;
    const app = context.app = {
      _uid: uid$1++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      _instance: null,
      version,
      get config() {
        return context.config;
      },
      set config(v) {
        {
          warn$1(
            `app.config cannot be replaced. Modify individual options instead.`
          );
        }
      },
      use(plugin, ...options) {
        if (installedPlugins.has(plugin)) {
          warn$1(`Plugin has already been applied to target app.`);
        } else if (plugin && isFunction(plugin.install)) {
          installedPlugins.add(plugin);
          plugin.install(app, ...options);
        } else if (isFunction(plugin)) {
          installedPlugins.add(plugin);
          plugin(app, ...options);
        } else {
          warn$1(
            `A plugin must either be a function or an object with an "install" function.`
          );
        }
        return app;
      },
      mixin(mixin) {
        {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
          } else {
            warn$1(
              "Mixin has already been applied to target app" + (mixin.name ? `: ${mixin.name}` : "")
            );
          }
        }
        return app;
      },
      component(name, component) {
        {
          validateComponentName(name, context.config);
        }
        if (!component) {
          return context.components[name];
        }
        if (context.components[name]) {
          warn$1(`Component "${name}" has already been registered in target app.`);
        }
        context.components[name] = component;
        return app;
      },
      directive(name, directive) {
        {
          validateDirectiveName(name);
        }
        if (!directive) {
          return context.directives[name];
        }
        if (context.directives[name]) {
          warn$1(`Directive "${name}" has already been registered in target app.`);
        }
        context.directives[name] = directive;
        return app;
      },
      mount(rootContainer, isHydrate, namespace) {
        if (!isMounted) {
          if (rootContainer.__vue_app__) {
            warn$1(
              `There is already an app instance mounted on the host container.
 If you want to mount another app on the same host container, you need to unmount the previous app by calling \`app.unmount()\` first.`
            );
          }
          const vnode = createVNode(rootComponent, rootProps);
          vnode.appContext = context;
          if (namespace === true) {
            namespace = "svg";
          } else if (namespace === false) {
            namespace = void 0;
          }
          {
            context.reload = () => {
              render2(
                cloneVNode(vnode),
                rootContainer,
                namespace
              );
            };
          }
          if (isHydrate && hydrate2) {
            hydrate2(vnode, rootContainer);
          } else {
            render2(vnode, rootContainer, namespace);
          }
          isMounted = true;
          app._container = rootContainer;
          rootContainer.__vue_app__ = app;
          {
            app._instance = vnode.component;
            devtoolsInitApp(app, version);
          }
          return getComponentPublicInstance(vnode.component);
        } else {
          warn$1(
            `App has already been mounted.
If you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. \`const createMyApp = () => createApp(App)\``
          );
        }
      },
      unmount() {
        if (isMounted) {
          render2(null, app._container);
          {
            app._instance = null;
            devtoolsUnmountApp(app);
          }
          delete app._container.__vue_app__;
        } else {
          warn$1(`Cannot unmount an app that is not mounted.`);
        }
      },
      provide(key, value) {
        if (key in context.provides) {
          warn$1(
            `App already provides property with key "${String(key)}". It will be overwritten with the new value.`
          );
        }
        context.provides[key] = value;
        return app;
      },
      runWithContext(fn) {
        const lastApp = currentApp;
        currentApp = app;
        try {
          return fn();
        } finally {
          currentApp = lastApp;
        }
      }
    };
    return app;
  };
}
let currentApp = null;
function provide(key, value) {
  if (!currentInstance) {
    {
      warn$1(`provide() can only be used inside setup().`);
    }
  } else {
    let provides = currentInstance.provides;
    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key] = value;
  }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance || currentRenderingInstance;
  if (instance || currentApp) {
    const provides = instance ? instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides : currentApp._context.provides;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction(defaultValue) ? defaultValue.call(instance && instance.proxy) : defaultValue;
    } else {
      warn$1(`injection "${String(key)}" not found.`);
    }
  } else {
    warn$1(`inject() can only be used inside setup() or functional components.`);
  }
}
function hasInjectionContext() {
  return !!(currentInstance || currentRenderingInstance || currentApp);
}
const internalObjectProto = {};
const createInternalObject = () => Object.create(internalObjectProto);
const isInternalObject = (obj) => Object.getPrototypeOf(obj) === internalObjectProto;
function initProps(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = createInternalObject();
  instance.propsDefaults = /* @__PURE__ */ Object.create(null);
  setFullProps(instance, rawProps, props, attrs);
  for (const key in instance.propsOptions[0]) {
    if (!(key in props)) {
      props[key] = void 0;
    }
  }
  {
    validateProps(rawProps || {}, props, instance);
  }
  if (isStateful) {
    instance.props = isSSR ? props : shallowReactive(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function isInHmrContext(instance) {
  while (instance) {
    if (instance.type.__hmrId) return true;
    instance = instance.parent;
  }
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
  const {
    props,
    attrs,
    vnode: { patchFlag }
  } = instance;
  const rawCurrentProps = toRaw(props);
  const [options] = instance.propsOptions;
  let hasAttrsChanged = false;
  if (
    // always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    !isInHmrContext(instance) && (optimized || patchFlag > 0) && !(patchFlag & 16)
  ) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i = 0; i < propsToUpdate.length; i++) {
        let key = propsToUpdate[i];
        if (isEmitListener(instance.emitsOptions, key)) {
          continue;
        }
        const value = rawProps[key];
        if (options) {
          if (hasOwn(attrs, key)) {
            if (value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = camelize(key);
            props[camelizedKey] = resolvePropValue(
              options,
              rawCurrentProps,
              camelizedKey,
              value,
              instance,
              false
            );
          }
        } else {
          if (value !== attrs[key]) {
            attrs[key] = value;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps(instance, rawProps, props, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || // for camelCase
      !hasOwn(rawProps, key) && // it's possible the original props was passed in as kebab-case
      // and converted to camelCase (#955)
      ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && // for camelCase
          (rawPrevProps[key] !== void 0 || // for kebab-case
          rawPrevProps[kebabKey] !== void 0)) {
            props[key] = resolvePropValue(
              options,
              rawCurrentProps,
              key,
              void 0,
              instance,
              true
            );
          }
        } else {
          delete props[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !hasOwn(rawProps, key) && true) {
          delete attrs[key];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    trigger(instance.attrs, "set", "");
  }
  {
    validateProps(rawProps || {}, props, instance);
  }
}
function setFullProps(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key in rawProps) {
      if (isReservedProp(key)) {
        continue;
      }
      const value = rawProps[key];
      let camelKey;
      if (options && hasOwn(options, camelKey = camelize(key))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props[camelKey] = value;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value;
        }
      } else if (!isEmitListener(instance.emitsOptions, key)) {
        if (!(key in attrs) || value !== attrs[key]) {
          attrs[key] = value;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw(props);
    const castValues = rawCastValues || EMPTY_OBJ;
    for (let i = 0; i < needCastKeys.length; i++) {
      const key = needCastKeys[i];
      props[key] = resolvePropValue(
        options,
        rawCurrentProps,
        key,
        castValues[key],
        instance,
        !hasOwn(castValues, key)
      );
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = hasOwn(opt, "default");
    if (hasDefault && value === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && !opt.skipFactory && isFunction(defaultValue)) {
        const { propsDefaults } = instance;
        if (key in propsDefaults) {
          value = propsDefaults[key];
        } else {
          const reset2 = setCurrentInstance(instance);
          value = propsDefaults[key] = defaultValue.call(
            null,
            props
          );
          reset2();
        }
      } else {
        value = defaultValue;
      }
    }
    if (opt[
      0
      /* shouldCast */
    ]) {
      if (isAbsent && !hasDefault) {
        value = false;
      } else if (opt[
        1
        /* shouldCastTrue */
      ] && (value === "" || value === hyphenate(key))) {
        value = true;
      }
    }
  }
  return value;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
  const cache = appContext.propsCache;
  const cached = cache.get(comp);
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (!isFunction(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys] = normalizePropsOptions(raw2, appContext, true);
      extend(normalized, props);
      if (keys) needCastKeys.push(...keys);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    if (isObject(comp)) {
      cache.set(comp, EMPTY_ARR);
    }
    return EMPTY_ARR;
  }
  if (isArray(raw)) {
    for (let i = 0; i < raw.length; i++) {
      if (!isString(raw[i])) {
        warn$1(`props must be strings when using array syntax.`, raw[i]);
      }
      const normalizedKey = camelize(raw[i]);
      if (validatePropName(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ;
      }
    }
  } else if (raw) {
    if (!isObject(raw)) {
      warn$1(`invalid props options`, raw);
    }
    for (const key in raw) {
      const normalizedKey = camelize(key);
      if (validatePropName(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = isArray(opt) || isFunction(opt) ? { type: opt } : extend({}, opt);
        if (prop) {
          const booleanIndex = getTypeIndex(Boolean, prop.type);
          const stringIndex = getTypeIndex(String, prop.type);
          prop[
            0
            /* shouldCast */
          ] = booleanIndex > -1;
          prop[
            1
            /* shouldCastTrue */
          ] = stringIndex < 0 || booleanIndex < stringIndex;
          if (booleanIndex > -1 || hasOwn(prop, "default")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  if (isObject(comp)) {
    cache.set(comp, res);
  }
  return res;
}
function validatePropName(key) {
  if (key[0] !== "$" && !isReservedProp(key)) {
    return true;
  } else {
    warn$1(`Invalid prop name: "${key}" is a reserved property.`);
  }
  return false;
}
function getType(ctor) {
  if (ctor === null) {
    return "null";
  }
  if (typeof ctor === "function") {
    return ctor.name || "";
  } else if (typeof ctor === "object") {
    const name = ctor.constructor && ctor.constructor.name;
    return name || "";
  }
  return "";
}
function isSameType(a, b) {
  return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
  if (isArray(expectedTypes)) {
    return expectedTypes.findIndex((t) => isSameType(t, type));
  } else if (isFunction(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }
  return -1;
}
function validateProps(rawProps, props, instance) {
  const resolvedValues = toRaw(props);
  const options = instance.propsOptions[0];
  for (const key in options) {
    let opt = options[key];
    if (opt == null) continue;
    validateProp(
      key,
      resolvedValues[key],
      opt,
      shallowReadonly(resolvedValues),
      !hasOwn(rawProps, key) && !hasOwn(rawProps, hyphenate(key))
    );
  }
}
function validateProp(name, value, prop, props, isAbsent) {
  const { type, required, validator, skipCheck } = prop;
  if (required && isAbsent) {
    warn$1('Missing required prop: "' + name + '"');
    return;
  }
  if (value == null && !required) {
    return;
  }
  if (type != null && type !== true && !skipCheck) {
    let isValid = false;
    const types = isArray(type) ? type : [type];
    const expectedTypes = [];
    for (let i = 0; i < types.length && !isValid; i++) {
      const { valid, expectedType } = assertType(value, types[i]);
      expectedTypes.push(expectedType || "");
      isValid = valid;
    }
    if (!isValid) {
      warn$1(getInvalidTypeMessage(name, value, expectedTypes));
      return;
    }
  }
  if (validator && !validator(value, props)) {
    warn$1('Invalid prop: custom validator check failed for prop "' + name + '".');
  }
}
const isSimpleType = /* @__PURE__ */ makeMap(
  "String,Number,Boolean,Function,Symbol,BigInt"
);
function assertType(value, type) {
  let valid;
  const expectedType = getType(type);
  if (isSimpleType(expectedType)) {
    const t = typeof value;
    valid = t === expectedType.toLowerCase();
    if (!valid && t === "object") {
      valid = value instanceof type;
    }
  } else if (expectedType === "Object") {
    valid = isObject(value);
  } else if (expectedType === "Array") {
    valid = isArray(value);
  } else if (expectedType === "null") {
    valid = value === null;
  } else {
    valid = value instanceof type;
  }
  return {
    valid,
    expectedType
  };
}
function getInvalidTypeMessage(name, value, expectedTypes) {
  if (expectedTypes.length === 0) {
    return `Prop type [] for prop "${name}" won't match anything. Did you mean to use type Array instead?`;
  }
  let message = `Invalid prop: type check failed for prop "${name}". Expected ${expectedTypes.map(capitalize).join(" | ")}`;
  const expectedType = expectedTypes[0];
  const receivedType = toRawType(value);
  const expectedValue = styleValue(value, expectedType);
  const receivedValue = styleValue(value, receivedType);
  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
    message += ` with value ${expectedValue}`;
  }
  message += `, got ${receivedType} `;
  if (isExplicable(receivedType)) {
    message += `with value ${receivedValue}.`;
  }
  return message;
}
function styleValue(value, type) {
  if (type === "String") {
    return `"${value}"`;
  } else if (type === "Number") {
    return `${Number(value)}`;
  } else {
    return `${value}`;
  }
}
function isExplicable(type) {
  const explicitTypes = ["string", "number", "boolean"];
  return explicitTypes.some((elem) => type.toLowerCase() === elem);
}
function isBoolean(...args) {
  return args.some((elem) => elem.toLowerCase() === "boolean");
}
const isInternalKey = (key) => key[0] === "_" || key === "$stable";
const normalizeSlotValue = (value) => isArray(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
const normalizeSlot = (key, rawSlot, ctx) => {
  if (rawSlot._n) {
    return rawSlot;
  }
  const normalized = withCtx((...args) => {
    if (currentInstance && (!ctx || ctx.root === currentInstance.root)) {
      warn$1(
        `Slot "${key}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`
      );
    }
    return normalizeSlotValue(rawSlot(...args));
  }, ctx);
  normalized._c = false;
  return normalized;
};
const normalizeObjectSlots = (rawSlots, slots, instance) => {
  const ctx = rawSlots._ctx;
  for (const key in rawSlots) {
    if (isInternalKey(key)) continue;
    const value = rawSlots[key];
    if (isFunction(value)) {
      slots[key] = normalizeSlot(key, value, ctx);
    } else if (value != null) {
      {
        warn$1(
          `Non-function value encountered for slot "${key}". Prefer function slots for better performance.`
        );
      }
      const normalized = normalizeSlotValue(value);
      slots[key] = () => normalized;
    }
  }
};
const normalizeVNodeSlots = (instance, children) => {
  if (!isKeepAlive(instance.vnode) && true) {
    warn$1(
      `Non-function value encountered for default slot. Prefer function slots for better performance.`
    );
  }
  const normalized = normalizeSlotValue(children);
  instance.slots.default = () => normalized;
};
const initSlots = (instance, children) => {
  const slots = instance.slots = createInternalObject();
  if (instance.vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      extend(slots, children);
      def(slots, "_", type, true);
    } else {
      normalizeObjectSlots(children, slots);
    }
  } else if (children) {
    normalizeVNodeSlots(instance, children);
  }
};
const updateSlots = (instance, children, optimized) => {
  const { vnode, slots } = instance;
  let needDeletionCheck = true;
  let deletionComparisonTarget = EMPTY_OBJ;
  if (vnode.shapeFlag & 32) {
    const type = children._;
    if (type) {
      if (isHmrUpdating) {
        extend(slots, children);
        trigger(instance, "set", "$slots");
      } else if (optimized && type === 1) {
        needDeletionCheck = false;
      } else {
        extend(slots, children);
        if (!optimized && type === 1) {
          delete slots._;
        }
      }
    } else {
      needDeletionCheck = !children.$stable;
      normalizeObjectSlots(children, slots);
    }
    deletionComparisonTarget = children;
  } else if (children) {
    normalizeVNodeSlots(instance, children);
    deletionComparisonTarget = { default: 1 };
  }
  if (needDeletionCheck) {
    for (const key in slots) {
      if (!isInternalKey(key) && deletionComparisonTarget[key] == null) {
        delete slots[key];
      }
    }
  }
};
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
  if (isArray(rawRef)) {
    rawRef.forEach(
      (r, i) => setRef(
        r,
        oldRawRef && (isArray(oldRawRef) ? oldRawRef[i] : oldRawRef),
        parentSuspense,
        vnode,
        isUnmount
      )
    );
    return;
  }
  if (isAsyncWrapper(vnode) && !isUnmount) {
    return;
  }
  const refValue = vnode.shapeFlag & 4 ? getComponentPublicInstance(vnode.component) : vnode.el;
  const value = isUnmount ? null : refValue;
  const { i: owner, r: ref3 } = rawRef;
  if (!owner) {
    warn$1(
      `Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.`
    );
    return;
  }
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  if (oldRef != null && oldRef !== ref3) {
    if (isString(oldRef)) {
      refs[oldRef] = null;
      if (hasOwn(setupState, oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isFunction(ref3)) {
    callWithErrorHandling(ref3, owner, 12, [value, refs]);
  } else {
    const _isString = isString(ref3);
    const _isRef = isRef(ref3);
    if (_isString || _isRef) {
      const doSet = () => {
        if (rawRef.f) {
          const existing = _isString ? hasOwn(setupState, ref3) ? setupState[ref3] : refs[ref3] : ref3.value;
          if (isUnmount) {
            isArray(existing) && remove(existing, refValue);
          } else {
            if (!isArray(existing)) {
              if (_isString) {
                refs[ref3] = [refValue];
                if (hasOwn(setupState, ref3)) {
                  setupState[ref3] = refs[ref3];
                }
              } else {
                ref3.value = [refValue];
                if (rawRef.k) refs[rawRef.k] = ref3.value;
              }
            } else if (!existing.includes(refValue)) {
              existing.push(refValue);
            }
          }
        } else if (_isString) {
          refs[ref3] = value;
          if (hasOwn(setupState, ref3)) {
            setupState[ref3] = value;
          }
        } else if (_isRef) {
          ref3.value = value;
          if (rawRef.k) refs[rawRef.k] = value;
        } else {
          warn$1("Invalid template ref type:", ref3, `(${typeof ref3})`);
        }
      };
      if (value) {
        doSet.id = -1;
        queuePostRenderEffect(doSet, parentSuspense);
      } else {
        doSet();
      }
    } else {
      warn$1("Invalid template ref type:", ref3, `(${typeof ref3})`);
    }
  }
}
let hasLoggedMismatchError = false;
const logMismatchError = () => {
  if (hasLoggedMismatchError) {
    return;
  }
  console.error("Hydration completed but contains mismatches.");
  hasLoggedMismatchError = true;
};
const isSVGContainer = (container) => container.namespaceURI.includes("svg") && container.tagName !== "foreignObject";
const isMathMLContainer = (container) => container.namespaceURI.includes("MathML");
const getContainerType = (container) => {
  if (isSVGContainer(container)) return "svg";
  if (isMathMLContainer(container)) return "mathml";
  return void 0;
};
const isComment = (node) => node.nodeType === 8;
function createHydrationFunctions(rendererInternals) {
  const {
    mt: mountComponent,
    p: patch,
    o: {
      patchProp: patchProp2,
      createText,
      nextSibling,
      parentNode,
      remove: remove2,
      insert,
      createComment
    }
  } = rendererInternals;
  const hydrate2 = (vnode, container) => {
    if (!container.hasChildNodes()) {
      warn$1(
        `Attempting to hydrate existing markup but container is empty. Performing full mount instead.`
      );
      patch(null, vnode, container);
      flushPostFlushCbs();
      container._vnode = vnode;
      return;
    }
    hydrateNode(container.firstChild, vnode, null, null, null);
    flushPostFlushCbs();
    container._vnode = vnode;
  };
  const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false) => {
    optimized = optimized || !!vnode.dynamicChildren;
    const isFragmentStart = isComment(node) && node.data === "[";
    const onMismatch = () => handleMismatch(
      node,
      vnode,
      parentComponent,
      parentSuspense,
      slotScopeIds,
      isFragmentStart
    );
    const { type, ref: ref3, shapeFlag, patchFlag } = vnode;
    let domType = node.nodeType;
    vnode.el = node;
    {
      if (!("__vnode" in node)) {
        Object.defineProperty(node, "__vnode", {
          value: vnode,
          enumerable: false
        });
      }
      if (!("__vueParentComponent" in node)) {
        Object.defineProperty(node, "__vueParentComponent", {
          value: parentComponent,
          enumerable: false
        });
      }
    }
    if (patchFlag === -2) {
      optimized = false;
      vnode.dynamicChildren = null;
    }
    let nextNode = null;
    switch (type) {
      case Text:
        if (domType !== 3) {
          if (vnode.children === "") {
            insert(vnode.el = createText(""), parentNode(node), node);
            nextNode = node;
          } else {
            nextNode = onMismatch();
          }
        } else {
          if (node.data !== vnode.children) {
            warn$1(
              `Hydration text mismatch in`,
              node.parentNode,
              `
  - rendered on server: ${JSON.stringify(
                node.data
              )}
  - expected on client: ${JSON.stringify(vnode.children)}`
            );
            logMismatchError();
            node.data = vnode.children;
          }
          nextNode = nextSibling(node);
        }
        break;
      case Comment:
        if (isTemplateNode2(node)) {
          nextNode = nextSibling(node);
          replaceNode(
            vnode.el = node.content.firstChild,
            node,
            parentComponent
          );
        } else if (domType !== 8 || isFragmentStart) {
          nextNode = onMismatch();
        } else {
          nextNode = nextSibling(node);
        }
        break;
      case Static:
        if (isFragmentStart) {
          node = nextSibling(node);
          domType = node.nodeType;
        }
        if (domType === 1 || domType === 3) {
          nextNode = node;
          const needToAdoptContent = !vnode.children.length;
          for (let i = 0; i < vnode.staticCount; i++) {
            if (needToAdoptContent)
              vnode.children += nextNode.nodeType === 1 ? nextNode.outerHTML : nextNode.data;
            if (i === vnode.staticCount - 1) {
              vnode.anchor = nextNode;
            }
            nextNode = nextSibling(nextNode);
          }
          return isFragmentStart ? nextSibling(nextNode) : nextNode;
        } else {
          onMismatch();
        }
        break;
      case Fragment:
        if (!isFragmentStart) {
          nextNode = onMismatch();
        } else {
          nextNode = hydrateFragment(
            node,
            vnode,
            parentComponent,
            parentSuspense,
            slotScopeIds,
            optimized
          );
        }
        break;
      default:
        if (shapeFlag & 1) {
          if ((domType !== 1 || vnode.type.toLowerCase() !== node.tagName.toLowerCase()) && !isTemplateNode2(node)) {
            nextNode = onMismatch();
          } else {
            nextNode = hydrateElement(
              node,
              vnode,
              parentComponent,
              parentSuspense,
              slotScopeIds,
              optimized
            );
          }
        } else if (shapeFlag & 6) {
          vnode.slotScopeIds = slotScopeIds;
          const container = parentNode(node);
          if (isFragmentStart) {
            nextNode = locateClosingAnchor(node);
          } else if (isComment(node) && node.data === "teleport start") {
            nextNode = locateClosingAnchor(node, node.data, "teleport end");
          } else {
            nextNode = nextSibling(node);
          }
          mountComponent(
            vnode,
            container,
            null,
            parentComponent,
            parentSuspense,
            getContainerType(container),
            optimized
          );
          if (isAsyncWrapper(vnode)) {
            let subTree;
            if (isFragmentStart) {
              subTree = createVNode(Fragment);
              subTree.anchor = nextNode ? nextNode.previousSibling : container.lastChild;
            } else {
              subTree = node.nodeType === 3 ? createTextVNode("") : createVNode("div");
            }
            subTree.el = node;
            vnode.component.subTree = subTree;
          }
        } else if (shapeFlag & 64) {
          if (domType !== 8) {
            nextNode = onMismatch();
          } else {
            nextNode = vnode.type.hydrate(
              node,
              vnode,
              parentComponent,
              parentSuspense,
              slotScopeIds,
              optimized,
              rendererInternals,
              hydrateChildren
            );
          }
        } else if (shapeFlag & 128) {
          nextNode = vnode.type.hydrate(
            node,
            vnode,
            parentComponent,
            parentSuspense,
            getContainerType(parentNode(node)),
            slotScopeIds,
            optimized,
            rendererInternals,
            hydrateNode
          );
        } else {
          warn$1("Invalid HostVNode type:", type, `(${typeof type})`);
        }
    }
    if (ref3 != null) {
      setRef(ref3, null, parentSuspense, vnode);
    }
    return nextNode;
  };
  const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
    optimized = optimized || !!vnode.dynamicChildren;
    const { type, props, patchFlag, shapeFlag, dirs, transition } = vnode;
    const forcePatch = type === "input" || type === "option";
    {
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "created");
      }
      let needCallTransitionHooks = false;
      if (isTemplateNode2(el)) {
        needCallTransitionHooks = needTransition(parentSuspense, transition) && parentComponent && parentComponent.vnode.props && parentComponent.vnode.props.appear;
        const content = el.content.firstChild;
        if (needCallTransitionHooks) {
          transition.beforeEnter(content);
        }
        replaceNode(content, el, parentComponent);
        vnode.el = el = content;
      }
      if (shapeFlag & 16 && // skip if element has innerHTML / textContent
      !(props && (props.innerHTML || props.textContent))) {
        let next = hydrateChildren(
          el.firstChild,
          vnode,
          el,
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
        let hasWarned2 = false;
        while (next) {
          if (!hasWarned2) {
            warn$1(
              `Hydration children mismatch on`,
              el,
              `
Server rendered element contains more child nodes than client vdom.`
            );
            hasWarned2 = true;
          }
          logMismatchError();
          const cur = next;
          next = next.nextSibling;
          remove2(cur);
        }
      } else if (shapeFlag & 8) {
        if (el.textContent !== vnode.children) {
          warn$1(
            `Hydration text content mismatch on`,
            el,
            `
  - rendered on server: ${el.textContent}
  - expected on client: ${vnode.children}`
          );
          logMismatchError();
          el.textContent = vnode.children;
        }
      }
      if (props) {
        {
          for (const key in props) {
            if (propHasMismatch(el, key, props[key], vnode, parentComponent)) {
              logMismatchError();
            }
            if (forcePatch && (key.endsWith("value") || key === "indeterminate") || isOn(key) && !isReservedProp(key) || // force hydrate v-bind with .prop modifiers
            key[0] === ".") {
              patchProp2(
                el,
                key,
                null,
                props[key],
                void 0,
                void 0,
                parentComponent
              );
            }
          }
        }
      }
      let vnodeHooks;
      if (vnodeHooks = props && props.onVnodeBeforeMount) {
        invokeVNodeHook(vnodeHooks, parentComponent, vnode);
      }
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
      }
      if ((vnodeHooks = props && props.onVnodeMounted) || dirs || needCallTransitionHooks) {
        queueEffectWithSuspense(() => {
          vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
          needCallTransitionHooks && transition.enter(el);
          dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
        }, parentSuspense);
      }
    }
    return el.nextSibling;
  };
  const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized) => {
    optimized = optimized || !!parentVNode.dynamicChildren;
    const children = parentVNode.children;
    const l = children.length;
    let hasWarned2 = false;
    for (let i = 0; i < l; i++) {
      const vnode = optimized ? children[i] : children[i] = normalizeVNode(children[i]);
      if (node) {
        node = hydrateNode(
          node,
          vnode,
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
      } else if (vnode.type === Text && !vnode.children) {
        insert(vnode.el = createText(""), container);
      } else {
        if (!hasWarned2) {
          warn$1(
            `Hydration children mismatch on`,
            container,
            `
Server rendered element contains fewer child nodes than client vdom.`
          );
          hasWarned2 = true;
        }
        logMismatchError();
        patch(
          null,
          vnode,
          container,
          null,
          parentComponent,
          parentSuspense,
          getContainerType(container),
          slotScopeIds
        );
      }
    }
    return node;
  };
  const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
    const { slotScopeIds: fragmentSlotScopeIds } = vnode;
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    const container = parentNode(node);
    const next = hydrateChildren(
      nextSibling(node),
      vnode,
      container,
      parentComponent,
      parentSuspense,
      slotScopeIds,
      optimized
    );
    if (next && isComment(next) && next.data === "]") {
      return nextSibling(vnode.anchor = next);
    } else {
      logMismatchError();
      insert(vnode.anchor = createComment(`]`), container, next);
      return next;
    }
  };
  const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment) => {
    warn$1(
      `Hydration node mismatch:
- rendered on server:`,
      node,
      node.nodeType === 3 ? `(text)` : isComment(node) && node.data === "[" ? `(start of fragment)` : ``,
      `
- expected on client:`,
      vnode.type
    );
    logMismatchError();
    vnode.el = null;
    if (isFragment) {
      const end = locateClosingAnchor(node);
      while (true) {
        const next2 = nextSibling(node);
        if (next2 && next2 !== end) {
          remove2(next2);
        } else {
          break;
        }
      }
    }
    const next = nextSibling(node);
    const container = parentNode(node);
    remove2(node);
    patch(
      null,
      vnode,
      container,
      next,
      parentComponent,
      parentSuspense,
      getContainerType(container),
      slotScopeIds
    );
    return next;
  };
  const locateClosingAnchor = (node, open2 = "[", close = "]") => {
    let match = 0;
    while (node) {
      node = nextSibling(node);
      if (node && isComment(node)) {
        if (node.data === open2) match++;
        if (node.data === close) {
          if (match === 0) {
            return nextSibling(node);
          } else {
            match--;
          }
        }
      }
    }
    return node;
  };
  const replaceNode = (newNode, oldNode, parentComponent) => {
    const parentNode2 = oldNode.parentNode;
    if (parentNode2) {
      parentNode2.replaceChild(newNode, oldNode);
    }
    let parent = parentComponent;
    while (parent) {
      if (parent.vnode.el === oldNode) {
        parent.vnode.el = parent.subTree.el = newNode;
      }
      parent = parent.parent;
    }
  };
  const isTemplateNode2 = (node) => {
    return node.nodeType === 1 && node.tagName.toLowerCase() === "template";
  };
  return [hydrate2, hydrateNode];
}
function propHasMismatch(el, key, clientValue, vnode, instance) {
  var _a;
  let mismatchType;
  let mismatchKey;
  let actual;
  let expected;
  if (key === "class") {
    actual = el.getAttribute("class");
    expected = normalizeClass(clientValue);
    if (!isSetEqual(toClassSet(actual || ""), toClassSet(expected))) {
      mismatchType = mismatchKey = `class`;
    }
  } else if (key === "style") {
    actual = el.getAttribute("style") || "";
    expected = isString(clientValue) ? clientValue : stringifyStyle(normalizeStyle(clientValue));
    const actualMap = toStyleMap(actual);
    const expectedMap = toStyleMap(expected);
    if (vnode.dirs) {
      for (const { dir, value } of vnode.dirs) {
        if (dir.name === "show" && !value) {
          expectedMap.set("display", "none");
        }
      }
    }
    const root = instance == null ? void 0 : instance.subTree;
    if (vnode === root || // eslint-disable-next-line no-restricted-syntax
    (root == null ? void 0 : root.type) === Fragment && root.children.includes(vnode)) {
      const cssVars = (_a = instance == null ? void 0 : instance.getCssVars) == null ? void 0 : _a.call(instance);
      for (const key2 in cssVars) {
        expectedMap.set(`--${key2}`, String(cssVars[key2]));
      }
    }
    if (!isMapEqual(actualMap, expectedMap)) {
      mismatchType = mismatchKey = "style";
    }
  } else if (el instanceof SVGElement && isKnownSvgAttr(key) || el instanceof HTMLElement && (isBooleanAttr(key) || isKnownHtmlAttr(key))) {
    if (isBooleanAttr(key)) {
      actual = el.hasAttribute(key);
      expected = includeBooleanAttr(clientValue);
    } else if (clientValue == null) {
      actual = el.hasAttribute(key);
      expected = false;
    } else {
      if (el.hasAttribute(key)) {
        actual = el.getAttribute(key);
      } else if (key === "value" && el.tagName === "TEXTAREA") {
        actual = el.value;
      } else {
        actual = false;
      }
      expected = isRenderableAttrValue(clientValue) ? String(clientValue) : false;
    }
    if (actual !== expected) {
      mismatchType = `attribute`;
      mismatchKey = key;
    }
  }
  if (mismatchType) {
    const format = (v) => v === false ? `(not rendered)` : `${mismatchKey}="${v}"`;
    const preSegment = `Hydration ${mismatchType} mismatch on`;
    const postSegment = `
  - rendered on server: ${format(actual)}
  - expected on client: ${format(expected)}
  Note: this mismatch is check-only. The DOM will not be rectified in production due to performance overhead.
  You should fix the source of the mismatch.`;
    {
      warn$1(preSegment, el, postSegment);
    }
    return true;
  }
  return false;
}
function toClassSet(str) {
  return new Set(str.trim().split(/\s+/));
}
function isSetEqual(a, b) {
  if (a.size !== b.size) {
    return false;
  }
  for (const s of a) {
    if (!b.has(s)) {
      return false;
    }
  }
  return true;
}
function toStyleMap(str) {
  const styleMap = /* @__PURE__ */ new Map();
  for (const item of str.split(";")) {
    let [key, value] = item.split(":");
    key = key == null ? void 0 : key.trim();
    value = value == null ? void 0 : value.trim();
    if (key && value) {
      styleMap.set(key, value);
    }
  }
  return styleMap;
}
function isMapEqual(a, b) {
  if (a.size !== b.size) {
    return false;
  }
  for (const [key, value] of a) {
    if (value !== b.get(key)) {
      return false;
    }
  }
  return true;
}
let supported$1;
let perf$1;
function startMeasure(instance, type) {
  if (instance.appContext.config.performance && isSupported()) {
    perf$1.mark(`vue-${type}-${instance.uid}`);
  }
  {
    devtoolsPerfStart(instance, type, isSupported() ? perf$1.now() : Date.now());
  }
}
function endMeasure(instance, type) {
  if (instance.appContext.config.performance && isSupported()) {
    const startTag = `vue-${type}-${instance.uid}`;
    const endTag = startTag + `:end`;
    perf$1.mark(endTag);
    perf$1.measure(
      `<${formatComponentName(instance, instance.type)}> ${type}`,
      startTag,
      endTag
    );
    perf$1.clearMarks(startTag);
    perf$1.clearMarks(endTag);
  }
  {
    devtoolsPerfEnd(instance, type, isSupported() ? perf$1.now() : Date.now());
  }
}
function isSupported() {
  if (supported$1 !== void 0) {
    return supported$1;
  }
  if (typeof window !== "undefined" && window.performance) {
    supported$1 = true;
    perf$1 = window.performance;
  } else {
    supported$1 = false;
  }
  return supported$1;
}
function initFeatureFlags() {
  const needWarn = [];
  if (needWarn.length) {
    const multi = needWarn.length > 1;
    console.warn(
      `Feature flag${multi ? `s` : ``} ${needWarn.join(", ")} ${multi ? `are` : `is`} not explicitly defined. You are running the esm-bundler build of Vue, which expects these compile-time feature flags to be globally injected via the bundler config in order to get better tree-shaking in the production bundle.

For more details, see https://link.vuejs.org/feature-flags.`
    );
  }
}
const queuePostRenderEffect = queueEffectWithSuspense;
function createRenderer(options) {
  return baseCreateRenderer(options);
}
function createHydrationRenderer(options) {
  return baseCreateRenderer(options, createHydrationFunctions);
}
function baseCreateRenderer(options, createHydrationFns) {
  {
    initFeatureFlags();
  }
  const target = getGlobalThis();
  target.__VUE__ = true;
  {
    setDevtoolsHook$1(target.__VUE_DEVTOOLS_GLOBAL_HOOK__, target);
  }
  const {
    insert: hostInsert,
    remove: hostRemove,
    patchProp: hostPatchProp,
    createElement: hostCreateElement,
    createText: hostCreateText,
    createComment: hostCreateComment,
    setText: hostSetText,
    setElementText: hostSetElementText,
    parentNode: hostParentNode,
    nextSibling: hostNextSibling,
    setScopeId: hostSetScopeId = NOOP,
    insertStaticContent: hostInsertStaticContent
  } = options;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, namespace = void 0, slotScopeIds = null, optimized = isHmrUpdating ? false : !!n2.dynamicChildren) => {
    if (n1 === n2) {
      return;
    }
    if (n1 && !isSameVNodeType(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const { type, ref: ref3, shapeFlag } = n2;
    switch (type) {
      case Text:
        processText(n1, n2, container, anchor);
        break;
      case Comment:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, namespace);
        } else {
          patchStaticNode(n1, n2, container, namespace);
        }
        break;
      case Fragment:
        processFragment(
          n1,
          n2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
        break;
      default:
        if (shapeFlag & 1) {
          processElement(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else if (shapeFlag & 6) {
          processComponent(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else if (shapeFlag & 64) {
          type.process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized,
            internals
          );
        } else if (shapeFlag & 128) {
          type.process(
            n1,
            n2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized,
            internals
          );
        } else {
          warn$1("Invalid VNode type:", type, `(${typeof type})`);
        }
    }
    if (ref3 != null && parentComponent) {
      setRef(ref3, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(
        n2.el = hostCreateText(n2.children),
        container,
        anchor
      );
    } else {
      const el = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(
        n2.el = hostCreateComment(n2.children || ""),
        container,
        anchor
      );
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, namespace) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(
      n2.children,
      container,
      anchor,
      namespace,
      n2.el,
      n2.anchor
    );
  };
  const patchStaticNode = (n1, n2, container, namespace) => {
    if (n2.children !== n1.children) {
      const anchor = hostNextSibling(n1.anchor);
      removeStaticNode(n1);
      [n2.el, n2.anchor] = hostInsertStaticContent(
        n2.children,
        container,
        anchor,
        namespace
      );
    } else {
      n2.el = n1.el;
      n2.anchor = n1.anchor;
    }
  };
  const moveStaticNode = ({ el, anchor }, container, nextSibling) => {
    let next;
    while (el && el !== anchor) {
      next = hostNextSibling(el);
      hostInsert(el, container, nextSibling);
      el = next;
    }
    hostInsert(anchor, container, nextSibling);
  };
  const removeStaticNode = ({ el, anchor }) => {
    let next;
    while (el && el !== anchor) {
      next = hostNextSibling(el);
      hostRemove(el);
      el = next;
    }
    hostRemove(anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    if (n2.type === "svg") {
      namespace = "svg";
    } else if (n2.type === "math") {
      namespace = "mathml";
    }
    if (n1 == null) {
      mountElement(
        n2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    } else {
      patchElement(
        n1,
        n2,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    let el;
    let vnodeHook;
    const { props, shapeFlag, transition, dirs } = vnode;
    el = vnode.el = hostCreateElement(
      vnode.type,
      namespace,
      props && props.is,
      props
    );
    if (shapeFlag & 8) {
      hostSetElementText(el, vnode.children);
    } else if (shapeFlag & 16) {
      mountChildren(
        vnode.children,
        el,
        null,
        parentComponent,
        parentSuspense,
        resolveChildrenNamespace(vnode, namespace),
        slotScopeIds,
        optimized
      );
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "created");
    }
    setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
    if (props) {
      for (const key in props) {
        if (key !== "value" && !isReservedProp(key)) {
          hostPatchProp(
            el,
            key,
            null,
            props[key],
            namespace,
            vnode.children,
            parentComponent,
            parentSuspense,
            unmountChildren
          );
        }
      }
      if ("value" in props) {
        hostPatchProp(el, "value", null, props.value, namespace);
      }
      if (vnodeHook = props.onVnodeBeforeMount) {
        invokeVNodeHook(vnodeHook, parentComponent, vnode);
      }
    }
    {
      Object.defineProperty(el, "__vnode", {
        value: vnode,
        enumerable: false
      });
      Object.defineProperty(el, "__vueParentComponent", {
        value: parentComponent,
        enumerable: false
      });
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
    }
    const needCallTransitionHooks = needTransition(parentSuspense, transition);
    if (needCallTransitionHooks) {
      transition.beforeEnter(el);
    }
    hostInsert(el, container, anchor);
    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el);
        dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
      }, parentSuspense);
    }
  };
  const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el, scopeId);
    }
    if (slotScopeIds) {
      for (let i = 0; i < slotScopeIds.length; i++) {
        hostSetScopeId(el, slotScopeIds[i]);
      }
    }
    if (parentComponent) {
      let subTree = parentComponent.subTree;
      if (subTree.patchFlag > 0 && subTree.patchFlag & 2048) {
        subTree = filterSingleRoot(subTree.children) || subTree;
      }
      if (vnode === subTree) {
        const parentVNode = parentComponent.vnode;
        setScopeId(
          el,
          parentVNode,
          parentVNode.scopeId,
          parentVNode.slotScopeIds,
          parentComponent.parent
        );
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, start = 0) => {
    for (let i = start; i < children.length; i++) {
      const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
      patch(
        null,
        child,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    const el = n2.el = n1.el;
    let { patchFlag, dynamicChildren, dirs } = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ;
    const newProps = n2.props || EMPTY_OBJ;
    let vnodeHook;
    parentComponent && toggleRecurse(parentComponent, false);
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
    }
    parentComponent && toggleRecurse(parentComponent, true);
    if (isHmrUpdating) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    if (dynamicChildren) {
      patchBlockChildren(
        n1.dynamicChildren,
        dynamicChildren,
        el,
        parentComponent,
        parentSuspense,
        resolveChildrenNamespace(n2, namespace),
        slotScopeIds
      );
      {
        traverseStaticChildren(n1, n2);
      }
    } else if (!optimized) {
      patchChildren(
        n1,
        n2,
        el,
        null,
        parentComponent,
        parentSuspense,
        resolveChildrenNamespace(n2, namespace),
        slotScopeIds,
        false
      );
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(
          el,
          n2,
          oldProps,
          newProps,
          parentComponent,
          parentSuspense,
          namespace
        );
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el, "class", null, newProps.class, namespace);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el, "style", oldProps.style, newProps.style, namespace);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i = 0; i < propsToUpdate.length; i++) {
            const key = propsToUpdate[i];
            const prev = oldProps[key];
            const next = newProps[key];
            if (next !== prev || key === "value") {
              hostPatchProp(
                el,
                key,
                prev,
                next,
                namespace,
                n1.children,
                parentComponent,
                parentSuspense,
                unmountChildren
              );
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(
        el,
        n2,
        oldProps,
        newProps,
        parentComponent,
        parentSuspense,
        namespace
      );
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, namespace, slotScopeIds) => {
    for (let i = 0; i < newChildren.length; i++) {
      const oldVNode = oldChildren[i];
      const newVNode = newChildren[i];
      const container = (
        // oldVNode may be an errored async setup() component inside Suspense
        // which will not have a mounted element
        oldVNode.el && // - In the case of a Fragment, we need to provide the actual parent
        // of the Fragment itself so it can move its children.
        (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
        // which also requires the correct parent container
        !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
        oldVNode.shapeFlag & (6 | 64)) ? hostParentNode(oldVNode.el) : (
          // In other cases, the parent container is not actually used so we
          // just pass the block element here to avoid a DOM parentNode call.
          fallbackContainer
        )
      );
      patch(
        oldVNode,
        newVNode,
        container,
        null,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        true
      );
    }
  };
  const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, namespace) => {
    if (oldProps !== newProps) {
      if (oldProps !== EMPTY_OBJ) {
        for (const key in oldProps) {
          if (!isReservedProp(key) && !(key in newProps)) {
            hostPatchProp(
              el,
              key,
              oldProps[key],
              null,
              namespace,
              vnode.children,
              parentComponent,
              parentSuspense,
              unmountChildren
            );
          }
        }
      }
      for (const key in newProps) {
        if (isReservedProp(key)) continue;
        const next = newProps[key];
        const prev = oldProps[key];
        if (next !== prev && key !== "value") {
          hostPatchProp(
            el,
            key,
            prev,
            next,
            namespace,
            vnode.children,
            parentComponent,
            parentSuspense,
            unmountChildren
          );
        }
      }
      if ("value" in newProps) {
        hostPatchProp(el, "value", oldProps.value, newProps.value, namespace);
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
    if (
      // #5523 dev root fragment may inherit directives
      isHmrUpdating || patchFlag & 2048
    ) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(
        // #10007
        // such fragment like `<></>` will be compiled into
        // a fragment which doesn't have a children.
        // In this case fallback to an empty array
        n2.children || [],
        container,
        fragmentEndAnchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
      // of renderSlot() with no valid children
      n1.dynamicChildren) {
        patchBlockChildren(
          n1.dynamicChildren,
          dynamicChildren,
          container,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds
        );
        {
          traverseStaticChildren(n1, n2);
        }
      } else {
        patchChildren(
          n1,
          n2,
          container,
          fragmentEndAnchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    n2.slotScopeIds = slotScopeIds;
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(
          n2,
          container,
          anchor,
          namespace,
          optimized
        );
      } else {
        mountComponent(
          n2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          optimized
        );
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, namespace, optimized) => {
    const instance = initialVNode.component = createComponentInstance(
      initialVNode,
      parentComponent,
      parentSuspense
    );
    if (instance.type.__hmrId) {
      registerHMR(instance);
    }
    {
      pushWarningContext(initialVNode);
      startMeasure(instance, `mount`);
    }
    if (isKeepAlive(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    {
      {
        startMeasure(instance, `init`);
      }
      setupComponent(instance);
      {
        endMeasure(instance, `init`);
      }
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect, optimized);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode(Comment);
        processCommentNode(null, placeholder, container, anchor);
      }
    } else {
      setupRenderEffect(
        instance,
        initialVNode,
        container,
        anchor,
        parentSuspense,
        namespace,
        optimized
      );
    }
    {
      popWarningContext();
      endMeasure(instance, `mount`);
    }
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        {
          pushWarningContext(n2);
        }
        updateComponentPreRender(instance, n2, optimized);
        {
          popWarningContext();
        }
        return;
      } else {
        instance.next = n2;
        invalidateJob(instance.update);
        instance.effect.dirty = true;
        instance.update();
      }
    } else {
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, namespace, optimized) => {
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        let vnodeHook;
        const { el, props } = initialVNode;
        const { bm, m: m2, parent } = instance;
        const isAsyncWrapperVNode = isAsyncWrapper(initialVNode);
        toggleRecurse(instance, false);
        if (bm) {
          invokeArrayFns(bm);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeBeforeMount)) {
          invokeVNodeHook(vnodeHook, parent, initialVNode);
        }
        toggleRecurse(instance, true);
        if (el && hydrateNode) {
          const hydrateSubTree = () => {
            {
              startMeasure(instance, `render`);
            }
            instance.subTree = renderComponentRoot(instance);
            {
              endMeasure(instance, `render`);
            }
            {
              startMeasure(instance, `hydrate`);
            }
            hydrateNode(
              el,
              instance.subTree,
              instance,
              parentSuspense,
              null
            );
            {
              endMeasure(instance, `hydrate`);
            }
          };
          if (isAsyncWrapperVNode) {
            initialVNode.type.__asyncLoader().then(
              // note: we are moving the render call into an async callback,
              // which means it won't track dependencies - but it's ok because
              // a server-rendered async wrapper is already in resolved state
              // and it will never need to change.
              () => !instance.isUnmounted && hydrateSubTree()
            );
          } else {
            hydrateSubTree();
          }
        } else {
          {
            startMeasure(instance, `render`);
          }
          const subTree = instance.subTree = renderComponentRoot(instance);
          {
            endMeasure(instance, `render`);
          }
          {
            startMeasure(instance, `patch`);
          }
          patch(
            null,
            subTree,
            container,
            anchor,
            instance,
            parentSuspense,
            namespace
          );
          {
            endMeasure(instance, `patch`);
          }
          initialVNode.el = subTree.el;
        }
        if (m2) {
          queuePostRenderEffect(m2, parentSuspense);
        }
        if (!isAsyncWrapperVNode && (vnodeHook = props && props.onVnodeMounted)) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect(
            () => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode),
            parentSuspense
          );
        }
        if (initialVNode.shapeFlag & 256 || parent && isAsyncWrapper(parent.vnode) && parent.vnode.shapeFlag & 256) {
          instance.a && queuePostRenderEffect(instance.a, parentSuspense);
        }
        instance.isMounted = true;
        {
          devtoolsComponentAdded(instance);
        }
        initialVNode = container = anchor = null;
      } else {
        let { next, bu, u, parent, vnode } = instance;
        {
          const nonHydratedAsyncRoot = locateNonHydratedAsyncRoot(instance);
          if (nonHydratedAsyncRoot) {
            if (next) {
              next.el = vnode.el;
              updateComponentPreRender(instance, next, optimized);
            }
            nonHydratedAsyncRoot.asyncDep.then(() => {
              if (!instance.isUnmounted) {
                componentUpdateFn();
              }
            });
            return;
          }
        }
        let originNext = next;
        let vnodeHook;
        {
          pushWarningContext(next || instance.vnode);
        }
        toggleRecurse(instance, false);
        if (next) {
          next.el = vnode.el;
          updateComponentPreRender(instance, next, optimized);
        } else {
          next = vnode;
        }
        if (bu) {
          invokeArrayFns(bu);
        }
        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parent, next, vnode);
        }
        toggleRecurse(instance, true);
        {
          startMeasure(instance, `render`);
        }
        const nextTree = renderComponentRoot(instance);
        {
          endMeasure(instance, `render`);
        }
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        {
          startMeasure(instance, `patch`);
        }
        patch(
          prevTree,
          nextTree,
          // parent may have changed if it's in a teleport
          hostParentNode(prevTree.el),
          // anchor may have changed if it's in a fragment
          getNextHostNode(prevTree),
          instance,
          parentSuspense,
          namespace
        );
        {
          endMeasure(instance, `patch`);
        }
        next.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl(instance, nextTree.el);
        }
        if (u) {
          queuePostRenderEffect(u, parentSuspense);
        }
        if (vnodeHook = next.props && next.props.onVnodeUpdated) {
          queuePostRenderEffect(
            () => invokeVNodeHook(vnodeHook, parent, next, vnode),
            parentSuspense
          );
        }
        {
          devtoolsComponentUpdated(instance);
        }
        {
          popWarningContext();
        }
      }
    };
    const effect2 = instance.effect = new ReactiveEffect(
      componentUpdateFn,
      NOOP,
      () => queueJob(update),
      instance.scope
      // track it in component's effect scope
    );
    const update = instance.update = () => {
      if (effect2.dirty) {
        effect2.run();
      }
    };
    update.id = instance.uid;
    toggleRecurse(instance, true);
    {
      effect2.onTrack = instance.rtc ? (e) => invokeArrayFns(instance.rtc, e) : void 0;
      effect2.onTrigger = instance.rtg ? (e) => invokeArrayFns(instance.rtg, e) : void 0;
      update.ownerInstance = instance;
    }
    update();
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps(instance, nextVNode.props, prevProps, optimized);
    updateSlots(instance, nextVNode.children, optimized);
    pauseTracking();
    flushPreFlushCbs(instance);
    resetTracking();
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c2 = n2.children;
    const { patchFlag, shapeFlag } = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(
          c1,
          c2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(
          c1,
          c2,
          container,
          anchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c2 !== c1) {
        hostSetElementText(container, c2);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(
            c1,
            c2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, "");
        }
        if (shapeFlag & 16) {
          mountChildren(
            c2,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    c1 = c1 || EMPTY_ARR;
    c2 = c2 || EMPTY_ARR;
    const oldLength = c1.length;
    const newLength = c2.length;
    const commonLength = Math.min(oldLength, newLength);
    let i;
    for (i = 0; i < commonLength; i++) {
      const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
      patch(
        c1[i],
        nextChild,
        container,
        null,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized
      );
    }
    if (oldLength > newLength) {
      unmountChildren(
        c1,
        parentComponent,
        parentSuspense,
        true,
        false,
        commonLength
      );
    } else {
      mountChildren(
        c2,
        container,
        anchor,
        parentComponent,
        parentSuspense,
        namespace,
        slotScopeIds,
        optimized,
        commonLength
      );
    }
  };
  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized) => {
    let i = 0;
    const l2 = c2.length;
    let e1 = c1.length - 1;
    let e2 = l2 - 1;
    while (i <= e1 && i <= e2) {
      const n1 = c1[i];
      const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
      if (isSameVNodeType(n1, n2)) {
        patch(
          n1,
          n2,
          container,
          null,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      } else {
        break;
      }
      i++;
    }
    while (i <= e1 && i <= e2) {
      const n1 = c1[e1];
      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
      if (isSameVNodeType(n1, n2)) {
        patch(
          n1,
          n2,
          container,
          null,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          optimized
        );
      } else {
        break;
      }
      e1--;
      e2--;
    }
    if (i > e1) {
      if (i <= e2) {
        const nextPos = e2 + 1;
        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
        while (i <= e2) {
          patch(
            null,
            c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]),
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
          i++;
        }
      }
    } else if (i > e2) {
      while (i <= e1) {
        unmount(c1[i], parentComponent, parentSuspense, true);
        i++;
      }
    } else {
      const s1 = i;
      const s2 = i;
      const keyToNewIndexMap = /* @__PURE__ */ new Map();
      for (i = s2; i <= e2; i++) {
        const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
        if (nextChild.key != null) {
          if (keyToNewIndexMap.has(nextChild.key)) {
            warn$1(
              `Duplicate keys found during update:`,
              JSON.stringify(nextChild.key),
              `Make sure keys are unique.`
            );
          }
          keyToNewIndexMap.set(nextChild.key, i);
        }
      }
      let j;
      let patched = 0;
      const toBePatched = e2 - s2 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i = 0; i < toBePatched; i++) newIndexToOldIndexMap[i] = 0;
      for (i = s1; i <= e1; i++) {
        const prevChild = c1[i];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j = s2; j <= e2; j++) {
            if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
              newIndex = j;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s2] = i + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(
            prevChild,
            c2[newIndex],
            container,
            null,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
      j = increasingNewIndexSequence.length - 1;
      for (i = toBePatched - 1; i >= 0; i--) {
        const nextIndex = s2 + i;
        const nextChild = c2[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i] === 0) {
          patch(
            null,
            nextChild,
            container,
            anchor,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        } else if (moved) {
          if (j < 0 || i !== increasingNewIndexSequence[j]) {
            move(nextChild, container, anchor, 2);
          } else {
            j--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const { el, type, transition, children, shapeFlag } = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type.move(vnode, container, anchor, internals);
      return;
    }
    if (type === Fragment) {
      hostInsert(el, container, anchor);
      for (let i = 0; i < children.length; i++) {
        move(children[i], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (type === Static) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition2 = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition2) {
      if (moveType === 0) {
        transition.beforeEnter(el);
        hostInsert(el, container, anchor);
        queuePostRenderEffect(() => transition.enter(el), parentSuspense);
      } else {
        const { leave, delayLeave, afterLeave } = transition;
        const remove22 = () => hostInsert(el, container, anchor);
        const performLeave = () => {
          leave(el, () => {
            remove22();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el, remove22, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const {
      type,
      props,
      ref: ref3,
      children,
      dynamicChildren,
      shapeFlag,
      patchFlag,
      dirs,
      memoIndex
    } = vnode;
    if (ref3 != null) {
      setRef(ref3, null, parentSuspense, vnode, true);
    }
    if (memoIndex != null) {
      parentComponent.renderCache[memoIndex] = void 0;
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    const shouldInvokeVnodeHook = !isAsyncWrapper(vnode);
    let vnodeHook;
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeBeforeUnmount)) {
      invokeVNodeHook(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
      }
      if (shapeFlag & 64) {
        vnode.type.remove(
          vnode,
          parentComponent,
          parentSuspense,
          optimized,
          internals,
          doRemove
        );
      } else if (dynamicChildren && // #1153: fast path should not be taken for non-stable (v-for) fragments
      (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(
          dynamicChildren,
          parentComponent,
          parentSuspense,
          false,
          true
        );
      } else if (type === Fragment && patchFlag & (128 | 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (doRemove) {
        remove2(vnode);
      }
    }
    if (shouldInvokeVnodeHook && (vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
      }, parentSuspense);
    }
  };
  const remove2 = (vnode) => {
    const { type, el, anchor, transition } = vnode;
    if (type === Fragment) {
      if (vnode.patchFlag > 0 && vnode.patchFlag & 2048 && transition && !transition.persisted) {
        vnode.children.forEach((child) => {
          if (child.type === Comment) {
            hostRemove(child.el);
          } else {
            remove2(child);
          }
        });
      } else {
        removeFragment(el, anchor);
      }
      return;
    }
    if (type === Static) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const { leave, delayLeave } = transition;
      const performLeave = () => leave(el, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end) => {
    let next;
    while (cur !== end) {
      next = hostNextSibling(cur);
      hostRemove(cur);
      cur = next;
    }
    hostRemove(end);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    if (instance.type.__hmrId) {
      unregisterHMR(instance);
    }
    const { bum, scope, update, subTree, um, m: m2, a } = instance;
    invalidateMount(m2);
    invalidateMount(a);
    if (bum) {
      invokeArrayFns(bum);
    }
    scope.stop();
    if (update) {
      update.active = false;
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um) {
      queuePostRenderEffect(um, parentSuspense);
    }
    queuePostRenderEffect(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
    {
      devtoolsComponentRemoved(instance);
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
    for (let i = start; i < children.length; i++) {
      unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    return hostNextSibling(vnode.anchor || vnode.el);
  };
  let isFlushing2 = false;
  const render2 = (vnode, container, namespace) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(
        container._vnode || null,
        vnode,
        container,
        null,
        null,
        null,
        namespace
      );
    }
    if (!isFlushing2) {
      isFlushing2 = true;
      flushPreFlushCbs();
      flushPostFlushCbs();
      isFlushing2 = false;
    }
    container._vnode = vnode;
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove2,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate2;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate2, hydrateNode] = createHydrationFns(
      internals
    );
  }
  return {
    render: render2,
    hydrate: hydrate2,
    createApp: createAppAPI(render2, hydrate2)
  };
}
function resolveChildrenNamespace({ type, props }, currentNamespace) {
  return currentNamespace === "svg" && type === "foreignObject" || currentNamespace === "mathml" && type === "annotation-xml" && props && props.encoding && props.encoding.includes("html") ? void 0 : currentNamespace;
}
function toggleRecurse({ effect: effect2, update }, allowed) {
  effect2.allowRecurse = update.allowRecurse = allowed;
}
function needTransition(parentSuspense, transition) {
  return (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
}
function traverseStaticChildren(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if (isArray(ch1) && isArray(ch2)) {
    for (let i = 0; i < ch1.length; i++) {
      const c1 = ch1[i];
      let c2 = ch2[i];
      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
          c2 = ch2[i] = cloneIfMounted(ch2[i]);
          c2.el = c1.el;
        }
        if (!shallow && c2.patchFlag !== -2)
          traverseStaticChildren(c1, c2);
      }
      if (c2.type === Text) {
        c2.el = c1.el;
      }
      if (c2.type === Comment && !c2.el) {
        c2.el = c1.el;
      }
    }
  }
}
function getSequence(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i, j, u, v, c;
  const len = arr.length;
  for (i = 0; i < len; i++) {
    const arrI = arr[i];
    if (arrI !== 0) {
      j = result[result.length - 1];
      if (arr[j] < arrI) {
        p2[i] = j;
        result.push(i);
        continue;
      }
      u = 0;
      v = result.length - 1;
      while (u < v) {
        c = u + v >> 1;
        if (arr[result[c]] < arrI) {
          u = c + 1;
        } else {
          v = c;
        }
      }
      if (arrI < arr[result[u]]) {
        if (u > 0) {
          p2[i] = result[u - 1];
        }
        result[u] = i;
      }
    }
  }
  u = result.length;
  v = result[u - 1];
  while (u-- > 0) {
    result[u] = v;
    v = p2[v];
  }
  return result;
}
function locateNonHydratedAsyncRoot(instance) {
  const subComponent = instance.subTree.component;
  if (subComponent) {
    if (subComponent.asyncDep && !subComponent.asyncResolved) {
      return subComponent;
    } else {
      return locateNonHydratedAsyncRoot(subComponent);
    }
  }
}
function invalidateMount(hooks) {
  if (hooks) {
    for (let i = 0; i < hooks.length; i++) hooks[i].active = false;
  }
}
const ssrContextKey = Symbol.for("v-scx");
const useSSRContext = () => {
  {
    const ctx = inject(ssrContextKey);
    if (!ctx) {
      warn$1(
        `Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build.`
      );
    }
    return ctx;
  }
};
function watchEffect(effect2, options) {
  return doWatch(effect2, null, options);
}
function watchPostEffect(effect2, options) {
  return doWatch(
    effect2,
    null,
    extend({}, options, { flush: "post" })
  );
}
function watchSyncEffect(effect2, options) {
  return doWatch(
    effect2,
    null,
    extend({}, options, { flush: "sync" })
  );
}
const INITIAL_WATCHER_VALUE = {};
function watch(source, cb, options) {
  if (!isFunction(cb)) {
    warn$1(
      `\`watch(fn, options?)\` signature has been moved to a separate API. Use \`watchEffect(fn, options?)\` instead. \`watch\` now only supports \`watch(source, cb, options?) signature.`
    );
  }
  return doWatch(source, cb, options);
}
function doWatch(source, cb, {
  immediate,
  deep,
  flush,
  once,
  onTrack,
  onTrigger
} = EMPTY_OBJ) {
  if (cb && once) {
    const _cb = cb;
    cb = (...args) => {
      _cb(...args);
      unwatch();
    };
  }
  if (deep !== void 0 && typeof deep === "number") {
    warn$1(
      `watch() "deep" option with number value will be used as watch depth in future versions. Please use a boolean instead to avoid potential breakage.`
    );
  }
  if (!cb) {
    if (immediate !== void 0) {
      warn$1(
        `watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.`
      );
    }
    if (deep !== void 0) {
      warn$1(
        `watch() "deep" option is only respected when using the watch(source, callback, options?) signature.`
      );
    }
    if (once !== void 0) {
      warn$1(
        `watch() "once" option is only respected when using the watch(source, callback, options?) signature.`
      );
    }
  }
  const warnInvalidSource = (s) => {
    warn$1(
      `Invalid watch source: `,
      s,
      `A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`
    );
  };
  const instance = currentInstance;
  const reactiveGetter = (source2) => deep === true ? source2 : (
    // for deep: false, only traverse root-level properties
    traverse(source2, deep === false ? 1 : void 0)
  );
  let getter;
  let forceTrigger = false;
  let isMultiSource = false;
  if (isRef(source)) {
    getter = () => source.value;
    forceTrigger = isShallow(source);
  } else if (isReactive(source)) {
    getter = () => reactiveGetter(source);
    forceTrigger = true;
  } else if (isArray(source)) {
    isMultiSource = true;
    forceTrigger = source.some((s) => isReactive(s) || isShallow(s));
    getter = () => source.map((s) => {
      if (isRef(s)) {
        return s.value;
      } else if (isReactive(s)) {
        return reactiveGetter(s);
      } else if (isFunction(s)) {
        return callWithErrorHandling(s, instance, 2);
      } else {
        warnInvalidSource(s);
      }
    });
  } else if (isFunction(source)) {
    if (cb) {
      getter = () => callWithErrorHandling(source, instance, 2);
    } else {
      getter = () => {
        if (cleanup) {
          cleanup();
        }
        return callWithAsyncErrorHandling(
          source,
          instance,
          3,
          [onCleanup]
        );
      };
    }
  } else {
    getter = NOOP;
    warnInvalidSource(source);
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse(baseGetter());
  }
  let cleanup;
  let onCleanup = (fn) => {
    cleanup = effect2.onStop = () => {
      callWithErrorHandling(fn, instance, 4);
      cleanup = effect2.onStop = void 0;
    };
  };
  let ssrCleanup;
  if (isInSSRComponentSetup) {
    onCleanup = NOOP;
    if (!cb) {
      getter();
    } else if (immediate) {
      callWithAsyncErrorHandling(cb, instance, 3, [
        getter(),
        isMultiSource ? [] : void 0,
        onCleanup
      ]);
    }
    if (flush === "sync") {
      const ctx = useSSRContext();
      ssrCleanup = ctx.__watcherHandles || (ctx.__watcherHandles = []);
    } else {
      return NOOP;
    }
  }
  let oldValue = isMultiSource ? new Array(source.length).fill(INITIAL_WATCHER_VALUE) : INITIAL_WATCHER_VALUE;
  const job = () => {
    if (!effect2.active || !effect2.dirty) {
      return;
    }
    if (cb) {
      const newValue = effect2.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i) => hasChanged(v, oldValue[i])) : hasChanged(newValue, oldValue)) || false) {
        if (cleanup) {
          cleanup();
        }
        callWithAsyncErrorHandling(cb, instance, 3, [
          newValue,
          // pass undefined as the old value when it's changed for the first time
          oldValue === INITIAL_WATCHER_VALUE ? void 0 : isMultiSource && oldValue[0] === INITIAL_WATCHER_VALUE ? [] : oldValue,
          onCleanup
        ]);
        oldValue = newValue;
      }
    } else {
      effect2.run();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler;
  if (flush === "sync") {
    scheduler = job;
  } else if (flush === "post") {
    scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
  } else {
    job.pre = true;
    if (instance) job.id = instance.uid;
    scheduler = () => queueJob(job);
  }
  const effect2 = new ReactiveEffect(getter, NOOP, scheduler);
  const scope = getCurrentScope();
  const unwatch = () => {
    effect2.stop();
    if (scope) {
      remove(scope.effects, effect2);
    }
  };
  {
    effect2.onTrack = onTrack;
    effect2.onTrigger = onTrigger;
  }
  if (cb) {
    if (immediate) {
      job();
    } else {
      oldValue = effect2.run();
    }
  } else if (flush === "post") {
    queuePostRenderEffect(
      effect2.run.bind(effect2),
      instance && instance.suspense
    );
  } else {
    effect2.run();
  }
  if (ssrCleanup) ssrCleanup.push(unwatch);
  return unwatch;
}
function instanceWatch(source, value, options) {
  const publicThis = this.proxy;
  const getter = isString(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
  let cb;
  if (isFunction(value)) {
    cb = value;
  } else {
    cb = value.handler;
    options = value;
  }
  const reset2 = setCurrentInstance(this);
  const res = doWatch(getter, cb.bind(publicThis), options);
  reset2();
  return res;
}
function createPathGetter(ctx, path) {
  const segments = path.split(".");
  return () => {
    let cur = ctx;
    for (let i = 0; i < segments.length && cur; i++) {
      cur = cur[segments[i]];
    }
    return cur;
  };
}
function traverse(value, depth = Infinity, seen2) {
  if (depth <= 0 || !isObject(value) || value["__v_skip"]) {
    return value;
  }
  seen2 = seen2 || /* @__PURE__ */ new Set();
  if (seen2.has(value)) {
    return value;
  }
  seen2.add(value);
  depth--;
  if (isRef(value)) {
    traverse(value.value, depth, seen2);
  } else if (isArray(value)) {
    for (let i = 0; i < value.length; i++) {
      traverse(value[i], depth, seen2);
    }
  } else if (isSet(value) || isMap(value)) {
    value.forEach((v) => {
      traverse(v, depth, seen2);
    });
  } else if (isPlainObject$1(value)) {
    for (const key in value) {
      traverse(value[key], depth, seen2);
    }
    for (const key of Object.getOwnPropertySymbols(value)) {
      if (Object.prototype.propertyIsEnumerable.call(value, key)) {
        traverse(value[key], depth, seen2);
      }
    }
  }
  return value;
}
const isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
const KeepAliveImpl = {
  name: `KeepAlive`,
  // Marker for special handling inside the renderer. We are not using a ===
  // check directly on KeepAlive in the renderer, because importing it directly
  // would prevent it from being tree-shaken.
  __isKeepAlive: true,
  props: {
    include: [String, RegExp, Array],
    exclude: [String, RegExp, Array],
    max: [String, Number]
  },
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const sharedContext = instance.ctx;
    if (!sharedContext.renderer) {
      return () => {
        const children = slots.default && slots.default();
        return children && children.length === 1 ? children[0] : children;
      };
    }
    const cache = /* @__PURE__ */ new Map();
    const keys = /* @__PURE__ */ new Set();
    let current = null;
    {
      instance.__v_cache = cache;
    }
    const parentSuspense = instance.suspense;
    const {
      renderer: {
        p: patch,
        m: move,
        um: _unmount,
        o: { createElement }
      }
    } = sharedContext;
    const storageContainer = createElement("div");
    sharedContext.activate = (vnode, container, anchor, namespace, optimized) => {
      const instance2 = vnode.component;
      move(vnode, container, anchor, 0, parentSuspense);
      patch(
        instance2.vnode,
        vnode,
        container,
        anchor,
        instance2,
        parentSuspense,
        namespace,
        vnode.slotScopeIds,
        optimized
      );
      queuePostRenderEffect(() => {
        instance2.isDeactivated = false;
        if (instance2.a) {
          invokeArrayFns(instance2.a);
        }
        const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
        if (vnodeHook) {
          invokeVNodeHook(vnodeHook, instance2.parent, vnode);
        }
      }, parentSuspense);
      {
        devtoolsComponentAdded(instance2);
      }
    };
    sharedContext.deactivate = (vnode) => {
      const instance2 = vnode.component;
      invalidateMount(instance2.m);
      invalidateMount(instance2.a);
      move(vnode, storageContainer, null, 1, parentSuspense);
      queuePostRenderEffect(() => {
        if (instance2.da) {
          invokeArrayFns(instance2.da);
        }
        const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
        if (vnodeHook) {
          invokeVNodeHook(vnodeHook, instance2.parent, vnode);
        }
        instance2.isDeactivated = true;
      }, parentSuspense);
      {
        devtoolsComponentAdded(instance2);
      }
    };
    function unmount(vnode) {
      resetShapeFlag(vnode);
      _unmount(vnode, instance, parentSuspense, true);
    }
    function pruneCache(filter) {
      cache.forEach((vnode, key) => {
        const name = getComponentName(vnode.type);
        if (name && (!filter || !filter(name))) {
          pruneCacheEntry(key);
        }
      });
    }
    function pruneCacheEntry(key) {
      const cached = cache.get(key);
      if (!current || !isSameVNodeType(cached, current)) {
        unmount(cached);
      } else if (current) {
        resetShapeFlag(current);
      }
      cache.delete(key);
      keys.delete(key);
    }
    watch(
      () => [props.include, props.exclude],
      ([include, exclude]) => {
        include && pruneCache((name) => matches(include, name));
        exclude && pruneCache((name) => !matches(exclude, name));
      },
      // prune post-render after `current` has been updated
      { flush: "post", deep: true }
    );
    let pendingCacheKey = null;
    const cacheSubtree = () => {
      if (pendingCacheKey != null) {
        if (isSuspense(instance.subTree.type)) {
          queuePostRenderEffect(() => {
            cache.set(pendingCacheKey, getInnerChild(instance.subTree));
          }, instance.subTree.suspense);
        } else {
          cache.set(pendingCacheKey, getInnerChild(instance.subTree));
        }
      }
    };
    onMounted(cacheSubtree);
    onUpdated(cacheSubtree);
    onBeforeUnmount(() => {
      cache.forEach((cached) => {
        const { subTree, suspense } = instance;
        const vnode = getInnerChild(subTree);
        if (cached.type === vnode.type && cached.key === vnode.key) {
          resetShapeFlag(vnode);
          const da = vnode.component.da;
          da && queuePostRenderEffect(da, suspense);
          return;
        }
        unmount(cached);
      });
    });
    return () => {
      pendingCacheKey = null;
      if (!slots.default) {
        return null;
      }
      const children = slots.default();
      const rawVNode = children[0];
      if (children.length > 1) {
        {
          warn$1(`KeepAlive should contain exactly one component child.`);
        }
        current = null;
        return children;
      } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4) && !(rawVNode.shapeFlag & 128)) {
        current = null;
        return rawVNode;
      }
      let vnode = getInnerChild(rawVNode);
      const comp = vnode.type;
      const name = getComponentName(
        isAsyncWrapper(vnode) ? vnode.type.__asyncResolved || {} : comp
      );
      const { include, exclude, max: max2 } = props;
      if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
        current = vnode;
        return rawVNode;
      }
      const key = vnode.key == null ? comp : vnode.key;
      const cachedVNode = cache.get(key);
      if (vnode.el) {
        vnode = cloneVNode(vnode);
        if (rawVNode.shapeFlag & 128) {
          rawVNode.ssContent = vnode;
        }
      }
      pendingCacheKey = key;
      if (cachedVNode) {
        vnode.el = cachedVNode.el;
        vnode.component = cachedVNode.component;
        if (vnode.transition) {
          setTransitionHooks(vnode, vnode.transition);
        }
        vnode.shapeFlag |= 512;
        keys.delete(key);
        keys.add(key);
      } else {
        keys.add(key);
        if (max2 && keys.size > parseInt(max2, 10)) {
          pruneCacheEntry(keys.values().next().value);
        }
      }
      vnode.shapeFlag |= 256;
      current = vnode;
      return isSuspense(rawVNode.type) ? rawVNode : vnode;
    };
  }
};
const KeepAlive = KeepAliveImpl;
function matches(pattern, name) {
  if (isArray(pattern)) {
    return pattern.some((p2) => matches(p2, name));
  } else if (isString(pattern)) {
    return pattern.split(",").includes(name);
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  return false;
}
function onActivated(hook, target) {
  registerKeepAliveHook(hook, "a", target);
}
function onDeactivated(hook, target) {
  registerKeepAliveHook(hook, "da", target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current = target;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    return hook();
  });
  injectHook(type, wrappedHook, target);
  if (target) {
    let current = target.parent;
    while (current && current.parent) {
      if (isKeepAlive(current.parent.vnode)) {
        injectToKeepAliveRoot(wrappedHook, type, target, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
  const injected = injectHook(
    type,
    hook,
    keepAliveRoot,
    true
    /* prepend */
  );
  onUnmounted(() => {
    remove(keepAliveRoot[type], injected);
  }, target);
}
function resetShapeFlag(vnode) {
  vnode.shapeFlag &= ~256;
  vnode.shapeFlag &= ~512;
}
function getInnerChild(vnode) {
  return vnode.shapeFlag & 128 ? vnode.ssContent : vnode;
}
const leaveCbKey = Symbol("_leaveCb");
const enterCbKey$1 = Symbol("_enterCb");
function useTransitionState() {
  const state = {
    isMounted: false,
    isLeaving: false,
    isUnmounting: false,
    leavingVNodes: /* @__PURE__ */ new Map()
  };
  onMounted(() => {
    state.isMounted = true;
  });
  onBeforeUnmount(() => {
    state.isUnmounting = true;
  });
  return state;
}
const TransitionHookValidator = [Function, Array];
const BaseTransitionPropsValidators = {
  mode: String,
  appear: Boolean,
  persisted: Boolean,
  // enter
  onBeforeEnter: TransitionHookValidator,
  onEnter: TransitionHookValidator,
  onAfterEnter: TransitionHookValidator,
  onEnterCancelled: TransitionHookValidator,
  // leave
  onBeforeLeave: TransitionHookValidator,
  onLeave: TransitionHookValidator,
  onAfterLeave: TransitionHookValidator,
  onLeaveCancelled: TransitionHookValidator,
  // appear
  onBeforeAppear: TransitionHookValidator,
  onAppear: TransitionHookValidator,
  onAfterAppear: TransitionHookValidator,
  onAppearCancelled: TransitionHookValidator
};
const recursiveGetSubtree = (instance) => {
  const subTree = instance.subTree;
  return subTree.component ? recursiveGetSubtree(subTree.component) : subTree;
};
const BaseTransitionImpl = {
  name: `BaseTransition`,
  props: BaseTransitionPropsValidators,
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    return () => {
      const children = slots.default && getTransitionRawChildren(slots.default(), true);
      if (!children || !children.length) {
        return;
      }
      let child = children[0];
      if (children.length > 1) {
        let hasFound = false;
        for (const c of children) {
          if (c.type !== Comment) {
            if (hasFound) {
              warn$1(
                "<transition> can only be used on a single element or component. Use <transition-group> for lists."
              );
              break;
            }
            child = c;
            hasFound = true;
          }
        }
      }
      const rawProps = toRaw(props);
      const { mode } = rawProps;
      if (mode && mode !== "in-out" && mode !== "out-in" && mode !== "default") {
        warn$1(`invalid <transition> mode: ${mode}`);
      }
      if (state.isLeaving) {
        return emptyPlaceholder(child);
      }
      const innerChild = getKeepAliveChild(child);
      if (!innerChild) {
        return emptyPlaceholder(child);
      }
      let enterHooks = resolveTransitionHooks(
        innerChild,
        rawProps,
        state,
        instance,
        // #11061, ensure enterHooks is fresh after clone
        (hooks) => enterHooks = hooks
      );
      setTransitionHooks(innerChild, enterHooks);
      const oldChild = instance.subTree;
      const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
      if (oldInnerChild && oldInnerChild.type !== Comment && !isSameVNodeType(innerChild, oldInnerChild) && recursiveGetSubtree(instance).type !== Comment) {
        const leavingHooks = resolveTransitionHooks(
          oldInnerChild,
          rawProps,
          state,
          instance
        );
        setTransitionHooks(oldInnerChild, leavingHooks);
        if (mode === "out-in" && innerChild.type !== Comment) {
          state.isLeaving = true;
          leavingHooks.afterLeave = () => {
            state.isLeaving = false;
            if (instance.update.active !== false) {
              instance.effect.dirty = true;
              instance.update();
            }
          };
          return emptyPlaceholder(child);
        } else if (mode === "in-out" && innerChild.type !== Comment) {
          leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
            const leavingVNodesCache = getLeavingNodesForType(
              state,
              oldInnerChild
            );
            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
            el[leaveCbKey] = () => {
              earlyRemove();
              el[leaveCbKey] = void 0;
              delete enterHooks.delayedLeave;
            };
            enterHooks.delayedLeave = delayedLeave;
          };
        }
      }
      return child;
    };
  }
};
const BaseTransition = BaseTransitionImpl;
function getLeavingNodesForType(state, vnode) {
  const { leavingVNodes } = state;
  let leavingVNodesCache = leavingVNodes.get(vnode.type);
  if (!leavingVNodesCache) {
    leavingVNodesCache = /* @__PURE__ */ Object.create(null);
    leavingVNodes.set(vnode.type, leavingVNodesCache);
  }
  return leavingVNodesCache;
}
function resolveTransitionHooks(vnode, props, state, instance, postClone) {
  const {
    appear,
    mode,
    persisted = false,
    onBeforeEnter,
    onEnter,
    onAfterEnter,
    onEnterCancelled,
    onBeforeLeave,
    onLeave,
    onAfterLeave,
    onLeaveCancelled,
    onBeforeAppear,
    onAppear,
    onAfterAppear,
    onAppearCancelled
  } = props;
  const key = String(vnode.key);
  const leavingVNodesCache = getLeavingNodesForType(state, vnode);
  const callHook2 = (hook, args) => {
    hook && callWithAsyncErrorHandling(
      hook,
      instance,
      9,
      args
    );
  };
  const callAsyncHook = (hook, args) => {
    const done = args[1];
    callHook2(hook, args);
    if (isArray(hook)) {
      if (hook.every((hook2) => hook2.length <= 1)) done();
    } else if (hook.length <= 1) {
      done();
    }
  };
  const hooks = {
    mode,
    persisted,
    beforeEnter(el) {
      let hook = onBeforeEnter;
      if (!state.isMounted) {
        if (appear) {
          hook = onBeforeAppear || onBeforeEnter;
        } else {
          return;
        }
      }
      if (el[leaveCbKey]) {
        el[leaveCbKey](
          true
          /* cancelled */
        );
      }
      const leavingVNode = leavingVNodesCache[key];
      if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el[leaveCbKey]) {
        leavingVNode.el[leaveCbKey]();
      }
      callHook2(hook, [el]);
    },
    enter(el) {
      let hook = onEnter;
      let afterHook = onAfterEnter;
      let cancelHook = onEnterCancelled;
      if (!state.isMounted) {
        if (appear) {
          hook = onAppear || onEnter;
          afterHook = onAfterAppear || onAfterEnter;
          cancelHook = onAppearCancelled || onEnterCancelled;
        } else {
          return;
        }
      }
      let called = false;
      const done = el[enterCbKey$1] = (cancelled) => {
        if (called) return;
        called = true;
        if (cancelled) {
          callHook2(cancelHook, [el]);
        } else {
          callHook2(afterHook, [el]);
        }
        if (hooks.delayedLeave) {
          hooks.delayedLeave();
        }
        el[enterCbKey$1] = void 0;
      };
      if (hook) {
        callAsyncHook(hook, [el, done]);
      } else {
        done();
      }
    },
    leave(el, remove2) {
      const key2 = String(vnode.key);
      if (el[enterCbKey$1]) {
        el[enterCbKey$1](
          true
          /* cancelled */
        );
      }
      if (state.isUnmounting) {
        return remove2();
      }
      callHook2(onBeforeLeave, [el]);
      let called = false;
      const done = el[leaveCbKey] = (cancelled) => {
        if (called) return;
        called = true;
        remove2();
        if (cancelled) {
          callHook2(onLeaveCancelled, [el]);
        } else {
          callHook2(onAfterLeave, [el]);
        }
        el[leaveCbKey] = void 0;
        if (leavingVNodesCache[key2] === vnode) {
          delete leavingVNodesCache[key2];
        }
      };
      leavingVNodesCache[key2] = vnode;
      if (onLeave) {
        callAsyncHook(onLeave, [el, done]);
      } else {
        done();
      }
    },
    clone(vnode2) {
      const hooks2 = resolveTransitionHooks(
        vnode2,
        props,
        state,
        instance,
        postClone
      );
      if (postClone) postClone(hooks2);
      return hooks2;
    }
  };
  return hooks;
}
function emptyPlaceholder(vnode) {
  if (isKeepAlive(vnode)) {
    vnode = cloneVNode(vnode);
    vnode.children = null;
    return vnode;
  }
}
function getKeepAliveChild(vnode) {
  if (!isKeepAlive(vnode)) {
    return vnode;
  }
  if (vnode.component) {
    return vnode.component.subTree;
  }
  const { shapeFlag, children } = vnode;
  if (children) {
    if (shapeFlag & 16) {
      return children[0];
    }
    if (shapeFlag & 32 && isFunction(children.default)) {
      return children.default();
    }
  }
}
function setTransitionHooks(vnode, hooks) {
  if (vnode.shapeFlag & 6 && vnode.component) {
    setTransitionHooks(vnode.component.subTree, hooks);
  } else if (vnode.shapeFlag & 128) {
    vnode.ssContent.transition = hooks.clone(vnode.ssContent);
    vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
  } else {
    vnode.transition = hooks;
  }
}
function getTransitionRawChildren(children, keepComment = false, parentKey) {
  let ret = [];
  let keyedFragmentCount = 0;
  for (let i = 0; i < children.length; i++) {
    let child = children[i];
    const key = parentKey == null ? child.key : String(parentKey) + String(child.key != null ? child.key : i);
    if (child.type === Fragment) {
      if (child.patchFlag & 128) keyedFragmentCount++;
      ret = ret.concat(
        getTransitionRawChildren(child.children, keepComment, key)
      );
    } else if (keepComment || child.type !== Comment) {
      ret.push(key != null ? cloneVNode(child, { key }) : child);
    }
  }
  if (keyedFragmentCount > 1) {
    for (let i = 0; i < ret.length; i++) {
      ret[i].patchFlag = -2;
    }
  }
  return ret;
}
const isTeleport = (type) => type.__isTeleport;
const isTeleportDisabled = (props) => props && (props.disabled || props.disabled === "");
const isTargetSVG = (target) => typeof SVGElement !== "undefined" && target instanceof SVGElement;
const isTargetMathML = (target) => typeof MathMLElement === "function" && target instanceof MathMLElement;
const resolveTarget = (props, select) => {
  const targetSelector = props && props.to;
  if (isString(targetSelector)) {
    if (!select) {
      warn$1(
        `Current renderer does not support string target for Teleports. (missing querySelector renderer option)`
      );
      return null;
    } else {
      const target = select(targetSelector);
      if (!target && !isTeleportDisabled(props)) {
        warn$1(
          `Failed to locate Teleport target with selector "${targetSelector}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`
        );
      }
      return target;
    }
  } else {
    if (!targetSelector && !isTeleportDisabled(props)) {
      warn$1(`Invalid Teleport target: ${targetSelector}`);
    }
    return targetSelector;
  }
};
const TeleportImpl = {
  name: "Teleport",
  __isTeleport: true,
  process(n1, n2, container, anchor, parentComponent, parentSuspense, namespace, slotScopeIds, optimized, internals) {
    const {
      mc: mountChildren,
      pc: patchChildren,
      pbc: patchBlockChildren,
      o: { insert, querySelector, createText, createComment }
    } = internals;
    const disabled = isTeleportDisabled(n2.props);
    let { shapeFlag, children, dynamicChildren } = n2;
    if (isHmrUpdating) {
      optimized = false;
      dynamicChildren = null;
    }
    if (n1 == null) {
      const placeholder = n2.el = createComment("teleport start");
      const mainAnchor = n2.anchor = createComment("teleport end");
      insert(placeholder, container, anchor);
      insert(mainAnchor, container, anchor);
      const target = n2.target = resolveTarget(n2.props, querySelector);
      const targetAnchor = n2.targetAnchor = createText("");
      if (target) {
        insert(targetAnchor, target);
        if (namespace === "svg" || isTargetSVG(target)) {
          namespace = "svg";
        } else if (namespace === "mathml" || isTargetMathML(target)) {
          namespace = "mathml";
        }
      } else if (!disabled) {
        warn$1("Invalid Teleport target on mount:", target, `(${typeof target})`);
      }
      const mount = (container2, anchor2) => {
        if (shapeFlag & 16) {
          mountChildren(
            children,
            container2,
            anchor2,
            parentComponent,
            parentSuspense,
            namespace,
            slotScopeIds,
            optimized
          );
        }
      };
      if (disabled) {
        mount(container, mainAnchor);
      } else if (target) {
        mount(target, targetAnchor);
      }
    } else {
      n2.el = n1.el;
      const mainAnchor = n2.anchor = n1.anchor;
      const target = n2.target = n1.target;
      const targetAnchor = n2.targetAnchor = n1.targetAnchor;
      const wasDisabled = isTeleportDisabled(n1.props);
      const currentContainer = wasDisabled ? container : target;
      const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
      if (namespace === "svg" || isTargetSVG(target)) {
        namespace = "svg";
      } else if (namespace === "mathml" || isTargetMathML(target)) {
        namespace = "mathml";
      }
      if (dynamicChildren) {
        patchBlockChildren(
          n1.dynamicChildren,
          dynamicChildren,
          currentContainer,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds
        );
        traverseStaticChildren(n1, n2, true);
      } else if (!optimized) {
        patchChildren(
          n1,
          n2,
          currentContainer,
          currentAnchor,
          parentComponent,
          parentSuspense,
          namespace,
          slotScopeIds,
          false
        );
      }
      if (disabled) {
        if (!wasDisabled) {
          moveTeleport(
            n2,
            container,
            mainAnchor,
            internals,
            1
          );
        } else {
          if (n2.props && n1.props && n2.props.to !== n1.props.to) {
            n2.props.to = n1.props.to;
          }
        }
      } else {
        if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
          const nextTarget = n2.target = resolveTarget(
            n2.props,
            querySelector
          );
          if (nextTarget) {
            moveTeleport(
              n2,
              nextTarget,
              null,
              internals,
              0
            );
          } else {
            warn$1(
              "Invalid Teleport target on update:",
              target,
              `(${typeof target})`
            );
          }
        } else if (wasDisabled) {
          moveTeleport(
            n2,
            target,
            targetAnchor,
            internals,
            1
          );
        }
      }
    }
    updateCssVars(n2);
  },
  remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {
    const { shapeFlag, children, anchor, targetAnchor, target, props } = vnode;
    if (target) {
      hostRemove(targetAnchor);
    }
    doRemove && hostRemove(anchor);
    if (shapeFlag & 16) {
      const shouldRemove = doRemove || !isTeleportDisabled(props);
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        unmount(
          child,
          parentComponent,
          parentSuspense,
          shouldRemove,
          !!child.dynamicChildren
        );
      }
    }
  },
  move: moveTeleport,
  hydrate: hydrateTeleport
};
function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2) {
  if (moveType === 0) {
    insert(vnode.targetAnchor, container, parentAnchor);
  }
  const { el, anchor, shapeFlag, children, props } = vnode;
  const isReorder = moveType === 2;
  if (isReorder) {
    insert(el, container, parentAnchor);
  }
  if (!isReorder || isTeleportDisabled(props)) {
    if (shapeFlag & 16) {
      for (let i = 0; i < children.length; i++) {
        move(
          children[i],
          container,
          parentAnchor,
          2
        );
      }
    }
  }
  if (isReorder) {
    insert(anchor, container, parentAnchor);
  }
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, {
  o: { nextSibling, parentNode, querySelector }
}, hydrateChildren) {
  const target = vnode.target = resolveTarget(
    vnode.props,
    querySelector
  );
  if (target) {
    const targetNode = target._lpa || target.firstChild;
    if (vnode.shapeFlag & 16) {
      if (isTeleportDisabled(vnode.props)) {
        vnode.anchor = hydrateChildren(
          nextSibling(node),
          vnode,
          parentNode(node),
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
        vnode.targetAnchor = targetNode;
      } else {
        vnode.anchor = nextSibling(node);
        let targetAnchor = targetNode;
        while (targetAnchor) {
          targetAnchor = nextSibling(targetAnchor);
          if (targetAnchor && targetAnchor.nodeType === 8 && targetAnchor.data === "teleport anchor") {
            vnode.targetAnchor = targetAnchor;
            target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
            break;
          }
        }
        hydrateChildren(
          targetNode,
          vnode,
          target,
          parentComponent,
          parentSuspense,
          slotScopeIds,
          optimized
        );
      }
    }
    updateCssVars(vnode);
  }
  return vnode.anchor && nextSibling(vnode.anchor);
}
const Teleport = TeleportImpl;
function updateCssVars(vnode) {
  const ctx = vnode.ctx;
  if (ctx && ctx.ut) {
    let node = vnode.children[0].el;
    while (node && node !== vnode.targetAnchor) {
      if (node.nodeType === 1) node.setAttribute("data-v-owner", ctx.uid);
      node = node.nextSibling;
    }
    ctx.ut();
  }
}
const Fragment = Symbol.for("v-fgt");
const Text = Symbol.for("v-txt");
const Comment = Symbol.for("v-cmt");
const Static = Symbol.for("v-stc");
const blockStack = [];
let currentBlock = null;
function openBlock(disableTracking = false) {
  blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
  blockStack.pop();
  currentBlock = blockStack[blockStack.length - 1] || null;
}
let isBlockTreeEnabled = 1;
function setBlockTracking(value) {
  isBlockTreeEnabled += value;
}
function setupBlock(vnode) {
  vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;
  closeBlock();
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
  return setupBlock(
    createBaseVNode(
      type,
      props,
      children,
      patchFlag,
      dynamicProps,
      shapeFlag,
      true
    )
  );
}
function createBlock(type, props, children, patchFlag, dynamicProps) {
  return setupBlock(
    createVNode(
      type,
      props,
      children,
      patchFlag,
      dynamicProps,
      true
    )
  );
}
function isVNode(value) {
  return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
  if (n2.shapeFlag & 6 && hmrDirtyComponents.has(n2.type)) {
    n1.shapeFlag &= ~256;
    n2.shapeFlag &= ~512;
    return false;
  }
  return n1.type === n2.type && n1.key === n2.key;
}
let vnodeArgsTransformer;
function transformVNodeArgs(transformer) {
  vnodeArgsTransformer = transformer;
}
const createVNodeWithArgsTransform = (...args) => {
  return _createVNode(
    ...vnodeArgsTransformer ? vnodeArgsTransformer(args, currentRenderingInstance) : args
  );
};
const normalizeKey = ({ key }) => key != null ? key : null;
const normalizeRef = ({
  ref: ref3,
  ref_key,
  ref_for
}) => {
  if (typeof ref3 === "number") {
    ref3 = "" + ref3;
  }
  return ref3 != null ? isString(ref3) || isRef(ref3) || isFunction(ref3) ? { i: currentRenderingInstance, r: ref3, k: ref_key, f: !!ref_for } : ref3 : null;
};
function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
  const vnode = {
    __v_isVNode: true,
    __v_skip: true,
    type,
    props,
    key: props && normalizeKey(props),
    ref: props && normalizeRef(props),
    scopeId: currentScopeId,
    slotScopeIds: null,
    children,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null,
    ctx: currentRenderingInstance
  };
  if (needFullChildrenNormalization) {
    normalizeChildren(vnode, children);
    if (shapeFlag & 128) {
      type.normalize(vnode);
    }
  } else if (children) {
    vnode.shapeFlag |= isString(children) ? 8 : 16;
  }
  if (vnode.key !== vnode.key) {
    warn$1(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
  }
  if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
  !isBlockNode && // has current parent block
  currentBlock && // presence of a patch flag indicates this node needs patching on updates.
  // component nodes also should always be patched, because even if the
  // component doesn't need to update, it needs to persist the instance on to
  // the next vnode so that it can be properly unmounted later.
  (vnode.patchFlag > 0 || shapeFlag & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the
  // vnode should not be considered dynamic due to handler caching.
  vnode.patchFlag !== 32) {
    currentBlock.push(vnode);
  }
  return vnode;
}
const createVNode = createVNodeWithArgsTransform;
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type || type === NULL_DYNAMIC_COMPONENT) {
    if (!type) {
      warn$1(`Invalid vnode type when creating vnode: ${type}.`);
    }
    type = Comment;
  }
  if (isVNode(type)) {
    const cloned = cloneVNode(
      type,
      props,
      true
      /* mergeRef: true */
    );
    if (children) {
      normalizeChildren(cloned, children);
    }
    if (isBlockTreeEnabled > 0 && !isBlockNode && currentBlock) {
      if (cloned.shapeFlag & 6) {
        currentBlock[currentBlock.indexOf(type)] = cloned;
      } else {
        currentBlock.push(cloned);
      }
    }
    cloned.patchFlag = -2;
    return cloned;
  }
  if (isClassComponent(type)) {
    type = type.__vccOpts;
  }
  if (props) {
    props = guardReactiveProps(props);
    let { class: klass, style } = props;
    if (klass && !isString(klass)) {
      props.class = normalizeClass(klass);
    }
    if (isObject(style)) {
      if (isProxy(style) && !isArray(style)) {
        style = extend({}, style);
      }
      props.style = normalizeStyle(style);
    }
  }
  const shapeFlag = isString(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : isObject(type) ? 4 : isFunction(type) ? 2 : 0;
  if (shapeFlag & 4 && isProxy(type)) {
    type = toRaw(type);
    warn$1(
      `Vue received a Component that was made a reactive object. This can lead to unnecessary performance overhead and should be avoided by marking the component with \`markRaw\` or using \`shallowRef\` instead of \`ref\`.`,
      `
Component that was made reactive: `,
      type
    );
  }
  return createBaseVNode(
    type,
    props,
    children,
    patchFlag,
    dynamicProps,
    shapeFlag,
    isBlockNode,
    true
  );
}
function guardReactiveProps(props) {
  if (!props) return null;
  return isProxy(props) || isInternalObject(props) ? extend({}, props) : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false, cloneTransition = false) {
  const { props, ref: ref3, patchFlag, children, transition } = vnode;
  const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey(mergedProps),
    ref: extraProps && extraProps.ref ? (
      // #2078 in the case of <component :is="vnode" ref="extra"/>
      // if the vnode itself already has a ref, cloneVNode will need to merge
      // the refs so the single vnode can be set on multiple refs
      mergeRef && ref3 ? isArray(ref3) ? ref3.concat(normalizeRef(extraProps)) : [ref3, normalizeRef(extraProps)] : normalizeRef(extraProps)
    ) : ref3,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children: patchFlag === -1 && isArray(children) ? children.map(deepCloneVNode) : children,
    target: vnode.target,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    // if the vnode is cloned with extra props, we can no longer assume its
    // existing patch flag to be reliable and need to add the FULL_PROPS flag.
    // note: preserve flag for fragments since they use the flag for children
    // fast paths only.
    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition,
    // These should technically only be non-null on mounted VNodes. However,
    // they *should* be copied for kept-alive vnodes. So we just always copy
    // them since them being non-null during a mount doesn't affect the logic as
    // they will simply be overwritten.
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor,
    ctx: vnode.ctx,
    ce: vnode.ce
  };
  if (transition && cloneTransition) {
    setTransitionHooks(
      cloned,
      transition.clone(cloned)
    );
  }
  return cloned;
}
function deepCloneVNode(vnode) {
  const cloned = cloneVNode(vnode);
  if (isArray(vnode.children)) {
    cloned.children = vnode.children.map(deepCloneVNode);
  }
  return cloned;
}
function createTextVNode(text = " ", flag = 0) {
  return createVNode(Text, null, text, flag);
}
function createStaticVNode(content, numberOfNodes) {
  const vnode = createVNode(Static, null, content);
  vnode.staticCount = numberOfNodes;
  return vnode;
}
function createCommentVNode(text = "", asBlock = false) {
  return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);
}
function normalizeVNode(child) {
  if (child == null || typeof child === "boolean") {
    return createVNode(Comment);
  } else if (isArray(child)) {
    return createVNode(
      Fragment,
      null,
      // #3666, avoid reference pollution when reusing vnode
      child.slice()
    );
  } else if (typeof child === "object") {
    return cloneIfMounted(child);
  } else {
    return createVNode(Text, null, String(child));
  }
}
function cloneIfMounted(child) {
  return child.el === null && child.patchFlag !== -1 || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
  let type = 0;
  const { shapeFlag } = vnode;
  if (children == null) {
    children = null;
  } else if (isArray(children)) {
    type = 16;
  } else if (typeof children === "object") {
    if (shapeFlag & (1 | 64)) {
      const slot = children.default;
      if (slot) {
        slot._c && (slot._d = false);
        normalizeChildren(vnode, slot());
        slot._c && (slot._d = true);
      }
      return;
    } else {
      type = 32;
      const slotFlag = children._;
      if (!slotFlag && !isInternalObject(children)) {
        children._ctx = currentRenderingInstance;
      } else if (slotFlag === 3 && currentRenderingInstance) {
        if (currentRenderingInstance.slots._ === 1) {
          children._ = 1;
        } else {
          children._ = 2;
          vnode.patchFlag |= 1024;
        }
      }
    }
  } else if (isFunction(children)) {
    children = { default: children, _ctx: currentRenderingInstance };
    type = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type = 16;
      children = [createTextVNode(children)];
    } else {
      type = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type;
}
function mergeProps(...args) {
  const ret = {};
  for (let i = 0; i < args.length; i++) {
    const toMerge = args[i];
    for (const key in toMerge) {
      if (key === "class") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass([ret.class, toMerge.class]);
        }
      } else if (key === "style") {
        ret.style = normalizeStyle([ret.style, toMerge.style]);
      } else if (isOn(key)) {
        const existing = ret[key];
        const incoming = toMerge[key];
        if (incoming && existing !== incoming && !(isArray(existing) && existing.includes(incoming))) {
          ret[key] = existing ? [].concat(existing, incoming) : incoming;
        }
      } else if (key !== "") {
        ret[key] = toMerge[key];
      }
    }
  }
  return ret;
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}
const emptyAppContext = createAppContext();
let uid = 0;
function createComponentInstance(vnode, parent, suspense) {
  const type = vnode.type;
  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
  const instance = {
    uid: uid++,
    vnode,
    type,
    parent,
    appContext,
    root: null,
    // to be immediately set
    next: null,
    subTree: null,
    // will be set synchronously right after creation
    effect: null,
    update: null,
    // will be set synchronously right after creation
    scope: new EffectScope(
      true
      /* detached */
    ),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent ? parent.provides : Object.create(appContext.provides),
    accessCache: null,
    renderCache: [],
    // local resolved assets
    components: null,
    directives: null,
    // resolved props and emits options
    propsOptions: normalizePropsOptions(type, appContext),
    emitsOptions: normalizeEmitsOptions(type, appContext),
    // emit
    emit: null,
    // to be set immediately
    emitted: null,
    // props default value
    propsDefaults: EMPTY_OBJ,
    // inheritAttrs
    inheritAttrs: type.inheritAttrs,
    // state
    ctx: EMPTY_OBJ,
    data: EMPTY_OBJ,
    props: EMPTY_OBJ,
    attrs: EMPTY_OBJ,
    slots: EMPTY_OBJ,
    refs: EMPTY_OBJ,
    setupState: EMPTY_OBJ,
    setupContext: null,
    attrsProxy: null,
    slotsProxy: null,
    // suspense related
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    // lifecycle hooks
    // not using enums here because it results in computed properties
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null
  };
  {
    instance.ctx = createDevRenderContext(instance);
  }
  instance.root = parent ? parent.root : instance;
  instance.emit = emit.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
let currentInstance = null;
const getCurrentInstance = () => currentInstance || currentRenderingInstance;
let internalSetCurrentInstance;
let setInSSRSetupState;
{
  const g = getGlobalThis();
  const registerGlobalSetter = (key, setter) => {
    let setters;
    if (!(setters = g[key])) setters = g[key] = [];
    setters.push(setter);
    return (v) => {
      if (setters.length > 1) setters.forEach((set2) => set2(v));
      else setters[0](v);
    };
  };
  internalSetCurrentInstance = registerGlobalSetter(
    `__VUE_INSTANCE_SETTERS__`,
    (v) => currentInstance = v
  );
  setInSSRSetupState = registerGlobalSetter(
    `__VUE_SSR_SETTERS__`,
    (v) => isInSSRComponentSetup = v
  );
}
const setCurrentInstance = (instance) => {
  const prev = currentInstance;
  internalSetCurrentInstance(instance);
  instance.scope.on();
  return () => {
    instance.scope.off();
    internalSetCurrentInstance(prev);
  };
};
const unsetCurrentInstance = () => {
  currentInstance && currentInstance.scope.off();
  internalSetCurrentInstance(null);
};
const isBuiltInTag = /* @__PURE__ */ makeMap("slot,component");
function validateComponentName(name, { isNativeTag }) {
  if (isBuiltInTag(name) || isNativeTag(name)) {
    warn$1(
      "Do not use built-in or reserved HTML elements as component id: " + name
    );
  }
}
function isStatefulComponent(instance) {
  return instance.vnode.shapeFlag & 4;
}
let isInSSRComponentSetup = false;
function setupComponent(instance, isSSR = false) {
  isSSR && setInSSRSetupState(isSSR);
  const { props, children } = instance.vnode;
  const isStateful = isStatefulComponent(instance);
  initProps(instance, props, isStateful, isSSR);
  initSlots(instance, children);
  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
  isSSR && setInSSRSetupState(false);
  return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
  var _a;
  const Component = instance.type;
  {
    if (Component.name) {
      validateComponentName(Component.name, instance.appContext.config);
    }
    if (Component.components) {
      const names = Object.keys(Component.components);
      for (let i = 0; i < names.length; i++) {
        validateComponentName(names[i], instance.appContext.config);
      }
    }
    if (Component.directives) {
      const names = Object.keys(Component.directives);
      for (let i = 0; i < names.length; i++) {
        validateDirectiveName(names[i]);
      }
    }
    if (Component.compilerOptions && isRuntimeOnly()) {
      warn$1(
        `"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.`
      );
    }
  }
  instance.accessCache = /* @__PURE__ */ Object.create(null);
  instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers);
  {
    exposePropsOnRenderContext(instance);
  }
  const { setup } = Component;
  if (setup) {
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
    const reset2 = setCurrentInstance(instance);
    pauseTracking();
    const setupResult = callWithErrorHandling(
      setup,
      instance,
      0,
      [
        shallowReadonly(instance.props),
        setupContext
      ]
    );
    resetTracking();
    reset2();
    if (isPromise(setupResult)) {
      setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult(instance, resolvedResult, isSSR);
        }).catch((e) => {
          handleError(e, instance, 0);
        });
      } else {
        instance.asyncDep = setupResult;
        if (!instance.suspense) {
          const name = (_a = Component.name) != null ? _a : "Anonymous";
          warn$1(
            `Component <${name}>: setup function returned a promise, but no <Suspense> boundary was found in the parent component tree. A component with async setup() must be nested in a <Suspense> in order to be rendered.`
          );
        }
      }
    } else {
      handleSetupResult(instance, setupResult, isSSR);
    }
  } else {
    finishComponentSetup(instance, isSSR);
  }
}
function handleSetupResult(instance, setupResult, isSSR) {
  if (isFunction(setupResult)) {
    if (instance.type.__ssrInlineRender) {
      instance.ssrRender = setupResult;
    } else {
      instance.render = setupResult;
    }
  } else if (isObject(setupResult)) {
    if (isVNode(setupResult)) {
      warn$1(
        `setup() should not return VNodes directly - return a render function instead.`
      );
    }
    {
      instance.devtoolsRawSetupState = setupResult;
    }
    instance.setupState = proxyRefs(setupResult);
    {
      exposeSetupStateOnRenderContext(instance);
    }
  } else if (setupResult !== void 0) {
    warn$1(
      `setup() should return an object. Received: ${setupResult === null ? "null" : typeof setupResult}`
    );
  }
  finishComponentSetup(instance, isSSR);
}
let compile$1;
let installWithProxy;
function registerRuntimeCompiler(_compile) {
  compile$1 = _compile;
  installWithProxy = (i) => {
    if (i.render._rc) {
      i.withProxy = new Proxy(i.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
    }
  };
}
const isRuntimeOnly = () => !compile$1;
function finishComponentSetup(instance, isSSR, skipOptions) {
  const Component = instance.type;
  if (!instance.render) {
    if (!isSSR && compile$1 && !Component.render) {
      const template = Component.template || resolveMergedOptions(instance).template;
      if (template) {
        {
          startMeasure(instance, `compile`);
        }
        const { isCustomElement, compilerOptions } = instance.appContext.config;
        const { delimiters, compilerOptions: componentCompilerOptions } = Component;
        const finalCompilerOptions = extend(
          extend(
            {
              isCustomElement,
              delimiters
            },
            compilerOptions
          ),
          componentCompilerOptions
        );
        Component.render = compile$1(template, finalCompilerOptions);
        {
          endMeasure(instance, `compile`);
        }
      }
    }
    instance.render = Component.render || NOOP;
    if (installWithProxy) {
      installWithProxy(instance);
    }
  }
  {
    const reset2 = setCurrentInstance(instance);
    pauseTracking();
    try {
      applyOptions(instance);
    } finally {
      resetTracking();
      reset2();
    }
  }
  if (!Component.render && instance.render === NOOP && !isSSR) {
    if (!compile$1 && Component.template) {
      warn$1(
        `Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`
      );
    } else {
      warn$1(`Component is missing template or render function: `, Component);
    }
  }
}
const attrsProxyHandlers = {
  get(target, key) {
    markAttrsAccessed();
    track(target, "get", "");
    return target[key];
  },
  set() {
    warn$1(`setupContext.attrs is readonly.`);
    return false;
  },
  deleteProperty() {
    warn$1(`setupContext.attrs is readonly.`);
    return false;
  }
};
function getSlotsProxy(instance) {
  return instance.slotsProxy || (instance.slotsProxy = new Proxy(instance.slots, {
    get(target, key) {
      track(instance, "get", "$slots");
      return target[key];
    }
  }));
}
function createSetupContext(instance) {
  const expose = (exposed) => {
    {
      if (instance.exposed) {
        warn$1(`expose() should be called only once per setup().`);
      }
      if (exposed != null) {
        let exposedType = typeof exposed;
        if (exposedType === "object") {
          if (isArray(exposed)) {
            exposedType = "array";
          } else if (isRef(exposed)) {
            exposedType = "ref";
          }
        }
        if (exposedType !== "object") {
          warn$1(
            `expose() should be passed a plain object, received ${exposedType}.`
          );
        }
      }
    }
    instance.exposed = exposed || {};
  };
  {
    let attrsProxy;
    return Object.freeze({
      get attrs() {
        return attrsProxy || (attrsProxy = new Proxy(instance.attrs, attrsProxyHandlers));
      },
      get slots() {
        return getSlotsProxy(instance);
      },
      get emit() {
        return (event, ...args) => instance.emit(event, ...args);
      },
      expose
    });
  }
}
function getComponentPublicInstance(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
      get(target, key) {
        if (key in target) {
          return target[key];
        } else if (key in publicPropertiesMap) {
          return publicPropertiesMap[key](instance);
        }
      },
      has(target, key) {
        return key in target || key in publicPropertiesMap;
      }
    }));
  } else {
    return instance.proxy;
  }
}
const classifyRE = /(?:^|[-_])(\w)/g;
const classify = (str) => str.replace(classifyRE, (c) => c.toUpperCase()).replace(/[-_]/g, "");
function getComponentName(Component, includeInferred = true) {
  return isFunction(Component) ? Component.displayName || Component.name : Component.name || includeInferred && Component.__name;
}
function formatComponentName(instance, Component, isRoot = false) {
  let name = getComponentName(Component);
  if (!name && Component.__file) {
    const match = Component.__file.match(/([^/\\]+)\.\w+$/);
    if (match) {
      name = match[1];
    }
  }
  if (!name && instance && instance.parent) {
    const inferFromRegistry = (registry) => {
      for (const key in registry) {
        if (registry[key] === Component) {
          return key;
        }
      }
    };
    name = inferFromRegistry(
      instance.components || instance.parent.type.components
    ) || inferFromRegistry(instance.appContext.components);
  }
  return name ? classify(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent(value) {
  return isFunction(value) && "__vccOpts" in value;
}
const computed = (getterOrOptions, debugOptions) => {
  const c = computed$1(getterOrOptions, debugOptions, isInSSRComponentSetup);
  {
    const i = getCurrentInstance();
    if (i && i.appContext.config.warnRecursiveComputed) {
      c._warnRecursive = true;
    }
  }
  return c;
};
function useModel(props, name, options = EMPTY_OBJ) {
  const i = getCurrentInstance();
  if (!i) {
    warn$1(`useModel() called without active instance.`);
    return ref();
  }
  if (!i.propsOptions[0][name]) {
    warn$1(`useModel() called with prop "${name}" which is not declared.`);
    return ref();
  }
  const camelizedName = camelize(name);
  const hyphenatedName = hyphenate(name);
  const res = customRef((track2, trigger2) => {
    let localValue;
    watchSyncEffect(() => {
      const propValue = props[name];
      if (hasChanged(localValue, propValue)) {
        localValue = propValue;
        trigger2();
      }
    });
    return {
      get() {
        track2();
        return options.get ? options.get(localValue) : localValue;
      },
      set(value) {
        const rawProps = i.vnode.props;
        if (!(rawProps && // check if parent has passed v-model
        (name in rawProps || camelizedName in rawProps || hyphenatedName in rawProps) && (`onUpdate:${name}` in rawProps || `onUpdate:${camelizedName}` in rawProps || `onUpdate:${hyphenatedName}` in rawProps)) && hasChanged(value, localValue)) {
          localValue = value;
          trigger2();
        }
        i.emit(`update:${name}`, options.set ? options.set(value) : value);
      }
    };
  });
  const modifierKey = name === "modelValue" ? "modelModifiers" : `${name}Modifiers`;
  res[Symbol.iterator] = () => {
    let i2 = 0;
    return {
      next() {
        if (i2 < 2) {
          return { value: i2++ ? props[modifierKey] || {} : res, done: false };
        } else {
          return { done: true };
        }
      }
    };
  };
  return res;
}
function h(type, propsOrChildren, children) {
  const l = arguments.length;
  if (l === 2) {
    if (isObject(propsOrChildren) && !isArray(propsOrChildren)) {
      if (isVNode(propsOrChildren)) {
        return createVNode(type, null, [propsOrChildren]);
      }
      return createVNode(type, propsOrChildren);
    } else {
      return createVNode(type, null, propsOrChildren);
    }
  } else {
    if (l > 3) {
      children = Array.prototype.slice.call(arguments, 2);
    } else if (l === 3 && isVNode(children)) {
      children = [children];
    }
    return createVNode(type, propsOrChildren, children);
  }
}
function initCustomFormatter() {
  if (typeof window === "undefined") {
    return;
  }
  const vueStyle = { style: "color:#3ba776" };
  const numberStyle = { style: "color:#1677ff" };
  const stringStyle = { style: "color:#f5222d" };
  const keywordStyle = { style: "color:#eb2f96" };
  const formatter = {
    header(obj) {
      if (!isObject(obj)) {
        return null;
      }
      if (obj.__isVue) {
        return ["div", vueStyle, `VueInstance`];
      } else if (isRef(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, genRefFlag(obj)],
          "<",
          formatValue(obj.value),
          `>`
        ];
      } else if (isReactive(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, isShallow(obj) ? "ShallowReactive" : "Reactive"],
          "<",
          formatValue(obj),
          `>${isReadonly(obj) ? ` (readonly)` : ``}`
        ];
      } else if (isReadonly(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, isShallow(obj) ? "ShallowReadonly" : "Readonly"],
          "<",
          formatValue(obj),
          ">"
        ];
      }
      return null;
    },
    hasBody(obj) {
      return obj && obj.__isVue;
    },
    body(obj) {
      if (obj && obj.__isVue) {
        return [
          "div",
          {},
          ...formatInstance(obj.$)
        ];
      }
    }
  };
  function formatInstance(instance) {
    const blocks = [];
    if (instance.type.props && instance.props) {
      blocks.push(createInstanceBlock("props", toRaw(instance.props)));
    }
    if (instance.setupState !== EMPTY_OBJ) {
      blocks.push(createInstanceBlock("setup", instance.setupState));
    }
    if (instance.data !== EMPTY_OBJ) {
      blocks.push(createInstanceBlock("data", toRaw(instance.data)));
    }
    const computed2 = extractKeys(instance, "computed");
    if (computed2) {
      blocks.push(createInstanceBlock("computed", computed2));
    }
    const injected = extractKeys(instance, "inject");
    if (injected) {
      blocks.push(createInstanceBlock("injected", injected));
    }
    blocks.push([
      "div",
      {},
      [
        "span",
        {
          style: keywordStyle.style + ";opacity:0.66"
        },
        "$ (internal): "
      ],
      ["object", { object: instance }]
    ]);
    return blocks;
  }
  function createInstanceBlock(type, target) {
    target = extend({}, target);
    if (!Object.keys(target).length) {
      return ["span", {}];
    }
    return [
      "div",
      { style: "line-height:1.25em;margin-bottom:0.6em" },
      [
        "div",
        {
          style: "color:#476582"
        },
        type
      ],
      [
        "div",
        {
          style: "padding-left:1.25em"
        },
        ...Object.keys(target).map((key) => {
          return [
            "div",
            {},
            ["span", keywordStyle, key + ": "],
            formatValue(target[key], false)
          ];
        })
      ]
    ];
  }
  function formatValue(v, asRaw = true) {
    if (typeof v === "number") {
      return ["span", numberStyle, v];
    } else if (typeof v === "string") {
      return ["span", stringStyle, JSON.stringify(v)];
    } else if (typeof v === "boolean") {
      return ["span", keywordStyle, v];
    } else if (isObject(v)) {
      return ["object", { object: asRaw ? toRaw(v) : v }];
    } else {
      return ["span", stringStyle, String(v)];
    }
  }
  function extractKeys(instance, type) {
    const Comp = instance.type;
    if (isFunction(Comp)) {
      return;
    }
    const extracted = {};
    for (const key in instance.ctx) {
      if (isKeyOfType(Comp, key, type)) {
        extracted[key] = instance.ctx[key];
      }
    }
    return extracted;
  }
  function isKeyOfType(Comp, key, type) {
    const opts = Comp[type];
    if (isArray(opts) && opts.includes(key) || isObject(opts) && key in opts) {
      return true;
    }
    if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {
      return true;
    }
    if (Comp.mixins && Comp.mixins.some((m2) => isKeyOfType(m2, key, type))) {
      return true;
    }
  }
  function genRefFlag(v) {
    if (isShallow(v)) {
      return `ShallowRef`;
    }
    if (v.effect) {
      return `ComputedRef`;
    }
    return `Ref`;
  }
  if (window.devtoolsFormatters) {
    window.devtoolsFormatters.push(formatter);
  } else {
    window.devtoolsFormatters = [formatter];
  }
}
function withMemo(memo, render2, cache, index) {
  const cached = cache[index];
  if (cached && isMemoSame(cached, memo)) {
    return cached;
  }
  const ret = render2();
  ret.memo = memo.slice();
  ret.memoIndex = index;
  return cache[index] = ret;
}
function isMemoSame(cached, memo) {
  const prev = cached.memo;
  if (prev.length != memo.length) {
    return false;
  }
  for (let i = 0; i < prev.length; i++) {
    if (hasChanged(prev[i], memo[i])) {
      return false;
    }
  }
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(cached);
  }
  return true;
}
const version = "3.4.29";
const warn = warn$1;
const ErrorTypeStrings = ErrorTypeStrings$1;
const devtools = devtools$1;
const setDevtoolsHook = setDevtoolsHook$1;
const _ssrUtils = {
  createComponentInstance,
  setupComponent,
  renderComponentRoot,
  setCurrentRenderingInstance,
  isVNode,
  normalizeVNode,
  getComponentPublicInstance
};
const ssrUtils = _ssrUtils;
const resolveFilter = null;
const compatUtils = null;
const DeprecationTypes = null;
/**
* @vue/runtime-dom v3.4.29
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
const svgNS = "http://www.w3.org/2000/svg";
const mathmlNS = "http://www.w3.org/1998/Math/MathML";
const doc = typeof document !== "undefined" ? document : null;
const templateContainer = doc && /* @__PURE__ */ doc.createElement("template");
const nodeOps = {
  insert: (child, parent, anchor) => {
    parent.insertBefore(child, anchor || null);
  },
  remove: (child) => {
    const parent = child.parentNode;
    if (parent) {
      parent.removeChild(child);
    }
  },
  createElement: (tag, namespace, is, props) => {
    const el = namespace === "svg" ? doc.createElementNS(svgNS, tag) : namespace === "mathml" ? doc.createElementNS(mathmlNS, tag) : is ? doc.createElement(tag, { is }) : doc.createElement(tag);
    if (tag === "select" && props && props.multiple != null) {
      el.setAttribute("multiple", props.multiple);
    }
    return el;
  },
  createText: (text) => doc.createTextNode(text),
  createComment: (text) => doc.createComment(text),
  setText: (node, text) => {
    node.nodeValue = text;
  },
  setElementText: (el, text) => {
    el.textContent = text;
  },
  parentNode: (node) => node.parentNode,
  nextSibling: (node) => node.nextSibling,
  querySelector: (selector) => doc.querySelector(selector),
  setScopeId(el, id) {
    el.setAttribute(id, "");
  },
  // __UNSAFE__
  // Reason: innerHTML.
  // Static content here can only come from compiled templates.
  // As long as the user only uses trusted templates, this is safe.
  insertStaticContent(content, parent, anchor, namespace, start, end) {
    const before = anchor ? anchor.previousSibling : parent.lastChild;
    if (start && (start === end || start.nextSibling)) {
      while (true) {
        parent.insertBefore(start.cloneNode(true), anchor);
        if (start === end || !(start = start.nextSibling)) break;
      }
    } else {
      templateContainer.innerHTML = namespace === "svg" ? `<svg>${content}</svg>` : namespace === "mathml" ? `<math>${content}</math>` : content;
      const template = templateContainer.content;
      if (namespace === "svg" || namespace === "mathml") {
        const wrapper = template.firstChild;
        while (wrapper.firstChild) {
          template.appendChild(wrapper.firstChild);
        }
        template.removeChild(wrapper);
      }
      parent.insertBefore(template, anchor);
    }
    return [
      // first
      before ? before.nextSibling : parent.firstChild,
      // last
      anchor ? anchor.previousSibling : parent.lastChild
    ];
  }
};
const TRANSITION$1 = "transition";
const ANIMATION = "animation";
const vtcKey = Symbol("_vtc");
const Transition = (props, { slots }) => h(BaseTransition, resolveTransitionProps(props), slots);
Transition.displayName = "Transition";
const DOMTransitionPropsValidators = {
  name: String,
  type: String,
  css: {
    type: Boolean,
    default: true
  },
  duration: [String, Number, Object],
  enterFromClass: String,
  enterActiveClass: String,
  enterToClass: String,
  appearFromClass: String,
  appearActiveClass: String,
  appearToClass: String,
  leaveFromClass: String,
  leaveActiveClass: String,
  leaveToClass: String
};
const TransitionPropsValidators = Transition.props = /* @__PURE__ */ extend(
  {},
  BaseTransitionPropsValidators,
  DOMTransitionPropsValidators
);
const callHook = (hook, args = []) => {
  if (isArray(hook)) {
    hook.forEach((h2) => h2(...args));
  } else if (hook) {
    hook(...args);
  }
};
const hasExplicitCallback = (hook) => {
  return hook ? isArray(hook) ? hook.some((h2) => h2.length > 1) : hook.length > 1 : false;
};
function resolveTransitionProps(rawProps) {
  const baseProps = {};
  for (const key in rawProps) {
    if (!(key in DOMTransitionPropsValidators)) {
      baseProps[key] = rawProps[key];
    }
  }
  if (rawProps.css === false) {
    return baseProps;
  }
  const {
    name = "v",
    type,
    duration,
    enterFromClass = `${name}-enter-from`,
    enterActiveClass = `${name}-enter-active`,
    enterToClass = `${name}-enter-to`,
    appearFromClass = enterFromClass,
    appearActiveClass = enterActiveClass,
    appearToClass = enterToClass,
    leaveFromClass = `${name}-leave-from`,
    leaveActiveClass = `${name}-leave-active`,
    leaveToClass = `${name}-leave-to`
  } = rawProps;
  const durations = normalizeDuration(duration);
  const enterDuration = durations && durations[0];
  const leaveDuration = durations && durations[1];
  const {
    onBeforeEnter,
    onEnter,
    onEnterCancelled,
    onLeave,
    onLeaveCancelled,
    onBeforeAppear = onBeforeEnter,
    onAppear = onEnter,
    onAppearCancelled = onEnterCancelled
  } = baseProps;
  const finishEnter = (el, isAppear, done) => {
    removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
    removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
    done && done();
  };
  const finishLeave = (el, done) => {
    el._isLeaving = false;
    removeTransitionClass(el, leaveFromClass);
    removeTransitionClass(el, leaveToClass);
    removeTransitionClass(el, leaveActiveClass);
    done && done();
  };
  const makeEnterHook = (isAppear) => {
    return (el, done) => {
      const hook = isAppear ? onAppear : onEnter;
      const resolve2 = () => finishEnter(el, isAppear, done);
      callHook(hook, [el, resolve2]);
      nextFrame(() => {
        removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
        addTransitionClass(el, isAppear ? appearToClass : enterToClass);
        if (!hasExplicitCallback(hook)) {
          whenTransitionEnds(el, type, enterDuration, resolve2);
        }
      });
    };
  };
  return extend(baseProps, {
    onBeforeEnter(el) {
      callHook(onBeforeEnter, [el]);
      addTransitionClass(el, enterFromClass);
      addTransitionClass(el, enterActiveClass);
    },
    onBeforeAppear(el) {
      callHook(onBeforeAppear, [el]);
      addTransitionClass(el, appearFromClass);
      addTransitionClass(el, appearActiveClass);
    },
    onEnter: makeEnterHook(false),
    onAppear: makeEnterHook(true),
    onLeave(el, done) {
      el._isLeaving = true;
      const resolve2 = () => finishLeave(el, done);
      addTransitionClass(el, leaveFromClass);
      addTransitionClass(el, leaveActiveClass);
      forceReflow();
      nextFrame(() => {
        if (!el._isLeaving) {
          return;
        }
        removeTransitionClass(el, leaveFromClass);
        addTransitionClass(el, leaveToClass);
        if (!hasExplicitCallback(onLeave)) {
          whenTransitionEnds(el, type, leaveDuration, resolve2);
        }
      });
      callHook(onLeave, [el, resolve2]);
    },
    onEnterCancelled(el) {
      finishEnter(el, false);
      callHook(onEnterCancelled, [el]);
    },
    onAppearCancelled(el) {
      finishEnter(el, true);
      callHook(onAppearCancelled, [el]);
    },
    onLeaveCancelled(el) {
      finishLeave(el);
      callHook(onLeaveCancelled, [el]);
    }
  });
}
function normalizeDuration(duration) {
  if (duration == null) {
    return null;
  } else if (isObject(duration)) {
    return [NumberOf(duration.enter), NumberOf(duration.leave)];
  } else {
    const n = NumberOf(duration);
    return [n, n];
  }
}
function NumberOf(val) {
  const res = toNumber(val);
  {
    assertNumber(res, "<transition> explicit duration");
  }
  return res;
}
function addTransitionClass(el, cls) {
  cls.split(/\s+/).forEach((c) => c && el.classList.add(c));
  (el[vtcKey] || (el[vtcKey] = /* @__PURE__ */ new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
  cls.split(/\s+/).forEach((c) => c && el.classList.remove(c));
  const _vtc = el[vtcKey];
  if (_vtc) {
    _vtc.delete(cls);
    if (!_vtc.size) {
      el[vtcKey] = void 0;
    }
  }
}
function nextFrame(cb) {
  requestAnimationFrame(() => {
    requestAnimationFrame(cb);
  });
}
let endId = 0;
function whenTransitionEnds(el, expectedType, explicitTimeout, resolve2) {
  const id = el._endId = ++endId;
  const resolveIfNotStale = () => {
    if (id === el._endId) {
      resolve2();
    }
  };
  if (explicitTimeout) {
    return setTimeout(resolveIfNotStale, explicitTimeout);
  }
  const { type, timeout, propCount } = getTransitionInfo(el, expectedType);
  if (!type) {
    return resolve2();
  }
  const endEvent = type + "end";
  let ended = 0;
  const end = () => {
    el.removeEventListener(endEvent, onEnd);
    resolveIfNotStale();
  };
  const onEnd = (e) => {
    if (e.target === el && ++ended >= propCount) {
      end();
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el, expectedType) {
  const styles = window.getComputedStyle(el);
  const getStyleProperties = (key) => (styles[key] || "").split(", ");
  const transitionDelays = getStyleProperties(`${TRANSITION$1}Delay`);
  const transitionDurations = getStyleProperties(`${TRANSITION$1}Duration`);
  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  const animationDelays = getStyleProperties(`${ANIMATION}Delay`);
  const animationDurations = getStyleProperties(`${ANIMATION}Duration`);
  const animationTimeout = getTimeout(animationDelays, animationDurations);
  let type = null;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION$1) {
    if (transitionTimeout > 0) {
      type = TRANSITION$1;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION$1 : ANIMATION : null;
    propCount = type ? type === TRANSITION$1 ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type === TRANSITION$1 && /\b(transform|all)(,|$)/.test(
    getStyleProperties(`${TRANSITION$1}Property`).toString()
  );
  return {
    type,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));
}
function toMs(s) {
  if (s === "auto") return 0;
  return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
}
function forceReflow() {
  return document.body.offsetHeight;
}
function patchClass(el, value, isSVG) {
  const transitionClasses = el[vtcKey];
  if (transitionClasses) {
    value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value == null) {
    el.removeAttribute("class");
  } else if (isSVG) {
    el.setAttribute("class", value);
  } else {
    el.className = value;
  }
}
const vShowOriginalDisplay = Symbol("_vod");
const vShowHidden = Symbol("_vsh");
const vShow = {
  beforeMount(el, { value }, { transition }) {
    el[vShowOriginalDisplay] = el.style.display === "none" ? "" : el.style.display;
    if (transition && value) {
      transition.beforeEnter(el);
    } else {
      setDisplay(el, value);
    }
  },
  mounted(el, { value }, { transition }) {
    if (transition && value) {
      transition.enter(el);
    }
  },
  updated(el, { value, oldValue }, { transition }) {
    if (!value === !oldValue) return;
    if (transition) {
      if (value) {
        transition.beforeEnter(el);
        setDisplay(el, true);
        transition.enter(el);
      } else {
        transition.leave(el, () => {
          setDisplay(el, false);
        });
      }
    } else {
      setDisplay(el, value);
    }
  },
  beforeUnmount(el, { value }) {
    setDisplay(el, value);
  }
};
{
  vShow.name = "show";
}
function setDisplay(el, value) {
  el.style.display = value ? el[vShowOriginalDisplay] : "none";
  el[vShowHidden] = !value;
}
function initVShowForSSR() {
  vShow.getSSRProps = ({ value }) => {
    if (!value) {
      return { style: { display: "none" } };
    }
  };
}
const CSS_VAR_TEXT = Symbol("CSS_VAR_TEXT");
function useCssVars(getter) {
  const instance = getCurrentInstance();
  if (!instance) {
    warn(`useCssVars is called without current active component instance.`);
    return;
  }
  const updateTeleports = instance.ut = (vars = getter(instance.proxy)) => {
    Array.from(
      document.querySelectorAll(`[data-v-owner="${instance.uid}"]`)
    ).forEach((node) => setVarsOnNode(node, vars));
  };
  {
    instance.getCssVars = () => getter(instance.proxy);
  }
  const setVars = () => {
    const vars = getter(instance.proxy);
    setVarsOnVNode(instance.subTree, vars);
    updateTeleports(vars);
  };
  onMounted(() => {
    watchPostEffect(setVars);
    const ob = new MutationObserver(setVars);
    ob.observe(instance.subTree.el.parentNode, { childList: true });
    onUnmounted(() => ob.disconnect());
  });
}
function setVarsOnVNode(vnode, vars) {
  if (vnode.shapeFlag & 128) {
    const suspense = vnode.suspense;
    vnode = suspense.activeBranch;
    if (suspense.pendingBranch && !suspense.isHydrating) {
      suspense.effects.push(() => {
        setVarsOnVNode(suspense.activeBranch, vars);
      });
    }
  }
  while (vnode.component) {
    vnode = vnode.component.subTree;
  }
  if (vnode.shapeFlag & 1 && vnode.el) {
    setVarsOnNode(vnode.el, vars);
  } else if (vnode.type === Fragment) {
    vnode.children.forEach((c) => setVarsOnVNode(c, vars));
  } else if (vnode.type === Static) {
    let { el, anchor } = vnode;
    while (el) {
      setVarsOnNode(el, vars);
      if (el === anchor) break;
      el = el.nextSibling;
    }
  }
}
function setVarsOnNode(el, vars) {
  if (el.nodeType === 1) {
    const style = el.style;
    let cssText = "";
    for (const key in vars) {
      style.setProperty(`--${key}`, vars[key]);
      cssText += `--${key}: ${vars[key]};`;
    }
    style[CSS_VAR_TEXT] = cssText;
  }
}
const displayRE = /(^|;)\s*display\s*:/;
function patchStyle(el, prev, next) {
  const style = el.style;
  const isCssString = isString(next);
  let hasControlledDisplay = false;
  if (next && !isCssString) {
    if (prev) {
      if (!isString(prev)) {
        for (const key in prev) {
          if (next[key] == null) {
            setStyle(style, key, "");
          }
        }
      } else {
        for (const prevStyle of prev.split(";")) {
          const key = prevStyle.slice(0, prevStyle.indexOf(":")).trim();
          if (next[key] == null) {
            setStyle(style, key, "");
          }
        }
      }
    }
    for (const key in next) {
      if (key === "display") {
        hasControlledDisplay = true;
      }
      setStyle(style, key, next[key]);
    }
  } else {
    if (isCssString) {
      if (prev !== next) {
        const cssVarText = style[CSS_VAR_TEXT];
        if (cssVarText) {
          next += ";" + cssVarText;
        }
        style.cssText = next;
        hasControlledDisplay = displayRE.test(next);
      }
    } else if (prev) {
      el.removeAttribute("style");
    }
  }
  if (vShowOriginalDisplay in el) {
    el[vShowOriginalDisplay] = hasControlledDisplay ? style.display : "";
    if (el[vShowHidden]) {
      style.display = "none";
    }
  }
}
const semicolonRE = /[^\\];\s*$/;
const importantRE = /\s*!important$/;
function setStyle(style, name, val) {
  if (isArray(val)) {
    val.forEach((v) => setStyle(style, name, v));
  } else {
    if (val == null) val = "";
    {
      if (semicolonRE.test(val)) {
        warn(
          `Unexpected semicolon at the end of '${name}' style value: '${val}'`
        );
      }
    }
    if (name.startsWith("--")) {
      style.setProperty(name, val);
    } else {
      const prefixed = autoPrefix(style, name);
      if (importantRE.test(val)) {
        style.setProperty(
          hyphenate(prefixed),
          val.replace(importantRE, ""),
          "important"
        );
      } else {
        style[prefixed] = val;
      }
    }
  }
}
const prefixes = ["Webkit", "Moz", "ms"];
const prefixCache = {};
function autoPrefix(style, rawName) {
  const cached = prefixCache[rawName];
  if (cached) {
    return cached;
  }
  let name = camelize(rawName);
  if (name !== "filter" && name in style) {
    return prefixCache[rawName] = name;
  }
  name = capitalize(name);
  for (let i = 0; i < prefixes.length; i++) {
    const prefixed = prefixes[i] + name;
    if (prefixed in style) {
      return prefixCache[rawName] = prefixed;
    }
  }
  return rawName;
}
const xlinkNS = "http://www.w3.org/1999/xlink";
function patchAttr(el, key, value, isSVG, instance, isBoolean2 = isSpecialBooleanAttr(key)) {
  if (isSVG && key.startsWith("xlink:")) {
    if (value == null) {
      el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    if (value == null || isBoolean2 && !includeBooleanAttr(value)) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, isBoolean2 ? "" : String(value));
    }
  }
}
function patchDOMProp(el, key, value, prevChildren, parentComponent, parentSuspense, unmountChildren) {
  if (key === "innerHTML" || key === "textContent") {
    if (prevChildren) {
      unmountChildren(prevChildren, parentComponent, parentSuspense);
    }
    el[key] = value == null ? "" : value;
    return;
  }
  const tag = el.tagName;
  if (key === "value" && tag !== "PROGRESS" && // custom elements may use _value internally
  !tag.includes("-")) {
    const oldValue = tag === "OPTION" ? el.getAttribute("value") || "" : el.value;
    const newValue = value == null ? "" : String(value);
    if (oldValue !== newValue || !("_value" in el)) {
      el.value = newValue;
    }
    if (value == null) {
      el.removeAttribute(key);
    }
    el._value = value;
    return;
  }
  let needRemove = false;
  if (value === "" || value == null) {
    const type = typeof el[key];
    if (type === "boolean") {
      value = includeBooleanAttr(value);
    } else if (value == null && type === "string") {
      value = "";
      needRemove = true;
    } else if (type === "number") {
      value = 0;
      needRemove = true;
    }
  }
  try {
    el[key] = value;
  } catch (e) {
    if (!needRemove) {
      warn(
        `Failed setting prop "${key}" on <${tag.toLowerCase()}>: value ${value} is invalid.`,
        e
      );
    }
  }
  needRemove && el.removeAttribute(key);
}
function addEventListener(el, event, handler, options) {
  el.addEventListener(event, handler, options);
}
function removeEventListener(el, event, handler, options) {
  el.removeEventListener(event, handler, options);
}
const veiKey = Symbol("_vei");
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
  const invokers = el[veiKey] || (el[veiKey] = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = sanitizeEventValue(nextValue, rawName);
  } else {
    const [name, options] = parseName(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker(
        sanitizeEventValue(nextValue, rawName),
        instance
      );
      addEventListener(el, name, invoker, options);
    } else if (existingInvoker) {
      removeEventListener(el, name, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
const optionsModifierRE = /(?:Once|Passive|Capture)$/;
function parseName(name) {
  let options;
  if (optionsModifierRE.test(name)) {
    options = {};
    let m2;
    while (m2 = name.match(optionsModifierRE)) {
      name = name.slice(0, name.length - m2[0].length);
      options[m2[0].toLowerCase()] = true;
    }
  }
  const event = name[2] === ":" ? name.slice(3) : hyphenate(name.slice(2));
  return [event, options];
}
let cachedNow = 0;
const p = /* @__PURE__ */ Promise.resolve();
const getNow = () => cachedNow || (p.then(() => cachedNow = 0), cachedNow = Date.now());
function createInvoker(initialValue, instance) {
  const invoker = (e) => {
    if (!e._vts) {
      e._vts = Date.now();
    } else if (e._vts <= invoker.attached) {
      return;
    }
    callWithAsyncErrorHandling(
      patchStopImmediatePropagation(e, invoker.value),
      instance,
      5,
      [e]
    );
  };
  invoker.value = initialValue;
  invoker.attached = getNow();
  return invoker;
}
function sanitizeEventValue(value, propName) {
  if (isFunction(value) || isArray(value)) {
    return value;
  }
  warn(
    `Wrong type passed as event handler to ${propName} - did you forget @ or : in front of your prop?
Expected function or array of functions, received type ${typeof value}.`
  );
  return NOOP;
}
function patchStopImmediatePropagation(e, value) {
  if (isArray(value)) {
    const originalStop = e.stopImmediatePropagation;
    e.stopImmediatePropagation = () => {
      originalStop.call(e);
      e._stopped = true;
    };
    return value.map(
      (fn) => (e2) => !e2._stopped && fn && fn(e2)
    );
  } else {
    return value;
  }
}
const isNativeOn = (key) => key.charCodeAt(0) === 111 && key.charCodeAt(1) === 110 && // lowercase letter
key.charCodeAt(2) > 96 && key.charCodeAt(2) < 123;
const patchProp = (el, key, prevValue, nextValue, namespace, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
  const isSVG = namespace === "svg";
  if (key === "class") {
    patchClass(el, nextValue, isSVG);
  } else if (key === "style") {
    patchStyle(el, prevValue, nextValue);
  } else if (isOn(key)) {
    if (!isModelListener(key)) {
      patchEvent(el, key, prevValue, nextValue, parentComponent);
    }
  } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) {
    patchDOMProp(
      el,
      key,
      nextValue,
      prevChildren,
      parentComponent,
      parentSuspense,
      unmountChildren
    );
    if (key === "value" || key === "checked" || key === "selected") {
      patchAttr(el, key, nextValue, isSVG, parentComponent, key !== "value");
    }
  } else {
    if (key === "true-value") {
      el._trueValue = nextValue;
    } else if (key === "false-value") {
      el._falseValue = nextValue;
    }
    patchAttr(el, key, nextValue, isSVG);
  }
};
function shouldSetAsProp(el, key, value, isSVG) {
  if (isSVG) {
    if (key === "innerHTML" || key === "textContent") {
      return true;
    }
    if (key in el && isNativeOn(key) && isFunction(value)) {
      return true;
    }
    return false;
  }
  if (key === "spellcheck" || key === "draggable" || key === "translate") {
    return false;
  }
  if (key === "form") {
    return false;
  }
  if (key === "list" && el.tagName === "INPUT") {
    return false;
  }
  if (key === "type" && el.tagName === "TEXTAREA") {
    return false;
  }
  if (key === "width" || key === "height") {
    const tag = el.tagName;
    if (tag === "IMG" || tag === "VIDEO" || tag === "CANVAS" || tag === "SOURCE") {
      return false;
    }
  }
  if (isNativeOn(key) && isString(value)) {
    return false;
  }
  return key in el;
}
/*! #__NO_SIDE_EFFECTS__ */
// @__NO_SIDE_EFFECTS__
function defineCustomElement(options, extraOptions, hydrate2) {
  const Comp = /* @__PURE__ */ defineComponent(options, extraOptions);
  class VueCustomElement extends VueElement {
    constructor(initialProps) {
      super(Comp, initialProps, hydrate2);
    }
  }
  VueCustomElement.def = Comp;
  return VueCustomElement;
}
/*! #__NO_SIDE_EFFECTS__ */
const defineSSRCustomElement = /* @__NO_SIDE_EFFECTS__ */ (options, extraOptions) => {
  return /* @__PURE__ */ defineCustomElement(options, extraOptions, hydrate);
};
const BaseClass = typeof HTMLElement !== "undefined" ? HTMLElement : class {
};
class VueElement extends BaseClass {
  constructor(_def, _props = {}, hydrate2) {
    super();
    this._def = _def;
    this._props = _props;
    this._instance = null;
    this._connected = false;
    this._resolved = false;
    this._numberProps = null;
    this._ob = null;
    if (this.shadowRoot && hydrate2) {
      hydrate2(this._createVNode(), this.shadowRoot);
    } else {
      if (this.shadowRoot) {
        warn(
          `Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use \`defineSSRCustomElement\`.`
        );
      }
      this.attachShadow({ mode: "open" });
      if (!this._def.__asyncLoader) {
        this._resolveProps(this._def);
      }
    }
  }
  connectedCallback() {
    this._connected = true;
    if (!this._instance) {
      if (this._resolved) {
        this._update();
      } else {
        this._resolveDef();
      }
    }
  }
  disconnectedCallback() {
    this._connected = false;
    nextTick(() => {
      if (!this._connected) {
        if (this._ob) {
          this._ob.disconnect();
          this._ob = null;
        }
        render(null, this.shadowRoot);
        this._instance = null;
      }
    });
  }
  /**
   * resolve inner component definition (handle possible async component)
   */
  _resolveDef() {
    this._resolved = true;
    for (let i = 0; i < this.attributes.length; i++) {
      this._setAttr(this.attributes[i].name);
    }
    this._ob = new MutationObserver((mutations) => {
      for (const m2 of mutations) {
        this._setAttr(m2.attributeName);
      }
    });
    this._ob.observe(this, { attributes: true });
    const resolve2 = (def2, isAsync = false) => {
      const { props, styles } = def2;
      let numberProps;
      if (props && !isArray(props)) {
        for (const key in props) {
          const opt = props[key];
          if (opt === Number || opt && opt.type === Number) {
            if (key in this._props) {
              this._props[key] = toNumber(this._props[key]);
            }
            (numberProps || (numberProps = /* @__PURE__ */ Object.create(null)))[camelize(key)] = true;
          }
        }
      }
      this._numberProps = numberProps;
      if (isAsync) {
        this._resolveProps(def2);
      }
      this._applyStyles(styles);
      this._update();
    };
    const asyncDef = this._def.__asyncLoader;
    if (asyncDef) {
      asyncDef().then((def2) => resolve2(def2, true));
    } else {
      resolve2(this._def);
    }
  }
  _resolveProps(def2) {
    const { props } = def2;
    const declaredPropKeys = isArray(props) ? props : Object.keys(props || {});
    for (const key of Object.keys(this)) {
      if (key[0] !== "_" && declaredPropKeys.includes(key)) {
        this._setProp(key, this[key], true, false);
      }
    }
    for (const key of declaredPropKeys.map(camelize)) {
      Object.defineProperty(this, key, {
        get() {
          return this._getProp(key);
        },
        set(val) {
          this._setProp(key, val);
        }
      });
    }
  }
  _setAttr(key) {
    let value = this.hasAttribute(key) ? this.getAttribute(key) : void 0;
    const camelKey = camelize(key);
    if (this._numberProps && this._numberProps[camelKey]) {
      value = toNumber(value);
    }
    this._setProp(camelKey, value, false);
  }
  /**
   * @internal
   */
  _getProp(key) {
    return this._props[key];
  }
  /**
   * @internal
   */
  _setProp(key, val, shouldReflect = true, shouldUpdate = true) {
    if (val !== this._props[key]) {
      this._props[key] = val;
      if (shouldUpdate && this._instance) {
        this._update();
      }
      if (shouldReflect) {
        if (val === true) {
          this.setAttribute(hyphenate(key), "");
        } else if (typeof val === "string" || typeof val === "number") {
          this.setAttribute(hyphenate(key), val + "");
        } else if (!val) {
          this.removeAttribute(hyphenate(key));
        }
      }
    }
  }
  _update() {
    render(this._createVNode(), this.shadowRoot);
  }
  _createVNode() {
    const vnode = createVNode(this._def, extend({}, this._props));
    if (!this._instance) {
      vnode.ce = (instance) => {
        this._instance = instance;
        instance.isCE = true;
        {
          instance.ceReload = (newStyles) => {
            if (this._styles) {
              this._styles.forEach((s) => this.shadowRoot.removeChild(s));
              this._styles.length = 0;
            }
            this._applyStyles(newStyles);
            this._instance = null;
            this._update();
          };
        }
        const dispatch = (event, args) => {
          this.dispatchEvent(
            new CustomEvent(event, {
              detail: args
            })
          );
        };
        instance.emit = (event, ...args) => {
          dispatch(event, args);
          if (hyphenate(event) !== event) {
            dispatch(hyphenate(event), args);
          }
        };
        let parent = this;
        while (parent = parent && (parent.parentNode || parent.host)) {
          if (parent instanceof VueElement) {
            instance.parent = parent._instance;
            instance.provides = parent._instance.provides;
            break;
          }
        }
      };
    }
    return vnode;
  }
  _applyStyles(styles) {
    if (styles) {
      styles.forEach((css) => {
        const s = document.createElement("style");
        s.textContent = css;
        this.shadowRoot.appendChild(s);
        {
          (this._styles || (this._styles = [])).push(s);
        }
      });
    }
  }
}
function useCssModule(name = "$style") {
  {
    const instance = getCurrentInstance();
    if (!instance) {
      warn(`useCssModule must be called inside setup()`);
      return EMPTY_OBJ;
    }
    const modules = instance.type.__cssModules;
    if (!modules) {
      warn(`Current instance does not have CSS modules injected.`);
      return EMPTY_OBJ;
    }
    const mod = modules[name];
    if (!mod) {
      warn(`Current instance does not have CSS module named "${name}".`);
      return EMPTY_OBJ;
    }
    return mod;
  }
}
const positionMap = /* @__PURE__ */ new WeakMap();
const newPositionMap = /* @__PURE__ */ new WeakMap();
const moveCbKey = Symbol("_moveCb");
const enterCbKey = Symbol("_enterCb");
const TransitionGroupImpl = {
  name: "TransitionGroup",
  props: /* @__PURE__ */ extend({}, TransitionPropsValidators, {
    tag: String,
    moveClass: String
  }),
  setup(props, { slots }) {
    const instance = getCurrentInstance();
    const state = useTransitionState();
    let prevChildren;
    let children;
    onUpdated(() => {
      if (!prevChildren.length) {
        return;
      }
      const moveClass = props.moveClass || `${props.name || "v"}-move`;
      if (!hasCSSTransform(
        prevChildren[0].el,
        instance.vnode.el,
        moveClass
      )) {
        return;
      }
      prevChildren.forEach(callPendingCbs);
      prevChildren.forEach(recordPosition);
      const movedChildren = prevChildren.filter(applyTranslation);
      forceReflow();
      movedChildren.forEach((c) => {
        const el = c.el;
        const style = el.style;
        addTransitionClass(el, moveClass);
        style.transform = style.webkitTransform = style.transitionDuration = "";
        const cb = el[moveCbKey] = (e) => {
          if (e && e.target !== el) {
            return;
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener("transitionend", cb);
            el[moveCbKey] = null;
            removeTransitionClass(el, moveClass);
          }
        };
        el.addEventListener("transitionend", cb);
      });
    });
    return () => {
      const rawProps = toRaw(props);
      const cssTransitionProps = resolveTransitionProps(rawProps);
      let tag = rawProps.tag || Fragment;
      prevChildren = [];
      if (children) {
        for (let i = 0; i < children.length; i++) {
          const child = children[i];
          if (child.el && child.el instanceof Element) {
            prevChildren.push(child);
            setTransitionHooks(
              child,
              resolveTransitionHooks(
                child,
                cssTransitionProps,
                state,
                instance
              )
            );
            positionMap.set(
              child,
              child.el.getBoundingClientRect()
            );
          }
        }
      }
      children = slots.default ? getTransitionRawChildren(slots.default()) : [];
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (child.key != null) {
          setTransitionHooks(
            child,
            resolveTransitionHooks(child, cssTransitionProps, state, instance)
          );
        } else {
          warn(`<TransitionGroup> children must be keyed.`);
        }
      }
      return createVNode(tag, null, children);
    };
  }
};
const removeMode = (props) => delete props.mode;
/* @__PURE__ */ removeMode(TransitionGroupImpl.props);
const TransitionGroup = TransitionGroupImpl;
function callPendingCbs(c) {
  const el = c.el;
  if (el[moveCbKey]) {
    el[moveCbKey]();
  }
  if (el[enterCbKey]) {
    el[enterCbKey]();
  }
}
function recordPosition(c) {
  newPositionMap.set(c, c.el.getBoundingClientRect());
}
function applyTranslation(c) {
  const oldPos = positionMap.get(c);
  const newPos = newPositionMap.get(c);
  const dx = oldPos.left - newPos.left;
  const dy = oldPos.top - newPos.top;
  if (dx || dy) {
    const s = c.el.style;
    s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
    s.transitionDuration = "0s";
    return c;
  }
}
function hasCSSTransform(el, root, moveClass) {
  const clone = el.cloneNode();
  const _vtc = el[vtcKey];
  if (_vtc) {
    _vtc.forEach((cls) => {
      cls.split(/\s+/).forEach((c) => c && clone.classList.remove(c));
    });
  }
  moveClass.split(/\s+/).forEach((c) => c && clone.classList.add(c));
  clone.style.display = "none";
  const container = root.nodeType === 1 ? root : root.parentNode;
  container.appendChild(clone);
  const { hasTransform } = getTransitionInfo(clone);
  container.removeChild(clone);
  return hasTransform;
}
const getModelAssigner = (vnode) => {
  const fn = vnode.props["onUpdate:modelValue"] || false;
  return isArray(fn) ? (value) => invokeArrayFns(fn, value) : fn;
};
function onCompositionStart(e) {
  e.target.composing = true;
}
function onCompositionEnd(e) {
  const target = e.target;
  if (target.composing) {
    target.composing = false;
    target.dispatchEvent(new Event("input"));
  }
}
const assignKey = Symbol("_assign");
const vModelText = {
  created(el, { modifiers: { lazy, trim, number } }, vnode) {
    el[assignKey] = getModelAssigner(vnode);
    const castToNumber = number || vnode.props && vnode.props.type === "number";
    addEventListener(el, lazy ? "change" : "input", (e) => {
      if (e.target.composing) return;
      let domValue = el.value;
      if (trim) {
        domValue = domValue.trim();
      }
      if (castToNumber) {
        domValue = looseToNumber(domValue);
      }
      el[assignKey](domValue);
    });
    if (trim) {
      addEventListener(el, "change", () => {
        el.value = el.value.trim();
      });
    }
    if (!lazy) {
      addEventListener(el, "compositionstart", onCompositionStart);
      addEventListener(el, "compositionend", onCompositionEnd);
      addEventListener(el, "change", onCompositionEnd);
    }
  },
  // set value on mounted so it's after min/max for type="range"
  mounted(el, { value }) {
    el.value = value == null ? "" : value;
  },
  beforeUpdate(el, { value, oldValue, modifiers: { lazy, trim, number } }, vnode) {
    el[assignKey] = getModelAssigner(vnode);
    if (el.composing) return;
    const elValue = (number || el.type === "number") && !/^0\d/.test(el.value) ? looseToNumber(el.value) : el.value;
    const newValue = value == null ? "" : value;
    if (elValue === newValue) {
      return;
    }
    if (document.activeElement === el && el.type !== "range") {
      if (lazy && value === oldValue) {
        return;
      }
      if (trim && el.value.trim() === newValue) {
        return;
      }
    }
    el.value = newValue;
  }
};
const vModelCheckbox = {
  // #4096 array checkboxes need to be deep traversed
  deep: true,
  created(el, _, vnode) {
    el[assignKey] = getModelAssigner(vnode);
    addEventListener(el, "change", () => {
      const modelValue = el._modelValue;
      const elementValue = getValue(el);
      const checked = el.checked;
      const assign2 = el[assignKey];
      if (isArray(modelValue)) {
        const index = looseIndexOf(modelValue, elementValue);
        const found = index !== -1;
        if (checked && !found) {
          assign2(modelValue.concat(elementValue));
        } else if (!checked && found) {
          const filtered = [...modelValue];
          filtered.splice(index, 1);
          assign2(filtered);
        }
      } else if (isSet(modelValue)) {
        const cloned = new Set(modelValue);
        if (checked) {
          cloned.add(elementValue);
        } else {
          cloned.delete(elementValue);
        }
        assign2(cloned);
      } else {
        assign2(getCheckboxValue(el, checked));
      }
    });
  },
  // set initial checked on mount to wait for true-value/false-value
  mounted: setChecked,
  beforeUpdate(el, binding, vnode) {
    el[assignKey] = getModelAssigner(vnode);
    setChecked(el, binding, vnode);
  }
};
function setChecked(el, { value, oldValue }, vnode) {
  el._modelValue = value;
  if (isArray(value)) {
    el.checked = looseIndexOf(value, vnode.props.value) > -1;
  } else if (isSet(value)) {
    el.checked = value.has(vnode.props.value);
  } else if (value !== oldValue) {
    el.checked = looseEqual(value, getCheckboxValue(el, true));
  }
}
const vModelRadio = {
  created(el, { value }, vnode) {
    el.checked = looseEqual(value, vnode.props.value);
    el[assignKey] = getModelAssigner(vnode);
    addEventListener(el, "change", () => {
      el[assignKey](getValue(el));
    });
  },
  beforeUpdate(el, { value, oldValue }, vnode) {
    el[assignKey] = getModelAssigner(vnode);
    if (value !== oldValue) {
      el.checked = looseEqual(value, vnode.props.value);
    }
  }
};
const vModelSelect = {
  // <select multiple> value need to be deep traversed
  deep: true,
  created(el, { value, modifiers: { number } }, vnode) {
    const isSetModel = isSet(value);
    addEventListener(el, "change", () => {
      const selectedVal = Array.prototype.filter.call(el.options, (o) => o.selected).map(
        (o) => number ? looseToNumber(getValue(o)) : getValue(o)
      );
      el[assignKey](
        el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]
      );
      el._assigning = true;
      nextTick(() => {
        el._assigning = false;
      });
    });
    el[assignKey] = getModelAssigner(vnode);
  },
  // set value in mounted & updated because <select> relies on its children
  // <option>s.
  mounted(el, { value, modifiers: { number } }) {
    setSelected(el, value);
  },
  beforeUpdate(el, _binding, vnode) {
    el[assignKey] = getModelAssigner(vnode);
  },
  updated(el, { value, modifiers: { number } }) {
    if (!el._assigning) {
      setSelected(el, value);
    }
  }
};
function setSelected(el, value, number) {
  const isMultiple = el.multiple;
  const isArrayValue = isArray(value);
  if (isMultiple && !isArrayValue && !isSet(value)) {
    warn(
      `<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(value).slice(8, -1)}.`
    );
    return;
  }
  for (let i = 0, l = el.options.length; i < l; i++) {
    const option = el.options[i];
    const optionValue = getValue(option);
    if (isMultiple) {
      if (isArrayValue) {
        const optionType = typeof optionValue;
        if (optionType === "string" || optionType === "number") {
          option.selected = value.some((v) => String(v) === String(optionValue));
        } else {
          option.selected = looseIndexOf(value, optionValue) > -1;
        }
      } else {
        option.selected = value.has(optionValue);
      }
    } else if (looseEqual(getValue(option), value)) {
      if (el.selectedIndex !== i) el.selectedIndex = i;
      return;
    }
  }
  if (!isMultiple && el.selectedIndex !== -1) {
    el.selectedIndex = -1;
  }
}
function getValue(el) {
  return "_value" in el ? el._value : el.value;
}
function getCheckboxValue(el, checked) {
  const key = checked ? "_trueValue" : "_falseValue";
  return key in el ? el[key] : checked;
}
const vModelDynamic = {
  created(el, binding, vnode) {
    callModelHook(el, binding, vnode, null, "created");
  },
  mounted(el, binding, vnode) {
    callModelHook(el, binding, vnode, null, "mounted");
  },
  beforeUpdate(el, binding, vnode, prevVNode) {
    callModelHook(el, binding, vnode, prevVNode, "beforeUpdate");
  },
  updated(el, binding, vnode, prevVNode) {
    callModelHook(el, binding, vnode, prevVNode, "updated");
  }
};
function resolveDynamicModel(tagName, type) {
  switch (tagName) {
    case "SELECT":
      return vModelSelect;
    case "TEXTAREA":
      return vModelText;
    default:
      switch (type) {
        case "checkbox":
          return vModelCheckbox;
        case "radio":
          return vModelRadio;
        default:
          return vModelText;
      }
  }
}
function callModelHook(el, binding, vnode, prevVNode, hook) {
  const modelToUse = resolveDynamicModel(
    el.tagName,
    vnode.props && vnode.props.type
  );
  const fn = modelToUse[hook];
  fn && fn(el, binding, vnode, prevVNode);
}
function initVModelForSSR() {
  vModelText.getSSRProps = ({ value }) => ({ value });
  vModelRadio.getSSRProps = ({ value }, vnode) => {
    if (vnode.props && looseEqual(vnode.props.value, value)) {
      return { checked: true };
    }
  };
  vModelCheckbox.getSSRProps = ({ value }, vnode) => {
    if (isArray(value)) {
      if (vnode.props && looseIndexOf(value, vnode.props.value) > -1) {
        return { checked: true };
      }
    } else if (isSet(value)) {
      if (vnode.props && value.has(vnode.props.value)) {
        return { checked: true };
      }
    } else if (value) {
      return { checked: true };
    }
  };
  vModelDynamic.getSSRProps = (binding, vnode) => {
    if (typeof vnode.type !== "string") {
      return;
    }
    const modelToUse = resolveDynamicModel(
      // resolveDynamicModel expects an uppercase tag name, but vnode.type is lowercase
      vnode.type.toUpperCase(),
      vnode.props && vnode.props.type
    );
    if (modelToUse.getSSRProps) {
      return modelToUse.getSSRProps(binding, vnode);
    }
  };
}
const systemModifiers = ["ctrl", "shift", "alt", "meta"];
const modifierGuards = {
  stop: (e) => e.stopPropagation(),
  prevent: (e) => e.preventDefault(),
  self: (e) => e.target !== e.currentTarget,
  ctrl: (e) => !e.ctrlKey,
  shift: (e) => !e.shiftKey,
  alt: (e) => !e.altKey,
  meta: (e) => !e.metaKey,
  left: (e) => "button" in e && e.button !== 0,
  middle: (e) => "button" in e && e.button !== 1,
  right: (e) => "button" in e && e.button !== 2,
  exact: (e, modifiers) => systemModifiers.some((m2) => e[`${m2}Key`] && !modifiers.includes(m2))
};
const withModifiers = (fn, modifiers) => {
  const cache = fn._withMods || (fn._withMods = {});
  const cacheKey = modifiers.join(".");
  return cache[cacheKey] || (cache[cacheKey] = (event, ...args) => {
    for (let i = 0; i < modifiers.length; i++) {
      const guard = modifierGuards[modifiers[i]];
      if (guard && guard(event, modifiers)) return;
    }
    return fn(event, ...args);
  });
};
const keyNames = {
  esc: "escape",
  space: " ",
  up: "arrow-up",
  left: "arrow-left",
  right: "arrow-right",
  down: "arrow-down",
  delete: "backspace"
};
const withKeys = (fn, modifiers) => {
  const cache = fn._withKeys || (fn._withKeys = {});
  const cacheKey = modifiers.join(".");
  return cache[cacheKey] || (cache[cacheKey] = (event) => {
    if (!("key" in event)) {
      return;
    }
    const eventKey = hyphenate(event.key);
    if (modifiers.some((k) => k === eventKey || keyNames[k] === eventKey)) {
      return fn(event);
    }
  });
};
const rendererOptions = /* @__PURE__ */ extend({ patchProp }, nodeOps);
let renderer;
let enabledHydration = false;
function ensureRenderer() {
  return renderer || (renderer = createRenderer(rendererOptions));
}
function ensureHydrationRenderer() {
  renderer = enabledHydration ? renderer : createHydrationRenderer(rendererOptions);
  enabledHydration = true;
  return renderer;
}
const render = (...args) => {
  ensureRenderer().render(...args);
};
const hydrate = (...args) => {
  ensureHydrationRenderer().hydrate(...args);
};
const createApp = (...args) => {
  const app = ensureRenderer().createApp(...args);
  {
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
  }
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (!container) return;
    const component = app._component;
    if (!isFunction(component) && !component.render && !component.template) {
      component.template = container.innerHTML;
    }
    container.innerHTML = "";
    const proxy = mount(container, false, resolveRootNamespace(container));
    if (container instanceof Element) {
      container.removeAttribute("v-cloak");
      container.setAttribute("data-v-app", "");
    }
    return proxy;
  };
  return app;
};
const createSSRApp = (...args) => {
  const app = ensureHydrationRenderer().createApp(...args);
  {
    injectNativeTagCheck(app);
    injectCompilerOptionsCheck(app);
  }
  const { mount } = app;
  app.mount = (containerOrSelector) => {
    const container = normalizeContainer(containerOrSelector);
    if (container) {
      return mount(container, true, resolveRootNamespace(container));
    }
  };
  return app;
};
function resolveRootNamespace(container) {
  if (container instanceof SVGElement) {
    return "svg";
  }
  if (typeof MathMLElement === "function" && container instanceof MathMLElement) {
    return "mathml";
  }
}
function injectNativeTagCheck(app) {
  Object.defineProperty(app.config, "isNativeTag", {
    value: (tag) => isHTMLTag(tag) || isSVGTag(tag) || isMathMLTag(tag),
    writable: false
  });
}
function injectCompilerOptionsCheck(app) {
  if (isRuntimeOnly()) {
    const isCustomElement = app.config.isCustomElement;
    Object.defineProperty(app.config, "isCustomElement", {
      get() {
        return isCustomElement;
      },
      set() {
        warn(
          `The \`isCustomElement\` config option is deprecated. Use \`compilerOptions.isCustomElement\` instead.`
        );
      }
    });
    const compilerOptions = app.config.compilerOptions;
    const msg = `The \`compilerOptions\` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, \`compilerOptions\` must be passed to \`@vue/compiler-dom\` in the build setup instead.
- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.
- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader
- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite-plugin-vue/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-sfc`;
    Object.defineProperty(app.config, "compilerOptions", {
      get() {
        warn(msg);
        return compilerOptions;
      },
      set() {
        warn(msg);
      }
    });
  }
}
function normalizeContainer(container) {
  if (isString(container)) {
    const res = document.querySelector(container);
    if (!res) {
      warn(
        `Failed to mount app: mount target selector "${container}" returned null.`
      );
    }
    return res;
  }
  if (window.ShadowRoot && container instanceof window.ShadowRoot && container.mode === "closed") {
    warn(
      `mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`
    );
  }
  return container;
}
let ssrDirectiveInitialized = false;
const initDirectivesForSSR = () => {
  if (!ssrDirectiveInitialized) {
    ssrDirectiveInitialized = true;
    initVModelForSSR();
    initVShowForSSR();
  }
};
const runtimeDom = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  BaseTransition,
  BaseTransitionPropsValidators,
  Comment,
  DeprecationTypes,
  EffectScope,
  ErrorCodes,
  ErrorTypeStrings,
  Fragment,
  KeepAlive,
  ReactiveEffect,
  Static,
  Suspense,
  Teleport,
  Text,
  TrackOpTypes,
  Transition,
  TransitionGroup,
  TriggerOpTypes,
  VueElement,
  assertNumber,
  callWithAsyncErrorHandling,
  callWithErrorHandling,
  camelize,
  capitalize,
  cloneVNode,
  compatUtils,
  computed,
  createApp,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createElementVNode: createBaseVNode,
  createHydrationRenderer,
  createPropsRestProxy,
  createRenderer,
  createSSRApp,
  createSlots,
  createStaticVNode,
  createTextVNode,
  createVNode,
  customRef,
  defineAsyncComponent,
  defineComponent,
  defineCustomElement,
  defineEmits,
  defineExpose,
  defineModel,
  defineOptions,
  defineProps,
  defineSSRCustomElement,
  defineSlots,
  devtools,
  effect,
  effectScope,
  getCurrentInstance,
  getCurrentScope,
  getTransitionRawChildren,
  guardReactiveProps,
  h,
  handleError,
  hasInjectionContext,
  hydrate,
  initCustomFormatter,
  initDirectivesForSSR,
  inject,
  isMemoSame,
  isProxy,
  isReactive,
  isReadonly,
  isRef,
  isRuntimeOnly,
  isShallow,
  isVNode,
  markRaw,
  mergeDefaults,
  mergeModels,
  mergeProps,
  nextTick,
  normalizeClass,
  normalizeProps,
  normalizeStyle,
  onActivated,
  onBeforeMount,
  onBeforeUnmount,
  onBeforeUpdate,
  onDeactivated,
  onErrorCaptured,
  onMounted,
  onRenderTracked,
  onRenderTriggered,
  onScopeDispose,
  onServerPrefetch,
  onUnmounted,
  onUpdated,
  openBlock,
  popScopeId,
  provide,
  proxyRefs,
  pushScopeId,
  queuePostFlushCb,
  reactive,
  readonly,
  ref,
  registerRuntimeCompiler,
  render,
  renderList,
  renderSlot,
  resolveComponent,
  resolveDirective,
  resolveDynamicComponent,
  resolveFilter,
  resolveTransitionHooks,
  setBlockTracking,
  setDevtoolsHook,
  setTransitionHooks,
  shallowReactive,
  shallowReadonly,
  shallowRef,
  ssrContextKey,
  ssrUtils,
  stop,
  toDisplayString,
  toHandlerKey,
  toHandlers,
  toRaw,
  toRef,
  toRefs,
  toValue,
  transformVNodeArgs,
  triggerRef,
  unref,
  useAttrs,
  useCssModule,
  useCssVars,
  useModel,
  useSSRContext,
  useSlots,
  useTransitionState,
  vModelCheckbox,
  vModelDynamic,
  vModelRadio,
  vModelSelect,
  vModelText,
  vShow,
  version,
  warn,
  watch,
  watchEffect,
  watchPostEffect,
  watchSyncEffect,
  withAsyncContext,
  withCtx,
  withDefaults,
  withDirectives,
  withKeys,
  withMemo,
  withModifiers,
  withScopeId
}, Symbol.toStringTag, { value: "Module" }));
/**
* @vue/compiler-core v3.4.29
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
const FRAGMENT = Symbol(`Fragment`);
const TELEPORT = Symbol(`Teleport`);
const SUSPENSE = Symbol(`Suspense`);
const KEEP_ALIVE = Symbol(`KeepAlive`);
const BASE_TRANSITION = Symbol(`BaseTransition`);
const OPEN_BLOCK = Symbol(`openBlock`);
const CREATE_BLOCK = Symbol(`createBlock`);
const CREATE_ELEMENT_BLOCK = Symbol(`createElementBlock`);
const CREATE_VNODE = Symbol(`createVNode`);
const CREATE_ELEMENT_VNODE = Symbol(`createElementVNode`);
const CREATE_COMMENT = Symbol(`createCommentVNode`);
const CREATE_TEXT = Symbol(`createTextVNode`);
const CREATE_STATIC = Symbol(`createStaticVNode`);
const RESOLVE_COMPONENT = Symbol(`resolveComponent`);
const RESOLVE_DYNAMIC_COMPONENT = Symbol(
  `resolveDynamicComponent`
);
const RESOLVE_DIRECTIVE = Symbol(`resolveDirective`);
const RESOLVE_FILTER = Symbol(`resolveFilter`);
const WITH_DIRECTIVES = Symbol(`withDirectives`);
const RENDER_LIST = Symbol(`renderList`);
const RENDER_SLOT = Symbol(`renderSlot`);
const CREATE_SLOTS = Symbol(`createSlots`);
const TO_DISPLAY_STRING = Symbol(`toDisplayString`);
const MERGE_PROPS = Symbol(`mergeProps`);
const NORMALIZE_CLASS = Symbol(`normalizeClass`);
const NORMALIZE_STYLE = Symbol(`normalizeStyle`);
const NORMALIZE_PROPS = Symbol(`normalizeProps`);
const GUARD_REACTIVE_PROPS = Symbol(`guardReactiveProps`);
const TO_HANDLERS = Symbol(`toHandlers`);
const CAMELIZE = Symbol(`camelize`);
const CAPITALIZE = Symbol(`capitalize`);
const TO_HANDLER_KEY = Symbol(`toHandlerKey`);
const SET_BLOCK_TRACKING = Symbol(`setBlockTracking`);
const PUSH_SCOPE_ID = Symbol(`pushScopeId`);
const POP_SCOPE_ID = Symbol(`popScopeId`);
const WITH_CTX = Symbol(`withCtx`);
const UNREF = Symbol(`unref`);
const IS_REF = Symbol(`isRef`);
const WITH_MEMO = Symbol(`withMemo`);
const IS_MEMO_SAME = Symbol(`isMemoSame`);
const helperNameMap = {
  [FRAGMENT]: `Fragment`,
  [TELEPORT]: `Teleport`,
  [SUSPENSE]: `Suspense`,
  [KEEP_ALIVE]: `KeepAlive`,
  [BASE_TRANSITION]: `BaseTransition`,
  [OPEN_BLOCK]: `openBlock`,
  [CREATE_BLOCK]: `createBlock`,
  [CREATE_ELEMENT_BLOCK]: `createElementBlock`,
  [CREATE_VNODE]: `createVNode`,
  [CREATE_ELEMENT_VNODE]: `createElementVNode`,
  [CREATE_COMMENT]: `createCommentVNode`,
  [CREATE_TEXT]: `createTextVNode`,
  [CREATE_STATIC]: `createStaticVNode`,
  [RESOLVE_COMPONENT]: `resolveComponent`,
  [RESOLVE_DYNAMIC_COMPONENT]: `resolveDynamicComponent`,
  [RESOLVE_DIRECTIVE]: `resolveDirective`,
  [RESOLVE_FILTER]: `resolveFilter`,
  [WITH_DIRECTIVES]: `withDirectives`,
  [RENDER_LIST]: `renderList`,
  [RENDER_SLOT]: `renderSlot`,
  [CREATE_SLOTS]: `createSlots`,
  [TO_DISPLAY_STRING]: `toDisplayString`,
  [MERGE_PROPS]: `mergeProps`,
  [NORMALIZE_CLASS]: `normalizeClass`,
  [NORMALIZE_STYLE]: `normalizeStyle`,
  [NORMALIZE_PROPS]: `normalizeProps`,
  [GUARD_REACTIVE_PROPS]: `guardReactiveProps`,
  [TO_HANDLERS]: `toHandlers`,
  [CAMELIZE]: `camelize`,
  [CAPITALIZE]: `capitalize`,
  [TO_HANDLER_KEY]: `toHandlerKey`,
  [SET_BLOCK_TRACKING]: `setBlockTracking`,
  [PUSH_SCOPE_ID]: `pushScopeId`,
  [POP_SCOPE_ID]: `popScopeId`,
  [WITH_CTX]: `withCtx`,
  [UNREF]: `unref`,
  [IS_REF]: `isRef`,
  [WITH_MEMO]: `withMemo`,
  [IS_MEMO_SAME]: `isMemoSame`
};
function registerRuntimeHelpers(helpers) {
  Object.getOwnPropertySymbols(helpers).forEach((s) => {
    helperNameMap[s] = helpers[s];
  });
}
const locStub = {
  start: { line: 1, column: 1, offset: 0 },
  end: { line: 1, column: 1, offset: 0 },
  source: ""
};
function createRoot(children, source = "") {
  return {
    type: 0,
    source,
    children,
    helpers: /* @__PURE__ */ new Set(),
    components: [],
    directives: [],
    hoists: [],
    imports: [],
    cached: 0,
    temps: 0,
    codegenNode: void 0,
    loc: locStub
  };
}
function createVNodeCall(context, tag, props, children, patchFlag, dynamicProps, directives, isBlock = false, disableTracking = false, isComponent2 = false, loc = locStub) {
  if (context) {
    if (isBlock) {
      context.helper(OPEN_BLOCK);
      context.helper(getVNodeBlockHelper(context.inSSR, isComponent2));
    } else {
      context.helper(getVNodeHelper(context.inSSR, isComponent2));
    }
    if (directives) {
      context.helper(WITH_DIRECTIVES);
    }
  }
  return {
    type: 13,
    tag,
    props,
    children,
    patchFlag,
    dynamicProps,
    directives,
    isBlock,
    disableTracking,
    isComponent: isComponent2,
    loc
  };
}
function createArrayExpression(elements, loc = locStub) {
  return {
    type: 17,
    loc,
    elements
  };
}
function createObjectExpression(properties, loc = locStub) {
  return {
    type: 15,
    loc,
    properties
  };
}
function createObjectProperty(key, value) {
  return {
    type: 16,
    loc: locStub,
    key: isString(key) ? createSimpleExpression(key, true) : key,
    value
  };
}
function createSimpleExpression(content, isStatic = false, loc = locStub, constType = 0) {
  return {
    type: 4,
    loc,
    content,
    isStatic,
    constType: isStatic ? 3 : constType
  };
}
function createCompoundExpression(children, loc = locStub) {
  return {
    type: 8,
    loc,
    children
  };
}
function createCallExpression(callee, args = [], loc = locStub) {
  return {
    type: 14,
    loc,
    callee,
    arguments: args
  };
}
function createFunctionExpression(params, returns = void 0, newline = false, isSlot = false, loc = locStub) {
  return {
    type: 18,
    params,
    returns,
    newline,
    isSlot,
    loc
  };
}
function createConditionalExpression(test, consequent, alternate, newline = true) {
  return {
    type: 19,
    test,
    consequent,
    alternate,
    newline,
    loc: locStub
  };
}
function createCacheExpression(index, value, isVNode2 = false) {
  return {
    type: 20,
    index,
    value,
    isVNode: isVNode2,
    loc: locStub
  };
}
function createBlockStatement(body) {
  return {
    type: 21,
    body,
    loc: locStub
  };
}
function getVNodeHelper(ssr, isComponent2) {
  return ssr || isComponent2 ? CREATE_VNODE : CREATE_ELEMENT_VNODE;
}
function getVNodeBlockHelper(ssr, isComponent2) {
  return ssr || isComponent2 ? CREATE_BLOCK : CREATE_ELEMENT_BLOCK;
}
function convertToBlock(node, { helper, removeHelper, inSSR }) {
  if (!node.isBlock) {
    node.isBlock = true;
    removeHelper(getVNodeHelper(inSSR, node.isComponent));
    helper(OPEN_BLOCK);
    helper(getVNodeBlockHelper(inSSR, node.isComponent));
  }
}
const defaultDelimitersOpen = new Uint8Array([123, 123]);
const defaultDelimitersClose = new Uint8Array([125, 125]);
function isTagStartChar(c) {
  return c >= 97 && c <= 122 || c >= 65 && c <= 90;
}
function isWhitespace(c) {
  return c === 32 || c === 10 || c === 9 || c === 12 || c === 13;
}
function isEndOfTagSection(c) {
  return c === 47 || c === 62 || isWhitespace(c);
}
function toCharCodes(str) {
  const ret = new Uint8Array(str.length);
  for (let i = 0; i < str.length; i++) {
    ret[i] = str.charCodeAt(i);
  }
  return ret;
}
const Sequences = {
  Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),
  // CDATA[
  CdataEnd: new Uint8Array([93, 93, 62]),
  // ]]>
  CommentEnd: new Uint8Array([45, 45, 62]),
  // `-->`
  ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),
  // `<\/script`
  StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),
  // `</style`
  TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101]),
  // `</title`
  TextareaEnd: new Uint8Array([
    60,
    47,
    116,
    101,
    120,
    116,
    97,
    114,
    101,
    97
  ])
  // `</textarea
};
class Tokenizer {
  constructor(stack2, cbs) {
    this.stack = stack2;
    this.cbs = cbs;
    this.state = 1;
    this.buffer = "";
    this.sectionStart = 0;
    this.index = 0;
    this.entityStart = 0;
    this.baseState = 1;
    this.inRCDATA = false;
    this.inXML = false;
    this.inVPre = false;
    this.newlines = [];
    this.mode = 0;
    this.delimiterOpen = defaultDelimitersOpen;
    this.delimiterClose = defaultDelimitersClose;
    this.delimiterIndex = -1;
    this.currentSequence = void 0;
    this.sequenceIndex = 0;
  }
  get inSFCRoot() {
    return this.mode === 2 && this.stack.length === 0;
  }
  reset() {
    this.state = 1;
    this.mode = 0;
    this.buffer = "";
    this.sectionStart = 0;
    this.index = 0;
    this.baseState = 1;
    this.inRCDATA = false;
    this.currentSequence = void 0;
    this.newlines.length = 0;
    this.delimiterOpen = defaultDelimitersOpen;
    this.delimiterClose = defaultDelimitersClose;
  }
  /**
   * Generate Position object with line / column information using recorded
   * newline positions. We know the index is always going to be an already
   * processed index, so all the newlines up to this index should have been
   * recorded.
   */
  getPos(index) {
    let line = 1;
    let column = index + 1;
    for (let i = this.newlines.length - 1; i >= 0; i--) {
      const newlineIndex = this.newlines[i];
      if (index > newlineIndex) {
        line = i + 2;
        column = index - newlineIndex;
        break;
      }
    }
    return {
      column,
      line,
      offset: index
    };
  }
  peek() {
    return this.buffer.charCodeAt(this.index + 1);
  }
  stateText(c) {
    if (c === 60) {
      if (this.index > this.sectionStart) {
        this.cbs.ontext(this.sectionStart, this.index);
      }
      this.state = 5;
      this.sectionStart = this.index;
    } else if (!this.inVPre && c === this.delimiterOpen[0]) {
      this.state = 2;
      this.delimiterIndex = 0;
      this.stateInterpolationOpen(c);
    }
  }
  stateInterpolationOpen(c) {
    if (c === this.delimiterOpen[this.delimiterIndex]) {
      if (this.delimiterIndex === this.delimiterOpen.length - 1) {
        const start = this.index + 1 - this.delimiterOpen.length;
        if (start > this.sectionStart) {
          this.cbs.ontext(this.sectionStart, start);
        }
        this.state = 3;
        this.sectionStart = start;
      } else {
        this.delimiterIndex++;
      }
    } else if (this.inRCDATA) {
      this.state = 32;
      this.stateInRCDATA(c);
    } else {
      this.state = 1;
      this.stateText(c);
    }
  }
  stateInterpolation(c) {
    if (c === this.delimiterClose[0]) {
      this.state = 4;
      this.delimiterIndex = 0;
      this.stateInterpolationClose(c);
    }
  }
  stateInterpolationClose(c) {
    if (c === this.delimiterClose[this.delimiterIndex]) {
      if (this.delimiterIndex === this.delimiterClose.length - 1) {
        this.cbs.oninterpolation(this.sectionStart, this.index + 1);
        if (this.inRCDATA) {
          this.state = 32;
        } else {
          this.state = 1;
        }
        this.sectionStart = this.index + 1;
      } else {
        this.delimiterIndex++;
      }
    } else {
      this.state = 3;
      this.stateInterpolation(c);
    }
  }
  stateSpecialStartSequence(c) {
    const isEnd = this.sequenceIndex === this.currentSequence.length;
    const isMatch = isEnd ? (
      // If we are at the end of the sequence, make sure the tag name has ended
      isEndOfTagSection(c)
    ) : (
      // Otherwise, do a case-insensitive comparison
      (c | 32) === this.currentSequence[this.sequenceIndex]
    );
    if (!isMatch) {
      this.inRCDATA = false;
    } else if (!isEnd) {
      this.sequenceIndex++;
      return;
    }
    this.sequenceIndex = 0;
    this.state = 6;
    this.stateInTagName(c);
  }
  /** Look for an end tag. For <title> and <textarea>, also decode entities. */
  stateInRCDATA(c) {
    if (this.sequenceIndex === this.currentSequence.length) {
      if (c === 62 || isWhitespace(c)) {
        const endOfText = this.index - this.currentSequence.length;
        if (this.sectionStart < endOfText) {
          const actualIndex = this.index;
          this.index = endOfText;
          this.cbs.ontext(this.sectionStart, endOfText);
          this.index = actualIndex;
        }
        this.sectionStart = endOfText + 2;
        this.stateInClosingTagName(c);
        this.inRCDATA = false;
        return;
      }
      this.sequenceIndex = 0;
    }
    if ((c | 32) === this.currentSequence[this.sequenceIndex]) {
      this.sequenceIndex += 1;
    } else if (this.sequenceIndex === 0) {
      if (this.currentSequence === Sequences.TitleEnd || this.currentSequence === Sequences.TextareaEnd && !this.inSFCRoot) {
        if (c === this.delimiterOpen[0]) {
          this.state = 2;
          this.delimiterIndex = 0;
          this.stateInterpolationOpen(c);
        }
      } else if (this.fastForwardTo(60)) {
        this.sequenceIndex = 1;
      }
    } else {
      this.sequenceIndex = Number(c === 60);
    }
  }
  stateCDATASequence(c) {
    if (c === Sequences.Cdata[this.sequenceIndex]) {
      if (++this.sequenceIndex === Sequences.Cdata.length) {
        this.state = 28;
        this.currentSequence = Sequences.CdataEnd;
        this.sequenceIndex = 0;
        this.sectionStart = this.index + 1;
      }
    } else {
      this.sequenceIndex = 0;
      this.state = 23;
      this.stateInDeclaration(c);
    }
  }
  /**
   * When we wait for one specific character, we can speed things up
   * by skipping through the buffer until we find it.
   *
   * @returns Whether the character was found.
   */
  fastForwardTo(c) {
    while (++this.index < this.buffer.length) {
      const cc = this.buffer.charCodeAt(this.index);
      if (cc === 10) {
        this.newlines.push(this.index);
      }
      if (cc === c) {
        return true;
      }
    }
    this.index = this.buffer.length - 1;
    return false;
  }
  /**
   * Comments and CDATA end with `-->` and `]]>`.
   *
   * Their common qualities are:
   * - Their end sequences have a distinct character they start with.
   * - That character is then repeated, so we have to check multiple repeats.
   * - All characters but the start character of the sequence can be skipped.
   */
  stateInCommentLike(c) {
    if (c === this.currentSequence[this.sequenceIndex]) {
      if (++this.sequenceIndex === this.currentSequence.length) {
        if (this.currentSequence === Sequences.CdataEnd) {
          this.cbs.oncdata(this.sectionStart, this.index - 2);
        } else {
          this.cbs.oncomment(this.sectionStart, this.index - 2);
        }
        this.sequenceIndex = 0;
        this.sectionStart = this.index + 1;
        this.state = 1;
      }
    } else if (this.sequenceIndex === 0) {
      if (this.fastForwardTo(this.currentSequence[0])) {
        this.sequenceIndex = 1;
      }
    } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {
      this.sequenceIndex = 0;
    }
  }
  startSpecial(sequence, offset2) {
    this.enterRCDATA(sequence, offset2);
    this.state = 31;
  }
  enterRCDATA(sequence, offset2) {
    this.inRCDATA = true;
    this.currentSequence = sequence;
    this.sequenceIndex = offset2;
  }
  stateBeforeTagName(c) {
    if (c === 33) {
      this.state = 22;
      this.sectionStart = this.index + 1;
    } else if (c === 63) {
      this.state = 24;
      this.sectionStart = this.index + 1;
    } else if (isTagStartChar(c)) {
      this.sectionStart = this.index;
      if (this.mode === 0) {
        this.state = 6;
      } else if (this.inSFCRoot) {
        this.state = 34;
      } else if (!this.inXML) {
        if (c === 116) {
          this.state = 30;
        } else {
          this.state = c === 115 ? 29 : 6;
        }
      } else {
        this.state = 6;
      }
    } else if (c === 47) {
      this.state = 8;
    } else {
      this.state = 1;
      this.stateText(c);
    }
  }
  stateInTagName(c) {
    if (isEndOfTagSection(c)) {
      this.handleTagName(c);
    }
  }
  stateInSFCRootTagName(c) {
    if (isEndOfTagSection(c)) {
      const tag = this.buffer.slice(this.sectionStart, this.index);
      if (tag !== "template") {
        this.enterRCDATA(toCharCodes(`</` + tag), 0);
      }
      this.handleTagName(c);
    }
  }
  handleTagName(c) {
    this.cbs.onopentagname(this.sectionStart, this.index);
    this.sectionStart = -1;
    this.state = 11;
    this.stateBeforeAttrName(c);
  }
  stateBeforeClosingTagName(c) {
    if (isWhitespace(c)) ;
    else if (c === 62) {
      {
        this.cbs.onerr(14, this.index);
      }
      this.state = 1;
      this.sectionStart = this.index + 1;
    } else {
      this.state = isTagStartChar(c) ? 9 : 27;
      this.sectionStart = this.index;
    }
  }
  stateInClosingTagName(c) {
    if (c === 62 || isWhitespace(c)) {
      this.cbs.onclosetag(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.state = 10;
      this.stateAfterClosingTagName(c);
    }
  }
  stateAfterClosingTagName(c) {
    if (c === 62) {
      this.state = 1;
      this.sectionStart = this.index + 1;
    }
  }
  stateBeforeAttrName(c) {
    if (c === 62) {
      this.cbs.onopentagend(this.index);
      if (this.inRCDATA) {
        this.state = 32;
      } else {
        this.state = 1;
      }
      this.sectionStart = this.index + 1;
    } else if (c === 47) {
      this.state = 7;
      if (this.peek() !== 62) {
        this.cbs.onerr(22, this.index);
      }
    } else if (c === 60 && this.peek() === 47) {
      this.cbs.onopentagend(this.index);
      this.state = 5;
      this.sectionStart = this.index;
    } else if (!isWhitespace(c)) {
      if (c === 61) {
        this.cbs.onerr(
          19,
          this.index
        );
      }
      this.handleAttrStart(c);
    }
  }
  handleAttrStart(c) {
    if (c === 118 && this.peek() === 45) {
      this.state = 13;
      this.sectionStart = this.index;
    } else if (c === 46 || c === 58 || c === 64 || c === 35) {
      this.cbs.ondirname(this.index, this.index + 1);
      this.state = 14;
      this.sectionStart = this.index + 1;
    } else {
      this.state = 12;
      this.sectionStart = this.index;
    }
  }
  stateInSelfClosingTag(c) {
    if (c === 62) {
      this.cbs.onselfclosingtag(this.index);
      this.state = 1;
      this.sectionStart = this.index + 1;
      this.inRCDATA = false;
    } else if (!isWhitespace(c)) {
      this.state = 11;
      this.stateBeforeAttrName(c);
    }
  }
  stateInAttrName(c) {
    if (c === 61 || isEndOfTagSection(c)) {
      this.cbs.onattribname(this.sectionStart, this.index);
      this.handleAttrNameEnd(c);
    } else if (c === 34 || c === 39 || c === 60) {
      this.cbs.onerr(
        17,
        this.index
      );
    }
  }
  stateInDirName(c) {
    if (c === 61 || isEndOfTagSection(c)) {
      this.cbs.ondirname(this.sectionStart, this.index);
      this.handleAttrNameEnd(c);
    } else if (c === 58) {
      this.cbs.ondirname(this.sectionStart, this.index);
      this.state = 14;
      this.sectionStart = this.index + 1;
    } else if (c === 46) {
      this.cbs.ondirname(this.sectionStart, this.index);
      this.state = 16;
      this.sectionStart = this.index + 1;
    }
  }
  stateInDirArg(c) {
    if (c === 61 || isEndOfTagSection(c)) {
      this.cbs.ondirarg(this.sectionStart, this.index);
      this.handleAttrNameEnd(c);
    } else if (c === 91) {
      this.state = 15;
    } else if (c === 46) {
      this.cbs.ondirarg(this.sectionStart, this.index);
      this.state = 16;
      this.sectionStart = this.index + 1;
    }
  }
  stateInDynamicDirArg(c) {
    if (c === 93) {
      this.state = 14;
    } else if (c === 61 || isEndOfTagSection(c)) {
      this.cbs.ondirarg(this.sectionStart, this.index + 1);
      this.handleAttrNameEnd(c);
      {
        this.cbs.onerr(
          27,
          this.index
        );
      }
    }
  }
  stateInDirModifier(c) {
    if (c === 61 || isEndOfTagSection(c)) {
      this.cbs.ondirmodifier(this.sectionStart, this.index);
      this.handleAttrNameEnd(c);
    } else if (c === 46) {
      this.cbs.ondirmodifier(this.sectionStart, this.index);
      this.sectionStart = this.index + 1;
    }
  }
  handleAttrNameEnd(c) {
    this.sectionStart = this.index;
    this.state = 17;
    this.cbs.onattribnameend(this.index);
    this.stateAfterAttrName(c);
  }
  stateAfterAttrName(c) {
    if (c === 61) {
      this.state = 18;
    } else if (c === 47 || c === 62) {
      this.cbs.onattribend(0, this.sectionStart);
      this.sectionStart = -1;
      this.state = 11;
      this.stateBeforeAttrName(c);
    } else if (!isWhitespace(c)) {
      this.cbs.onattribend(0, this.sectionStart);
      this.handleAttrStart(c);
    }
  }
  stateBeforeAttrValue(c) {
    if (c === 34) {
      this.state = 19;
      this.sectionStart = this.index + 1;
    } else if (c === 39) {
      this.state = 20;
      this.sectionStart = this.index + 1;
    } else if (!isWhitespace(c)) {
      this.sectionStart = this.index;
      this.state = 21;
      this.stateInAttrValueNoQuotes(c);
    }
  }
  handleInAttrValue(c, quote) {
    if (c === quote || this.fastForwardTo(quote)) {
      this.cbs.onattribdata(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.cbs.onattribend(
        quote === 34 ? 3 : 2,
        this.index + 1
      );
      this.state = 11;
    }
  }
  stateInAttrValueDoubleQuotes(c) {
    this.handleInAttrValue(c, 34);
  }
  stateInAttrValueSingleQuotes(c) {
    this.handleInAttrValue(c, 39);
  }
  stateInAttrValueNoQuotes(c) {
    if (isWhitespace(c) || c === 62) {
      this.cbs.onattribdata(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.cbs.onattribend(1, this.index);
      this.state = 11;
      this.stateBeforeAttrName(c);
    } else if (c === 34 || c === 39 || c === 60 || c === 61 || c === 96) {
      this.cbs.onerr(
        18,
        this.index
      );
    } else ;
  }
  stateBeforeDeclaration(c) {
    if (c === 91) {
      this.state = 26;
      this.sequenceIndex = 0;
    } else {
      this.state = c === 45 ? 25 : 23;
    }
  }
  stateInDeclaration(c) {
    if (c === 62 || this.fastForwardTo(62)) {
      this.state = 1;
      this.sectionStart = this.index + 1;
    }
  }
  stateInProcessingInstruction(c) {
    if (c === 62 || this.fastForwardTo(62)) {
      this.cbs.onprocessinginstruction(this.sectionStart, this.index);
      this.state = 1;
      this.sectionStart = this.index + 1;
    }
  }
  stateBeforeComment(c) {
    if (c === 45) {
      this.state = 28;
      this.currentSequence = Sequences.CommentEnd;
      this.sequenceIndex = 2;
      this.sectionStart = this.index + 1;
    } else {
      this.state = 23;
    }
  }
  stateInSpecialComment(c) {
    if (c === 62 || this.fastForwardTo(62)) {
      this.cbs.oncomment(this.sectionStart, this.index);
      this.state = 1;
      this.sectionStart = this.index + 1;
    }
  }
  stateBeforeSpecialS(c) {
    if (c === Sequences.ScriptEnd[3]) {
      this.startSpecial(Sequences.ScriptEnd, 4);
    } else if (c === Sequences.StyleEnd[3]) {
      this.startSpecial(Sequences.StyleEnd, 4);
    } else {
      this.state = 6;
      this.stateInTagName(c);
    }
  }
  stateBeforeSpecialT(c) {
    if (c === Sequences.TitleEnd[3]) {
      this.startSpecial(Sequences.TitleEnd, 4);
    } else if (c === Sequences.TextareaEnd[3]) {
      this.startSpecial(Sequences.TextareaEnd, 4);
    } else {
      this.state = 6;
      this.stateInTagName(c);
    }
  }
  startEntity() {
  }
  stateInEntity() {
  }
  /**
   * Iterates through the buffer, calling the function corresponding to the current state.
   *
   * States that are more likely to be hit are higher up, as a performance improvement.
   */
  parse(input) {
    this.buffer = input;
    while (this.index < this.buffer.length) {
      const c = this.buffer.charCodeAt(this.index);
      if (c === 10) {
        this.newlines.push(this.index);
      }
      switch (this.state) {
        case 1: {
          this.stateText(c);
          break;
        }
        case 2: {
          this.stateInterpolationOpen(c);
          break;
        }
        case 3: {
          this.stateInterpolation(c);
          break;
        }
        case 4: {
          this.stateInterpolationClose(c);
          break;
        }
        case 31: {
          this.stateSpecialStartSequence(c);
          break;
        }
        case 32: {
          this.stateInRCDATA(c);
          break;
        }
        case 26: {
          this.stateCDATASequence(c);
          break;
        }
        case 19: {
          this.stateInAttrValueDoubleQuotes(c);
          break;
        }
        case 12: {
          this.stateInAttrName(c);
          break;
        }
        case 13: {
          this.stateInDirName(c);
          break;
        }
        case 14: {
          this.stateInDirArg(c);
          break;
        }
        case 15: {
          this.stateInDynamicDirArg(c);
          break;
        }
        case 16: {
          this.stateInDirModifier(c);
          break;
        }
        case 28: {
          this.stateInCommentLike(c);
          break;
        }
        case 27: {
          this.stateInSpecialComment(c);
          break;
        }
        case 11: {
          this.stateBeforeAttrName(c);
          break;
        }
        case 6: {
          this.stateInTagName(c);
          break;
        }
        case 34: {
          this.stateInSFCRootTagName(c);
          break;
        }
        case 9: {
          this.stateInClosingTagName(c);
          break;
        }
        case 5: {
          this.stateBeforeTagName(c);
          break;
        }
        case 17: {
          this.stateAfterAttrName(c);
          break;
        }
        case 20: {
          this.stateInAttrValueSingleQuotes(c);
          break;
        }
        case 18: {
          this.stateBeforeAttrValue(c);
          break;
        }
        case 8: {
          this.stateBeforeClosingTagName(c);
          break;
        }
        case 10: {
          this.stateAfterClosingTagName(c);
          break;
        }
        case 29: {
          this.stateBeforeSpecialS(c);
          break;
        }
        case 30: {
          this.stateBeforeSpecialT(c);
          break;
        }
        case 21: {
          this.stateInAttrValueNoQuotes(c);
          break;
        }
        case 7: {
          this.stateInSelfClosingTag(c);
          break;
        }
        case 23: {
          this.stateInDeclaration(c);
          break;
        }
        case 22: {
          this.stateBeforeDeclaration(c);
          break;
        }
        case 25: {
          this.stateBeforeComment(c);
          break;
        }
        case 24: {
          this.stateInProcessingInstruction(c);
          break;
        }
        case 33: {
          this.stateInEntity();
          break;
        }
      }
      this.index++;
    }
    this.cleanup();
    this.finish();
  }
  /**
   * Remove data that has already been consumed from the buffer.
   */
  cleanup() {
    if (this.sectionStart !== this.index) {
      if (this.state === 1 || this.state === 32 && this.sequenceIndex === 0) {
        this.cbs.ontext(this.sectionStart, this.index);
        this.sectionStart = this.index;
      } else if (this.state === 19 || this.state === 20 || this.state === 21) {
        this.cbs.onattribdata(this.sectionStart, this.index);
        this.sectionStart = this.index;
      }
    }
  }
  finish() {
    this.handleTrailingData();
    this.cbs.onend();
  }
  /** Handle any trailing data. */
  handleTrailingData() {
    const endIndex = this.buffer.length;
    if (this.sectionStart >= endIndex) {
      return;
    }
    if (this.state === 28) {
      if (this.currentSequence === Sequences.CdataEnd) {
        this.cbs.oncdata(this.sectionStart, endIndex);
      } else {
        this.cbs.oncomment(this.sectionStart, endIndex);
      }
    } else if (this.state === 6 || this.state === 11 || this.state === 18 || this.state === 17 || this.state === 12 || this.state === 13 || this.state === 14 || this.state === 15 || this.state === 16 || this.state === 20 || this.state === 19 || this.state === 21 || this.state === 9) ;
    else {
      this.cbs.ontext(this.sectionStart, endIndex);
    }
  }
  emitCodePoint(cp, consumed) {
  }
}
const deprecationData = {
  ["COMPILER_IS_ON_ELEMENT"]: {
    message: `Platform-native elements with "is" prop will no longer be treated as components in Vue 3 unless the "is" value is explicitly prefixed with "vue:".`,
    link: `https://v3-migration.vuejs.org/breaking-changes/custom-elements-interop.html`
  },
  ["COMPILER_V_BIND_SYNC"]: {
    message: (key) => `.sync modifier for v-bind has been removed. Use v-model with argument instead. \`v-bind:${key}.sync\` should be changed to \`v-model:${key}\`.`,
    link: `https://v3-migration.vuejs.org/breaking-changes/v-model.html`
  },
  ["COMPILER_V_BIND_OBJECT_ORDER"]: {
    message: `v-bind="obj" usage is now order sensitive and behaves like JavaScript object spread: it will now overwrite an existing non-mergeable attribute that appears before v-bind in the case of conflict. To retain 2.x behavior, move v-bind to make it the first attribute. You can also suppress this warning if the usage is intended.`,
    link: `https://v3-migration.vuejs.org/breaking-changes/v-bind.html`
  },
  ["COMPILER_V_ON_NATIVE"]: {
    message: `.native modifier for v-on has been removed as is no longer necessary.`,
    link: `https://v3-migration.vuejs.org/breaking-changes/v-on-native-modifier-removed.html`
  },
  ["COMPILER_V_IF_V_FOR_PRECEDENCE"]: {
    message: `v-if / v-for precedence when used on the same element has changed in Vue 3: v-if now takes higher precedence and will no longer have access to v-for scope variables. It is best to avoid the ambiguity with <template> tags or use a computed property that filters v-for data source.`,
    link: `https://v3-migration.vuejs.org/breaking-changes/v-if-v-for.html`
  },
  ["COMPILER_NATIVE_TEMPLATE"]: {
    message: `<template> with no special directives will render as a native template element instead of its inner content in Vue 3.`
  },
  ["COMPILER_INLINE_TEMPLATE"]: {
    message: `"inline-template" has been removed in Vue 3.`,
    link: `https://v3-migration.vuejs.org/breaking-changes/inline-template-attribute.html`
  },
  ["COMPILER_FILTERS"]: {
    message: `filters have been removed in Vue 3. The "|" symbol will be treated as native JavaScript bitwise OR operator. Use method calls or computed properties instead.`,
    link: `https://v3-migration.vuejs.org/breaking-changes/filters.html`
  }
};
function getCompatValue(key, { compatConfig }) {
  const value = compatConfig && compatConfig[key];
  if (key === "MODE") {
    return value || 3;
  } else {
    return value;
  }
}
function isCompatEnabled(key, context) {
  const mode = getCompatValue("MODE", context);
  const value = getCompatValue(key, context);
  return mode === 3 ? value === true : value !== false;
}
function checkCompatEnabled(key, context, loc, ...args) {
  const enabled = isCompatEnabled(key, context);
  if (enabled) {
    warnDeprecation(key, context, loc, ...args);
  }
  return enabled;
}
function warnDeprecation(key, context, loc, ...args) {
  const val = getCompatValue(key, context);
  if (val === "suppress-warning") {
    return;
  }
  const { message, link } = deprecationData[key];
  const msg = `(deprecation ${key}) ${typeof message === "function" ? message(...args) : message}${link ? `
  Details: ${link}` : ``}`;
  const err = new SyntaxError(msg);
  err.code = key;
  if (loc) err.loc = loc;
  context.onWarn(err);
}
function defaultOnError(error) {
  throw error;
}
function defaultOnWarn(msg) {
  console.warn(`[Vue warn] ${msg.message}`);
}
function createCompilerError(code, loc, messages, additionalMessage) {
  const msg = (messages || errorMessages)[code] + (additionalMessage || ``);
  const error = new SyntaxError(String(msg));
  error.code = code;
  error.loc = loc;
  return error;
}
const errorMessages = {
  // parse errors
  [0]: "Illegal comment.",
  [1]: "CDATA section is allowed only in XML context.",
  [2]: "Duplicate attribute.",
  [3]: "End tag cannot have attributes.",
  [4]: "Illegal '/' in tags.",
  [5]: "Unexpected EOF in tag.",
  [6]: "Unexpected EOF in CDATA section.",
  [7]: "Unexpected EOF in comment.",
  [8]: "Unexpected EOF in script.",
  [9]: "Unexpected EOF in tag.",
  [10]: "Incorrectly closed comment.",
  [11]: "Incorrectly opened comment.",
  [12]: "Illegal tag name. Use '&lt;' to print '<'.",
  [13]: "Attribute value was expected.",
  [14]: "End tag name was expected.",
  [15]: "Whitespace was expected.",
  [16]: "Unexpected '<!--' in comment.",
  [17]: `Attribute name cannot contain U+0022 ("), U+0027 ('), and U+003C (<).`,
  [18]: "Unquoted attribute value cannot contain U+0022 (\"), U+0027 ('), U+003C (<), U+003D (=), and U+0060 (`).",
  [19]: "Attribute name cannot start with '='.",
  [21]: "'<?' is allowed only in XML context.",
  [20]: `Unexpected null character.`,
  [22]: "Illegal '/' in tags.",
  // Vue-specific parse errors
  [23]: "Invalid end tag.",
  [24]: "Element is missing end tag.",
  [25]: "Interpolation end sign was not found.",
  [27]: "End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.",
  [26]: "Legal directive name was expected.",
  // transform errors
  [28]: `v-if/v-else-if is missing expression.`,
  [29]: `v-if/else branches must use unique keys.`,
  [30]: `v-else/v-else-if has no adjacent v-if or v-else-if.`,
  [31]: `v-for is missing expression.`,
  [32]: `v-for has invalid expression.`,
  [33]: `<template v-for> key should be placed on the <template> tag.`,
  [34]: `v-bind is missing expression.`,
  [52]: `v-bind with same-name shorthand only allows static argument.`,
  [35]: `v-on is missing expression.`,
  [36]: `Unexpected custom directive on <slot> outlet.`,
  [37]: `Mixed v-slot usage on both the component and nested <template>. When there are multiple named slots, all slots should use <template> syntax to avoid scope ambiguity.`,
  [38]: `Duplicate slot names found. `,
  [39]: `Extraneous children found when component already has explicitly named default slot. These children will be ignored.`,
  [40]: `v-slot can only be used on components or <template> tags.`,
  [41]: `v-model is missing expression.`,
  [42]: `v-model value must be a valid JavaScript member expression.`,
  [43]: `v-model cannot be used on v-for or v-slot scope variables because they are not writable.`,
  [44]: `v-model cannot be used on a prop, because local prop bindings are not writable.
Use a v-bind binding combined with a v-on listener that emits update:x event instead.`,
  [45]: `Error parsing JavaScript expression: `,
  [46]: `<KeepAlive> expects exactly one child component.`,
  [51]: `@vnode-* hooks in templates are no longer supported. Use the vue: prefix instead. For example, @vnode-mounted should be changed to @vue:mounted. @vnode-* hooks support has been removed in 3.4.`,
  // generic errors
  [47]: `"prefixIdentifiers" option is not supported in this build of compiler.`,
  [48]: `ES module mode is not supported in this build of compiler.`,
  [49]: `"cacheHandlers" option is only supported when the "prefixIdentifiers" option is enabled.`,
  [50]: `"scopeId" option is only supported in module mode.`,
  // just to fulfill types
  [53]: ``
};
const isStaticExp = (p2) => p2.type === 4 && p2.isStatic;
function isCoreComponent(tag) {
  switch (tag) {
    case "Teleport":
    case "teleport":
      return TELEPORT;
    case "Suspense":
    case "suspense":
      return SUSPENSE;
    case "KeepAlive":
    case "keep-alive":
      return KEEP_ALIVE;
    case "BaseTransition":
    case "base-transition":
      return BASE_TRANSITION;
  }
}
const nonIdentifierRE = /^\d|[^\$\w\xA0-\uFFFF]/;
const isSimpleIdentifier = (name) => !nonIdentifierRE.test(name);
const validFirstIdentCharRE = /[A-Za-z_$\xA0-\uFFFF]/;
const validIdentCharRE = /[\.\?\w$\xA0-\uFFFF]/;
const whitespaceRE = /\s+[.[]\s*|\s*[.[]\s+/g;
const isMemberExpressionBrowser = (path) => {
  path = path.trim().replace(whitespaceRE, (s) => s.trim());
  let state = 0;
  let stateStack = [];
  let currentOpenBracketCount = 0;
  let currentOpenParensCount = 0;
  let currentStringType = null;
  for (let i = 0; i < path.length; i++) {
    const char = path.charAt(i);
    switch (state) {
      case 0:
        if (char === "[") {
          stateStack.push(state);
          state = 1;
          currentOpenBracketCount++;
        } else if (char === "(") {
          stateStack.push(state);
          state = 2;
          currentOpenParensCount++;
        } else if (!(i === 0 ? validFirstIdentCharRE : validIdentCharRE).test(char)) {
          return false;
        }
        break;
      case 1:
        if (char === `'` || char === `"` || char === "`") {
          stateStack.push(state);
          state = 3;
          currentStringType = char;
        } else if (char === `[`) {
          currentOpenBracketCount++;
        } else if (char === `]`) {
          if (!--currentOpenBracketCount) {
            state = stateStack.pop();
          }
        }
        break;
      case 2:
        if (char === `'` || char === `"` || char === "`") {
          stateStack.push(state);
          state = 3;
          currentStringType = char;
        } else if (char === `(`) {
          currentOpenParensCount++;
        } else if (char === `)`) {
          if (i === path.length - 1) {
            return false;
          }
          if (!--currentOpenParensCount) {
            state = stateStack.pop();
          }
        }
        break;
      case 3:
        if (char === currentStringType) {
          state = stateStack.pop();
          currentStringType = null;
        }
        break;
    }
  }
  return !currentOpenBracketCount && !currentOpenParensCount;
};
const isMemberExpression = isMemberExpressionBrowser;
function assert(condition, msg) {
  if (!condition) {
    throw new Error(msg || `unexpected compiler condition`);
  }
}
function findDir(node, name, allowEmpty = false) {
  for (let i = 0; i < node.props.length; i++) {
    const p2 = node.props[i];
    if (p2.type === 7 && (allowEmpty || p2.exp) && (isString(name) ? p2.name === name : name.test(p2.name))) {
      return p2;
    }
  }
}
function findProp(node, name, dynamicOnly = false, allowEmpty = false) {
  for (let i = 0; i < node.props.length; i++) {
    const p2 = node.props[i];
    if (p2.type === 6) {
      if (dynamicOnly) continue;
      if (p2.name === name && (p2.value || allowEmpty)) {
        return p2;
      }
    } else if (p2.name === "bind" && (p2.exp || allowEmpty) && isStaticArgOf(p2.arg, name)) {
      return p2;
    }
  }
}
function isStaticArgOf(arg, name) {
  return !!(arg && isStaticExp(arg) && arg.content === name);
}
function hasDynamicKeyVBind(node) {
  return node.props.some(
    (p2) => p2.type === 7 && p2.name === "bind" && (!p2.arg || // v-bind="obj"
    p2.arg.type !== 4 || // v-bind:[_ctx.foo]
    !p2.arg.isStatic)
    // v-bind:[foo]
  );
}
function isText$1(node) {
  return node.type === 5 || node.type === 2;
}
function isVSlot(p2) {
  return p2.type === 7 && p2.name === "slot";
}
function isTemplateNode(node) {
  return node.type === 1 && node.tagType === 3;
}
function isSlotOutlet(node) {
  return node.type === 1 && node.tagType === 2;
}
const propsHelperSet = /* @__PURE__ */ new Set([NORMALIZE_PROPS, GUARD_REACTIVE_PROPS]);
function getUnnormalizedProps(props, callPath = []) {
  if (props && !isString(props) && props.type === 14) {
    const callee = props.callee;
    if (!isString(callee) && propsHelperSet.has(callee)) {
      return getUnnormalizedProps(
        props.arguments[0],
        callPath.concat(props)
      );
    }
  }
  return [props, callPath];
}
function injectProp(node, prop, context) {
  let propsWithInjection;
  let props = node.type === 13 ? node.props : node.arguments[2];
  let callPath = [];
  let parentCall;
  if (props && !isString(props) && props.type === 14) {
    const ret = getUnnormalizedProps(props);
    props = ret[0];
    callPath = ret[1];
    parentCall = callPath[callPath.length - 1];
  }
  if (props == null || isString(props)) {
    propsWithInjection = createObjectExpression([prop]);
  } else if (props.type === 14) {
    const first = props.arguments[0];
    if (!isString(first) && first.type === 15) {
      if (!hasProp(prop, first)) {
        first.properties.unshift(prop);
      }
    } else {
      if (props.callee === TO_HANDLERS) {
        propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
          createObjectExpression([prop]),
          props
        ]);
      } else {
        props.arguments.unshift(createObjectExpression([prop]));
      }
    }
    !propsWithInjection && (propsWithInjection = props);
  } else if (props.type === 15) {
    if (!hasProp(prop, props)) {
      props.properties.unshift(prop);
    }
    propsWithInjection = props;
  } else {
    propsWithInjection = createCallExpression(context.helper(MERGE_PROPS), [
      createObjectExpression([prop]),
      props
    ]);
    if (parentCall && parentCall.callee === GUARD_REACTIVE_PROPS) {
      parentCall = callPath[callPath.length - 2];
    }
  }
  if (node.type === 13) {
    if (parentCall) {
      parentCall.arguments[0] = propsWithInjection;
    } else {
      node.props = propsWithInjection;
    }
  } else {
    if (parentCall) {
      parentCall.arguments[0] = propsWithInjection;
    } else {
      node.arguments[2] = propsWithInjection;
    }
  }
}
function hasProp(prop, props) {
  let result = false;
  if (prop.key.type === 4) {
    const propKeyName = prop.key.content;
    result = props.properties.some(
      (p2) => p2.key.type === 4 && p2.key.content === propKeyName
    );
  }
  return result;
}
function toValidAssetId(name, type) {
  return `_${type}_${name.replace(/[^\w]/g, (searchValue, replaceValue) => {
    return searchValue === "-" ? "_" : name.charCodeAt(replaceValue).toString();
  })}`;
}
function getMemoedVNodeCall(node) {
  if (node.type === 14 && node.callee === WITH_MEMO) {
    return node.arguments[1].returns;
  } else {
    return node;
  }
}
const forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+(\S[\s\S]*)/;
const defaultParserOptions = {
  parseMode: "base",
  ns: 0,
  delimiters: [`{{`, `}}`],
  getNamespace: () => 0,
  isVoidTag: NO,
  isPreTag: NO,
  isCustomElement: NO,
  onError: defaultOnError,
  onWarn: defaultOnWarn,
  comments: true,
  prefixIdentifiers: false
};
let currentOptions = defaultParserOptions;
let currentRoot = null;
let currentInput = "";
let currentOpenTag = null;
let currentProp = null;
let currentAttrValue = "";
let currentAttrStartIndex = -1;
let currentAttrEndIndex = -1;
let inPre = 0;
let inVPre = false;
let currentVPreBoundary = null;
const stack = [];
const tokenizer = new Tokenizer(stack, {
  onerr: emitError,
  ontext(start, end) {
    onText(getSlice(start, end), start, end);
  },
  ontextentity(char, start, end) {
    onText(char, start, end);
  },
  oninterpolation(start, end) {
    if (inVPre) {
      return onText(getSlice(start, end), start, end);
    }
    let innerStart = start + tokenizer.delimiterOpen.length;
    let innerEnd = end - tokenizer.delimiterClose.length;
    while (isWhitespace(currentInput.charCodeAt(innerStart))) {
      innerStart++;
    }
    while (isWhitespace(currentInput.charCodeAt(innerEnd - 1))) {
      innerEnd--;
    }
    let exp = getSlice(innerStart, innerEnd);
    if (exp.includes("&")) {
      {
        exp = currentOptions.decodeEntities(exp, false);
      }
    }
    addNode({
      type: 5,
      content: createExp(exp, false, getLoc(innerStart, innerEnd)),
      loc: getLoc(start, end)
    });
  },
  onopentagname(start, end) {
    const name = getSlice(start, end);
    currentOpenTag = {
      type: 1,
      tag: name,
      ns: currentOptions.getNamespace(name, stack[0], currentOptions.ns),
      tagType: 0,
      // will be refined on tag close
      props: [],
      children: [],
      loc: getLoc(start - 1, end),
      codegenNode: void 0
    };
  },
  onopentagend(end) {
    endOpenTag(end);
  },
  onclosetag(start, end) {
    const name = getSlice(start, end);
    if (!currentOptions.isVoidTag(name)) {
      let found = false;
      for (let i = 0; i < stack.length; i++) {
        const e = stack[i];
        if (e.tag.toLowerCase() === name.toLowerCase()) {
          found = true;
          if (i > 0) {
            emitError(24, stack[0].loc.start.offset);
          }
          for (let j = 0; j <= i; j++) {
            const el = stack.shift();
            onCloseTag(el, end, j < i);
          }
          break;
        }
      }
      if (!found) {
        emitError(23, backTrack(start, 60));
      }
    }
  },
  onselfclosingtag(end) {
    const name = currentOpenTag.tag;
    currentOpenTag.isSelfClosing = true;
    endOpenTag(end);
    if (stack[0] && stack[0].tag === name) {
      onCloseTag(stack.shift(), end);
    }
  },
  onattribname(start, end) {
    currentProp = {
      type: 6,
      name: getSlice(start, end),
      nameLoc: getLoc(start, end),
      value: void 0,
      loc: getLoc(start)
    };
  },
  ondirname(start, end) {
    const raw = getSlice(start, end);
    const name = raw === "." || raw === ":" ? "bind" : raw === "@" ? "on" : raw === "#" ? "slot" : raw.slice(2);
    if (!inVPre && name === "") {
      emitError(26, start);
    }
    if (inVPre || name === "") {
      currentProp = {
        type: 6,
        name: raw,
        nameLoc: getLoc(start, end),
        value: void 0,
        loc: getLoc(start)
      };
    } else {
      currentProp = {
        type: 7,
        name,
        rawName: raw,
        exp: void 0,
        arg: void 0,
        modifiers: raw === "." ? ["prop"] : [],
        loc: getLoc(start)
      };
      if (name === "pre") {
        inVPre = tokenizer.inVPre = true;
        currentVPreBoundary = currentOpenTag;
        const props = currentOpenTag.props;
        for (let i = 0; i < props.length; i++) {
          if (props[i].type === 7) {
            props[i] = dirToAttr(props[i]);
          }
        }
      }
    }
  },
  ondirarg(start, end) {
    if (start === end) return;
    const arg = getSlice(start, end);
    if (inVPre) {
      currentProp.name += arg;
      setLocEnd(currentProp.nameLoc, end);
    } else {
      const isStatic = arg[0] !== `[`;
      currentProp.arg = createExp(
        isStatic ? arg : arg.slice(1, -1),
        isStatic,
        getLoc(start, end),
        isStatic ? 3 : 0
      );
    }
  },
  ondirmodifier(start, end) {
    const mod = getSlice(start, end);
    if (inVPre) {
      currentProp.name += "." + mod;
      setLocEnd(currentProp.nameLoc, end);
    } else if (currentProp.name === "slot") {
      const arg = currentProp.arg;
      if (arg) {
        arg.content += "." + mod;
        setLocEnd(arg.loc, end);
      }
    } else {
      currentProp.modifiers.push(mod);
    }
  },
  onattribdata(start, end) {
    currentAttrValue += getSlice(start, end);
    if (currentAttrStartIndex < 0) currentAttrStartIndex = start;
    currentAttrEndIndex = end;
  },
  onattribentity(char, start, end) {
    currentAttrValue += char;
    if (currentAttrStartIndex < 0) currentAttrStartIndex = start;
    currentAttrEndIndex = end;
  },
  onattribnameend(end) {
    const start = currentProp.loc.start.offset;
    const name = getSlice(start, end);
    if (currentProp.type === 7) {
      currentProp.rawName = name;
    }
    if (currentOpenTag.props.some(
      (p2) => (p2.type === 7 ? p2.rawName : p2.name) === name
    )) {
      emitError(2, start);
    }
  },
  onattribend(quote, end) {
    if (currentOpenTag && currentProp) {
      setLocEnd(currentProp.loc, end);
      if (quote !== 0) {
        if (currentAttrValue.includes("&")) {
          currentAttrValue = currentOptions.decodeEntities(
            currentAttrValue,
            true
          );
        }
        if (currentProp.type === 6) {
          if (currentProp.name === "class") {
            currentAttrValue = condense(currentAttrValue).trim();
          }
          if (quote === 1 && !currentAttrValue) {
            emitError(13, end);
          }
          currentProp.value = {
            type: 2,
            content: currentAttrValue,
            loc: quote === 1 ? getLoc(currentAttrStartIndex, currentAttrEndIndex) : getLoc(currentAttrStartIndex - 1, currentAttrEndIndex + 1)
          };
          if (tokenizer.inSFCRoot && currentOpenTag.tag === "template" && currentProp.name === "lang" && currentAttrValue && currentAttrValue !== "html") {
            tokenizer.enterRCDATA(toCharCodes(`</template`), 0);
          }
        } else {
          let expParseMode = 0;
          currentProp.exp = createExp(
            currentAttrValue,
            false,
            getLoc(currentAttrStartIndex, currentAttrEndIndex),
            0,
            expParseMode
          );
          if (currentProp.name === "for") {
            currentProp.forParseResult = parseForExpression(currentProp.exp);
          }
          let syncIndex = -1;
          if (currentProp.name === "bind" && (syncIndex = currentProp.modifiers.indexOf("sync")) > -1 && checkCompatEnabled(
            "COMPILER_V_BIND_SYNC",
            currentOptions,
            currentProp.loc,
            currentProp.rawName
          )) {
            currentProp.name = "model";
            currentProp.modifiers.splice(syncIndex, 1);
          }
        }
      }
      if (currentProp.type !== 7 || currentProp.name !== "pre") {
        currentOpenTag.props.push(currentProp);
      }
    }
    currentAttrValue = "";
    currentAttrStartIndex = currentAttrEndIndex = -1;
  },
  oncomment(start, end) {
    if (currentOptions.comments) {
      addNode({
        type: 3,
        content: getSlice(start, end),
        loc: getLoc(start - 4, end + 3)
      });
    }
  },
  onend() {
    const end = currentInput.length;
    if (tokenizer.state !== 1) {
      switch (tokenizer.state) {
        case 5:
        case 8:
          emitError(5, end);
          break;
        case 3:
        case 4:
          emitError(
            25,
            tokenizer.sectionStart
          );
          break;
        case 28:
          if (tokenizer.currentSequence === Sequences.CdataEnd) {
            emitError(6, end);
          } else {
            emitError(7, end);
          }
          break;
        case 6:
        case 7:
        case 9:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
          emitError(9, end);
          break;
      }
    }
    for (let index = 0; index < stack.length; index++) {
      onCloseTag(stack[index], end - 1);
      emitError(24, stack[index].loc.start.offset);
    }
  },
  oncdata(start, end) {
    if (stack[0].ns !== 0) {
      onText(getSlice(start, end), start, end);
    } else {
      emitError(1, start - 9);
    }
  },
  onprocessinginstruction(start) {
    if ((stack[0] ? stack[0].ns : currentOptions.ns) === 0) {
      emitError(
        21,
        start - 1
      );
    }
  }
});
const forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
const stripParensRE = /^\(|\)$/g;
function parseForExpression(input) {
  const loc = input.loc;
  const exp = input.content;
  const inMatch = exp.match(forAliasRE);
  if (!inMatch) return;
  const [, LHS, RHS] = inMatch;
  const createAliasExpression = (content, offset2, asParam = false) => {
    const start = loc.start.offset + offset2;
    const end = start + content.length;
    return createExp(
      content,
      false,
      getLoc(start, end),
      0,
      asParam ? 1 : 0
      /* Normal */
    );
  };
  const result = {
    source: createAliasExpression(RHS.trim(), exp.indexOf(RHS, LHS.length)),
    value: void 0,
    key: void 0,
    index: void 0,
    finalized: false
  };
  let valueContent = LHS.trim().replace(stripParensRE, "").trim();
  const trimmedOffset = LHS.indexOf(valueContent);
  const iteratorMatch = valueContent.match(forIteratorRE);
  if (iteratorMatch) {
    valueContent = valueContent.replace(forIteratorRE, "").trim();
    const keyContent = iteratorMatch[1].trim();
    let keyOffset;
    if (keyContent) {
      keyOffset = exp.indexOf(keyContent, trimmedOffset + valueContent.length);
      result.key = createAliasExpression(keyContent, keyOffset, true);
    }
    if (iteratorMatch[2]) {
      const indexContent = iteratorMatch[2].trim();
      if (indexContent) {
        result.index = createAliasExpression(
          indexContent,
          exp.indexOf(
            indexContent,
            result.key ? keyOffset + keyContent.length : trimmedOffset + valueContent.length
          ),
          true
        );
      }
    }
  }
  if (valueContent) {
    result.value = createAliasExpression(valueContent, trimmedOffset, true);
  }
  return result;
}
function getSlice(start, end) {
  return currentInput.slice(start, end);
}
function endOpenTag(end) {
  if (tokenizer.inSFCRoot) {
    currentOpenTag.innerLoc = getLoc(end + 1, end + 1);
  }
  addNode(currentOpenTag);
  const { tag, ns } = currentOpenTag;
  if (ns === 0 && currentOptions.isPreTag(tag)) {
    inPre++;
  }
  if (currentOptions.isVoidTag(tag)) {
    onCloseTag(currentOpenTag, end);
  } else {
    stack.unshift(currentOpenTag);
    if (ns === 1 || ns === 2) {
      tokenizer.inXML = true;
    }
  }
  currentOpenTag = null;
}
function onText(content, start, end) {
  {
    const tag = stack[0] && stack[0].tag;
    if (tag !== "script" && tag !== "style" && content.includes("&")) {
      content = currentOptions.decodeEntities(content, false);
    }
  }
  const parent = stack[0] || currentRoot;
  const lastNode = parent.children[parent.children.length - 1];
  if (lastNode && lastNode.type === 2) {
    lastNode.content += content;
    setLocEnd(lastNode.loc, end);
  } else {
    parent.children.push({
      type: 2,
      content,
      loc: getLoc(start, end)
    });
  }
}
function onCloseTag(el, end, isImplied = false) {
  if (isImplied) {
    setLocEnd(el.loc, backTrack(end, 60));
  } else {
    setLocEnd(el.loc, lookAhead(end, 62) + 1);
  }
  if (tokenizer.inSFCRoot) {
    if (el.children.length) {
      el.innerLoc.end = extend({}, el.children[el.children.length - 1].loc.end);
    } else {
      el.innerLoc.end = extend({}, el.innerLoc.start);
    }
    el.innerLoc.source = getSlice(
      el.innerLoc.start.offset,
      el.innerLoc.end.offset
    );
  }
  const { tag, ns } = el;
  if (!inVPre) {
    if (tag === "slot") {
      el.tagType = 2;
    } else if (isFragmentTemplate(el)) {
      el.tagType = 3;
    } else if (isComponent(el)) {
      el.tagType = 1;
    }
  }
  if (!tokenizer.inRCDATA) {
    el.children = condenseWhitespace(el.children, el.tag);
  }
  if (ns === 0 && currentOptions.isPreTag(tag)) {
    inPre--;
  }
  if (currentVPreBoundary === el) {
    inVPre = tokenizer.inVPre = false;
    currentVPreBoundary = null;
  }
  if (tokenizer.inXML && (stack[0] ? stack[0].ns : currentOptions.ns) === 0) {
    tokenizer.inXML = false;
  }
  {
    const props = el.props;
    if (isCompatEnabled(
      "COMPILER_V_IF_V_FOR_PRECEDENCE",
      currentOptions
    )) {
      let hasIf = false;
      let hasFor = false;
      for (let i = 0; i < props.length; i++) {
        const p2 = props[i];
        if (p2.type === 7) {
          if (p2.name === "if") {
            hasIf = true;
          } else if (p2.name === "for") {
            hasFor = true;
          }
        }
        if (hasIf && hasFor) {
          warnDeprecation(
            "COMPILER_V_IF_V_FOR_PRECEDENCE",
            currentOptions,
            el.loc
          );
          break;
        }
      }
    }
    if (!tokenizer.inSFCRoot && isCompatEnabled(
      "COMPILER_NATIVE_TEMPLATE",
      currentOptions
    ) && el.tag === "template" && !isFragmentTemplate(el)) {
      warnDeprecation(
        "COMPILER_NATIVE_TEMPLATE",
        currentOptions,
        el.loc
      );
      const parent = stack[0] || currentRoot;
      const index = parent.children.indexOf(el);
      parent.children.splice(index, 1, ...el.children);
    }
    const inlineTemplateProp = props.find(
      (p2) => p2.type === 6 && p2.name === "inline-template"
    );
    if (inlineTemplateProp && checkCompatEnabled(
      "COMPILER_INLINE_TEMPLATE",
      currentOptions,
      inlineTemplateProp.loc
    ) && el.children.length) {
      inlineTemplateProp.value = {
        type: 2,
        content: getSlice(
          el.children[0].loc.start.offset,
          el.children[el.children.length - 1].loc.end.offset
        ),
        loc: inlineTemplateProp.loc
      };
    }
  }
}
function lookAhead(index, c) {
  let i = index;
  while (currentInput.charCodeAt(i) !== c && i < currentInput.length - 1) i++;
  return i;
}
function backTrack(index, c) {
  let i = index;
  while (currentInput.charCodeAt(i) !== c && i >= 0) i--;
  return i;
}
const specialTemplateDir = /* @__PURE__ */ new Set(["if", "else", "else-if", "for", "slot"]);
function isFragmentTemplate({ tag, props }) {
  if (tag === "template") {
    for (let i = 0; i < props.length; i++) {
      if (props[i].type === 7 && specialTemplateDir.has(props[i].name)) {
        return true;
      }
    }
  }
  return false;
}
function isComponent({ tag, props }) {
  if (currentOptions.isCustomElement(tag)) {
    return false;
  }
  if (tag === "component" || isUpperCase(tag.charCodeAt(0)) || isCoreComponent(tag) || currentOptions.isBuiltInComponent && currentOptions.isBuiltInComponent(tag) || currentOptions.isNativeTag && !currentOptions.isNativeTag(tag)) {
    return true;
  }
  for (let i = 0; i < props.length; i++) {
    const p2 = props[i];
    if (p2.type === 6) {
      if (p2.name === "is" && p2.value) {
        if (p2.value.content.startsWith("vue:")) {
          return true;
        } else if (checkCompatEnabled(
          "COMPILER_IS_ON_ELEMENT",
          currentOptions,
          p2.loc
        )) {
          return true;
        }
      }
    } else if (
      // :is on plain element - only treat as component in compat mode
      p2.name === "bind" && isStaticArgOf(p2.arg, "is") && checkCompatEnabled(
        "COMPILER_IS_ON_ELEMENT",
        currentOptions,
        p2.loc
      )
    ) {
      return true;
    }
  }
  return false;
}
function isUpperCase(c) {
  return c > 64 && c < 91;
}
const windowsNewlineRE = /\r\n/g;
function condenseWhitespace(nodes, tag) {
  const shouldCondense = currentOptions.whitespace !== "preserve";
  let removedWhitespace = false;
  for (let i = 0; i < nodes.length; i++) {
    const node = nodes[i];
    if (node.type === 2) {
      if (!inPre) {
        if (isAllWhitespace(node.content)) {
          const prev = nodes[i - 1] && nodes[i - 1].type;
          const next = nodes[i + 1] && nodes[i + 1].type;
          if (!prev || !next || shouldCondense && (prev === 3 && (next === 3 || next === 1) || prev === 1 && (next === 3 || next === 1 && hasNewlineChar(node.content)))) {
            removedWhitespace = true;
            nodes[i] = null;
          } else {
            node.content = " ";
          }
        } else if (shouldCondense) {
          node.content = condense(node.content);
        }
      } else {
        node.content = node.content.replace(windowsNewlineRE, "\n");
      }
    }
  }
  if (inPre && tag && currentOptions.isPreTag(tag)) {
    const first = nodes[0];
    if (first && first.type === 2) {
      first.content = first.content.replace(/^\r?\n/, "");
    }
  }
  return removedWhitespace ? nodes.filter(Boolean) : nodes;
}
function isAllWhitespace(str) {
  for (let i = 0; i < str.length; i++) {
    if (!isWhitespace(str.charCodeAt(i))) {
      return false;
    }
  }
  return true;
}
function hasNewlineChar(str) {
  for (let i = 0; i < str.length; i++) {
    const c = str.charCodeAt(i);
    if (c === 10 || c === 13) {
      return true;
    }
  }
  return false;
}
function condense(str) {
  let ret = "";
  let prevCharIsWhitespace = false;
  for (let i = 0; i < str.length; i++) {
    if (isWhitespace(str.charCodeAt(i))) {
      if (!prevCharIsWhitespace) {
        ret += " ";
        prevCharIsWhitespace = true;
      }
    } else {
      ret += str[i];
      prevCharIsWhitespace = false;
    }
  }
  return ret;
}
function addNode(node) {
  (stack[0] || currentRoot).children.push(node);
}
function getLoc(start, end) {
  return {
    start: tokenizer.getPos(start),
    // @ts-expect-error allow late attachment
    end: end == null ? end : tokenizer.getPos(end),
    // @ts-expect-error allow late attachment
    source: end == null ? end : getSlice(start, end)
  };
}
function setLocEnd(loc, end) {
  loc.end = tokenizer.getPos(end);
  loc.source = getSlice(loc.start.offset, end);
}
function dirToAttr(dir) {
  const attr = {
    type: 6,
    name: dir.rawName,
    nameLoc: getLoc(
      dir.loc.start.offset,
      dir.loc.start.offset + dir.rawName.length
    ),
    value: void 0,
    loc: dir.loc
  };
  if (dir.exp) {
    const loc = dir.exp.loc;
    if (loc.end.offset < dir.loc.end.offset) {
      loc.start.offset--;
      loc.start.column--;
      loc.end.offset++;
      loc.end.column++;
    }
    attr.value = {
      type: 2,
      content: dir.exp.content,
      loc
    };
  }
  return attr;
}
function createExp(content, isStatic = false, loc, constType = 0, parseMode = 0) {
  const exp = createSimpleExpression(content, isStatic, loc, constType);
  return exp;
}
function emitError(code, index, message) {
  currentOptions.onError(
    createCompilerError(code, getLoc(index, index), void 0, message)
  );
}
function reset() {
  tokenizer.reset();
  currentOpenTag = null;
  currentProp = null;
  currentAttrValue = "";
  currentAttrStartIndex = -1;
  currentAttrEndIndex = -1;
  stack.length = 0;
}
function baseParse(input, options) {
  reset();
  currentInput = input;
  currentOptions = extend({}, defaultParserOptions);
  if (options) {
    let key;
    for (key in options) {
      if (options[key] != null) {
        currentOptions[key] = options[key];
      }
    }
  }
  {
    if (!currentOptions.decodeEntities) {
      throw new Error(
        `[@vue/compiler-core] decodeEntities option is required in browser builds.`
      );
    }
  }
  tokenizer.mode = currentOptions.parseMode === "html" ? 1 : currentOptions.parseMode === "sfc" ? 2 : 0;
  tokenizer.inXML = currentOptions.ns === 1 || currentOptions.ns === 2;
  const delimiters = options && options.delimiters;
  if (delimiters) {
    tokenizer.delimiterOpen = toCharCodes(delimiters[0]);
    tokenizer.delimiterClose = toCharCodes(delimiters[1]);
  }
  const root = currentRoot = createRoot([], input);
  tokenizer.parse(currentInput);
  root.loc = getLoc(0, input.length);
  root.children = condenseWhitespace(root.children);
  currentRoot = null;
  return root;
}
function hoistStatic(root, context) {
  walk(
    root,
    context,
    // Root node is unfortunately non-hoistable due to potential parent
    // fallthrough attributes.
    isSingleElementRoot(root, root.children[0])
  );
}
function isSingleElementRoot(root, child) {
  const { children } = root;
  return children.length === 1 && child.type === 1 && !isSlotOutlet(child);
}
function walk(node, context, doNotHoistNode = false) {
  const { children } = node;
  const originalCount = children.length;
  let hoistedCount = 0;
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    if (child.type === 1 && child.tagType === 0) {
      const constantType = doNotHoistNode ? 0 : getConstantType(child, context);
      if (constantType > 0) {
        if (constantType >= 2) {
          child.codegenNode.patchFlag = `-1 /* HOISTED */`;
          child.codegenNode = context.hoist(child.codegenNode);
          hoistedCount++;
          continue;
        }
      } else {
        const codegenNode = child.codegenNode;
        if (codegenNode.type === 13) {
          const flag = getPatchFlag(codegenNode);
          if ((!flag || flag === 512 || flag === 1) && getGeneratedPropsConstantType(child, context) >= 2) {
            const props = getNodeProps(child);
            if (props) {
              codegenNode.props = context.hoist(props);
            }
          }
          if (codegenNode.dynamicProps) {
            codegenNode.dynamicProps = context.hoist(codegenNode.dynamicProps);
          }
        }
      }
    }
    if (child.type === 1) {
      const isComponent2 = child.tagType === 1;
      if (isComponent2) {
        context.scopes.vSlot++;
      }
      walk(child, context);
      if (isComponent2) {
        context.scopes.vSlot--;
      }
    } else if (child.type === 11) {
      walk(child, context, child.children.length === 1);
    } else if (child.type === 9) {
      for (let i2 = 0; i2 < child.branches.length; i2++) {
        walk(
          child.branches[i2],
          context,
          child.branches[i2].children.length === 1
        );
      }
    }
  }
  if (hoistedCount && context.transformHoist) {
    context.transformHoist(children, context, node);
  }
  if (hoistedCount && hoistedCount === originalCount && node.type === 1 && node.tagType === 0 && node.codegenNode && node.codegenNode.type === 13 && isArray(node.codegenNode.children)) {
    const hoisted = context.hoist(
      createArrayExpression(node.codegenNode.children)
    );
    if (context.hmr) {
      hoisted.content = `[...${hoisted.content}]`;
    }
    node.codegenNode.children = hoisted;
  }
}
function getConstantType(node, context) {
  const { constantCache } = context;
  switch (node.type) {
    case 1:
      if (node.tagType !== 0) {
        return 0;
      }
      const cached = constantCache.get(node);
      if (cached !== void 0) {
        return cached;
      }
      const codegenNode = node.codegenNode;
      if (codegenNode.type !== 13) {
        return 0;
      }
      if (codegenNode.isBlock && node.tag !== "svg" && node.tag !== "foreignObject" && node.tag !== "math") {
        return 0;
      }
      const flag = getPatchFlag(codegenNode);
      if (!flag) {
        let returnType2 = 3;
        const generatedPropsType = getGeneratedPropsConstantType(node, context);
        if (generatedPropsType === 0) {
          constantCache.set(node, 0);
          return 0;
        }
        if (generatedPropsType < returnType2) {
          returnType2 = generatedPropsType;
        }
        for (let i = 0; i < node.children.length; i++) {
          const childType = getConstantType(node.children[i], context);
          if (childType === 0) {
            constantCache.set(node, 0);
            return 0;
          }
          if (childType < returnType2) {
            returnType2 = childType;
          }
        }
        if (returnType2 > 1) {
          for (let i = 0; i < node.props.length; i++) {
            const p2 = node.props[i];
            if (p2.type === 7 && p2.name === "bind" && p2.exp) {
              const expType = getConstantType(p2.exp, context);
              if (expType === 0) {
                constantCache.set(node, 0);
                return 0;
              }
              if (expType < returnType2) {
                returnType2 = expType;
              }
            }
          }
        }
        if (codegenNode.isBlock) {
          for (let i = 0; i < node.props.length; i++) {
            const p2 = node.props[i];
            if (p2.type === 7) {
              constantCache.set(node, 0);
              return 0;
            }
          }
          context.removeHelper(OPEN_BLOCK);
          context.removeHelper(
            getVNodeBlockHelper(context.inSSR, codegenNode.isComponent)
          );
          codegenNode.isBlock = false;
          context.helper(getVNodeHelper(context.inSSR, codegenNode.isComponent));
        }
        constantCache.set(node, returnType2);
        return returnType2;
      } else {
        constantCache.set(node, 0);
        return 0;
      }
    case 2:
    case 3:
      return 3;
    case 9:
    case 11:
    case 10:
      return 0;
    case 5:
    case 12:
      return getConstantType(node.content, context);
    case 4:
      return node.constType;
    case 8:
      let returnType = 3;
      for (let i = 0; i < node.children.length; i++) {
        const child = node.children[i];
        if (isString(child) || isSymbol(child)) {
          continue;
        }
        const childType = getConstantType(child, context);
        if (childType === 0) {
          return 0;
        } else if (childType < returnType) {
          returnType = childType;
        }
      }
      return returnType;
    default:
      return 0;
  }
}
const allowHoistedHelperSet = /* @__PURE__ */ new Set([
  NORMALIZE_CLASS,
  NORMALIZE_STYLE,
  NORMALIZE_PROPS,
  GUARD_REACTIVE_PROPS
]);
function getConstantTypeOfHelperCall(value, context) {
  if (value.type === 14 && !isString(value.callee) && allowHoistedHelperSet.has(value.callee)) {
    const arg = value.arguments[0];
    if (arg.type === 4) {
      return getConstantType(arg, context);
    } else if (arg.type === 14) {
      return getConstantTypeOfHelperCall(arg, context);
    }
  }
  return 0;
}
function getGeneratedPropsConstantType(node, context) {
  let returnType = 3;
  const props = getNodeProps(node);
  if (props && props.type === 15) {
    const { properties } = props;
    for (let i = 0; i < properties.length; i++) {
      const { key, value } = properties[i];
      const keyType = getConstantType(key, context);
      if (keyType === 0) {
        return keyType;
      }
      if (keyType < returnType) {
        returnType = keyType;
      }
      let valueType;
      if (value.type === 4) {
        valueType = getConstantType(value, context);
      } else if (value.type === 14) {
        valueType = getConstantTypeOfHelperCall(value, context);
      } else {
        valueType = 0;
      }
      if (valueType === 0) {
        return valueType;
      }
      if (valueType < returnType) {
        returnType = valueType;
      }
    }
  }
  return returnType;
}
function getNodeProps(node) {
  const codegenNode = node.codegenNode;
  if (codegenNode.type === 13) {
    return codegenNode.props;
  }
}
function getPatchFlag(node) {
  const flag = node.patchFlag;
  return flag ? parseInt(flag, 10) : void 0;
}
function createTransformContext(root, {
  filename = "",
  prefixIdentifiers = false,
  hoistStatic: hoistStatic2 = false,
  hmr = false,
  cacheHandlers = false,
  nodeTransforms = [],
  directiveTransforms = {},
  transformHoist = null,
  isBuiltInComponent = NOOP,
  isCustomElement = NOOP,
  expressionPlugins = [],
  scopeId = null,
  slotted = true,
  ssr = false,
  inSSR = false,
  ssrCssVars = ``,
  bindingMetadata = EMPTY_OBJ,
  inline = false,
  isTS = false,
  onError = defaultOnError,
  onWarn = defaultOnWarn,
  compatConfig
}) {
  const nameMatch = filename.replace(/\?.*$/, "").match(/([^/\\]+)\.\w+$/);
  const context = {
    // options
    filename,
    selfName: nameMatch && capitalize(camelize(nameMatch[1])),
    prefixIdentifiers,
    hoistStatic: hoistStatic2,
    hmr,
    cacheHandlers,
    nodeTransforms,
    directiveTransforms,
    transformHoist,
    isBuiltInComponent,
    isCustomElement,
    expressionPlugins,
    scopeId,
    slotted,
    ssr,
    inSSR,
    ssrCssVars,
    bindingMetadata,
    inline,
    isTS,
    onError,
    onWarn,
    compatConfig,
    // state
    root,
    helpers: /* @__PURE__ */ new Map(),
    components: /* @__PURE__ */ new Set(),
    directives: /* @__PURE__ */ new Set(),
    hoists: [],
    imports: [],
    constantCache: /* @__PURE__ */ new WeakMap(),
    temps: 0,
    cached: 0,
    identifiers: /* @__PURE__ */ Object.create(null),
    scopes: {
      vFor: 0,
      vSlot: 0,
      vPre: 0,
      vOnce: 0
    },
    parent: null,
    grandParent: null,
    currentNode: root,
    childIndex: 0,
    inVOnce: false,
    // methods
    helper(name) {
      const count = context.helpers.get(name) || 0;
      context.helpers.set(name, count + 1);
      return name;
    },
    removeHelper(name) {
      const count = context.helpers.get(name);
      if (count) {
        const currentCount = count - 1;
        if (!currentCount) {
          context.helpers.delete(name);
        } else {
          context.helpers.set(name, currentCount);
        }
      }
    },
    helperString(name) {
      return `_${helperNameMap[context.helper(name)]}`;
    },
    replaceNode(node) {
      {
        if (!context.currentNode) {
          throw new Error(`Node being replaced is already removed.`);
        }
        if (!context.parent) {
          throw new Error(`Cannot replace root node.`);
        }
      }
      context.parent.children[context.childIndex] = context.currentNode = node;
    },
    removeNode(node) {
      if (!context.parent) {
        throw new Error(`Cannot remove root node.`);
      }
      const list = context.parent.children;
      const removalIndex = node ? list.indexOf(node) : context.currentNode ? context.childIndex : -1;
      if (removalIndex < 0) {
        throw new Error(`node being removed is not a child of current parent`);
      }
      if (!node || node === context.currentNode) {
        context.currentNode = null;
        context.onNodeRemoved();
      } else {
        if (context.childIndex > removalIndex) {
          context.childIndex--;
          context.onNodeRemoved();
        }
      }
      context.parent.children.splice(removalIndex, 1);
    },
    onNodeRemoved: NOOP,
    addIdentifiers(exp) {
    },
    removeIdentifiers(exp) {
    },
    hoist(exp) {
      if (isString(exp)) exp = createSimpleExpression(exp);
      context.hoists.push(exp);
      const identifier = createSimpleExpression(
        `_hoisted_${context.hoists.length}`,
        false,
        exp.loc,
        2
      );
      identifier.hoisted = exp;
      return identifier;
    },
    cache(exp, isVNode2 = false) {
      return createCacheExpression(context.cached++, exp, isVNode2);
    }
  };
  {
    context.filters = /* @__PURE__ */ new Set();
  }
  return context;
}
function transform(root, options) {
  const context = createTransformContext(root, options);
  traverseNode(root, context);
  if (options.hoistStatic) {
    hoistStatic(root, context);
  }
  if (!options.ssr) {
    createRootCodegen(root, context);
  }
  root.helpers = /* @__PURE__ */ new Set([...context.helpers.keys()]);
  root.components = [...context.components];
  root.directives = [...context.directives];
  root.imports = context.imports;
  root.hoists = context.hoists;
  root.temps = context.temps;
  root.cached = context.cached;
  root.transformed = true;
  {
    root.filters = [...context.filters];
  }
}
function createRootCodegen(root, context) {
  const { helper } = context;
  const { children } = root;
  if (children.length === 1) {
    const child = children[0];
    if (isSingleElementRoot(root, child) && child.codegenNode) {
      const codegenNode = child.codegenNode;
      if (codegenNode.type === 13) {
        convertToBlock(codegenNode, context);
      }
      root.codegenNode = codegenNode;
    } else {
      root.codegenNode = child;
    }
  } else if (children.length > 1) {
    let patchFlag = 64;
    let patchFlagText = PatchFlagNames[64];
    if (children.filter((c) => c.type !== 3).length === 1) {
      patchFlag |= 2048;
      patchFlagText += `, ${PatchFlagNames[2048]}`;
    }
    root.codegenNode = createVNodeCall(
      context,
      helper(FRAGMENT),
      void 0,
      root.children,
      patchFlag + ` /* ${patchFlagText} */`,
      void 0,
      void 0,
      true,
      void 0,
      false
    );
  } else ;
}
function traverseChildren(parent, context) {
  let i = 0;
  const nodeRemoved = () => {
    i--;
  };
  for (; i < parent.children.length; i++) {
    const child = parent.children[i];
    if (isString(child)) continue;
    context.grandParent = context.parent;
    context.parent = parent;
    context.childIndex = i;
    context.onNodeRemoved = nodeRemoved;
    traverseNode(child, context);
  }
}
function traverseNode(node, context) {
  context.currentNode = node;
  const { nodeTransforms } = context;
  const exitFns = [];
  for (let i2 = 0; i2 < nodeTransforms.length; i2++) {
    const onExit = nodeTransforms[i2](node, context);
    if (onExit) {
      if (isArray(onExit)) {
        exitFns.push(...onExit);
      } else {
        exitFns.push(onExit);
      }
    }
    if (!context.currentNode) {
      return;
    } else {
      node = context.currentNode;
    }
  }
  switch (node.type) {
    case 3:
      if (!context.ssr) {
        context.helper(CREATE_COMMENT);
      }
      break;
    case 5:
      if (!context.ssr) {
        context.helper(TO_DISPLAY_STRING);
      }
      break;
    case 9:
      for (let i2 = 0; i2 < node.branches.length; i2++) {
        traverseNode(node.branches[i2], context);
      }
      break;
    case 10:
    case 11:
    case 1:
    case 0:
      traverseChildren(node, context);
      break;
  }
  context.currentNode = node;
  let i = exitFns.length;
  while (i--) {
    exitFns[i]();
  }
}
function createStructuralDirectiveTransform(name, fn) {
  const matches2 = isString(name) ? (n) => n === name : (n) => name.test(n);
  return (node, context) => {
    if (node.type === 1) {
      const { props } = node;
      if (node.tagType === 3 && props.some(isVSlot)) {
        return;
      }
      const exitFns = [];
      for (let i = 0; i < props.length; i++) {
        const prop = props[i];
        if (prop.type === 7 && matches2(prop.name)) {
          props.splice(i, 1);
          i--;
          const onExit = fn(node, prop, context);
          if (onExit) exitFns.push(onExit);
        }
      }
      return exitFns;
    }
  };
}
const PURE_ANNOTATION = `/*#__PURE__*/`;
const aliasHelper = (s) => `${helperNameMap[s]}: _${helperNameMap[s]}`;
function createCodegenContext(ast, {
  mode = "function",
  prefixIdentifiers = mode === "module",
  sourceMap = false,
  filename = `template.vue.html`,
  scopeId = null,
  optimizeImports = false,
  runtimeGlobalName = `Vue`,
  runtimeModuleName = `vue`,
  ssrRuntimeModuleName = "vue/server-renderer",
  ssr = false,
  isTS = false,
  inSSR = false
}) {
  const context = {
    mode,
    prefixIdentifiers,
    sourceMap,
    filename,
    scopeId,
    optimizeImports,
    runtimeGlobalName,
    runtimeModuleName,
    ssrRuntimeModuleName,
    ssr,
    isTS,
    inSSR,
    source: ast.source,
    code: ``,
    column: 1,
    line: 1,
    offset: 0,
    indentLevel: 0,
    pure: false,
    map: void 0,
    helper(key) {
      return `_${helperNameMap[key]}`;
    },
    push(code, newlineIndex = -2, node) {
      context.code += code;
    },
    indent() {
      newline(++context.indentLevel);
    },
    deindent(withoutNewLine = false) {
      if (withoutNewLine) {
        --context.indentLevel;
      } else {
        newline(--context.indentLevel);
      }
    },
    newline() {
      newline(context.indentLevel);
    }
  };
  function newline(n) {
    context.push(
      "\n" + `  `.repeat(n),
      0
      /* Start */
    );
  }
  return context;
}
function generate(ast, options = {}) {
  const context = createCodegenContext(ast, options);
  if (options.onContextCreated) options.onContextCreated(context);
  const {
    mode,
    push,
    prefixIdentifiers,
    indent,
    deindent,
    newline,
    scopeId,
    ssr
  } = context;
  const helpers = Array.from(ast.helpers);
  const hasHelpers = helpers.length > 0;
  const useWithBlock = !prefixIdentifiers && mode !== "module";
  const preambleContext = context;
  {
    genFunctionPreamble(ast, preambleContext);
  }
  const functionName = ssr ? `ssrRender` : `render`;
  const args = ssr ? ["_ctx", "_push", "_parent", "_attrs"] : ["_ctx", "_cache"];
  const signature = args.join(", ");
  {
    push(`function ${functionName}(${signature}) {`);
  }
  indent();
  if (useWithBlock) {
    push(`with (_ctx) {`);
    indent();
    if (hasHelpers) {
      push(
        `const { ${helpers.map(aliasHelper).join(", ")} } = _Vue
`,
        -1
        /* End */
      );
      newline();
    }
  }
  if (ast.components.length) {
    genAssets(ast.components, "component", context);
    if (ast.directives.length || ast.temps > 0) {
      newline();
    }
  }
  if (ast.directives.length) {
    genAssets(ast.directives, "directive", context);
    if (ast.temps > 0) {
      newline();
    }
  }
  if (ast.filters && ast.filters.length) {
    newline();
    genAssets(ast.filters, "filter", context);
    newline();
  }
  if (ast.temps > 0) {
    push(`let `);
    for (let i = 0; i < ast.temps; i++) {
      push(`${i > 0 ? `, ` : ``}_temp${i}`);
    }
  }
  if (ast.components.length || ast.directives.length || ast.temps) {
    push(
      `
`,
      0
      /* Start */
    );
    newline();
  }
  if (!ssr) {
    push(`return `);
  }
  if (ast.codegenNode) {
    genNode(ast.codegenNode, context);
  } else {
    push(`null`);
  }
  if (useWithBlock) {
    deindent();
    push(`}`);
  }
  deindent();
  push(`}`);
  return {
    ast,
    code: context.code,
    preamble: ``,
    map: context.map ? context.map.toJSON() : void 0
  };
}
function genFunctionPreamble(ast, context) {
  const {
    ssr,
    prefixIdentifiers,
    push,
    newline,
    runtimeModuleName,
    runtimeGlobalName,
    ssrRuntimeModuleName
  } = context;
  const VueBinding = runtimeGlobalName;
  const helpers = Array.from(ast.helpers);
  if (helpers.length > 0) {
    {
      push(
        `const _Vue = ${VueBinding}
`,
        -1
        /* End */
      );
      if (ast.hoists.length) {
        const staticHelpers = [
          CREATE_VNODE,
          CREATE_ELEMENT_VNODE,
          CREATE_COMMENT,
          CREATE_TEXT,
          CREATE_STATIC
        ].filter((helper) => helpers.includes(helper)).map(aliasHelper).join(", ");
        push(
          `const { ${staticHelpers} } = _Vue
`,
          -1
          /* End */
        );
      }
    }
  }
  genHoists(ast.hoists, context);
  newline();
  push(`return `);
}
function genAssets(assets, type, { helper, push, newline, isTS }) {
  const resolver = helper(
    type === "filter" ? RESOLVE_FILTER : type === "component" ? RESOLVE_COMPONENT : RESOLVE_DIRECTIVE
  );
  for (let i = 0; i < assets.length; i++) {
    let id = assets[i];
    const maybeSelfReference = id.endsWith("__self");
    if (maybeSelfReference) {
      id = id.slice(0, -6);
    }
    push(
      `const ${toValidAssetId(id, type)} = ${resolver}(${JSON.stringify(id)}${maybeSelfReference ? `, true` : ``})${isTS ? `!` : ``}`
    );
    if (i < assets.length - 1) {
      newline();
    }
  }
}
function genHoists(hoists, context) {
  if (!hoists.length) {
    return;
  }
  context.pure = true;
  const { push, newline, helper, scopeId, mode } = context;
  newline();
  for (let i = 0; i < hoists.length; i++) {
    const exp = hoists[i];
    if (exp) {
      push(
        `const _hoisted_${i + 1} = ${``}`
      );
      genNode(exp, context);
      newline();
    }
  }
  context.pure = false;
}
function isText(n) {
  return isString(n) || n.type === 4 || n.type === 2 || n.type === 5 || n.type === 8;
}
function genNodeListAsArray(nodes, context) {
  const multilines = nodes.length > 3 || nodes.some((n) => isArray(n) || !isText(n));
  context.push(`[`);
  multilines && context.indent();
  genNodeList(nodes, context, multilines);
  multilines && context.deindent();
  context.push(`]`);
}
function genNodeList(nodes, context, multilines = false, comma = true) {
  const { push, newline } = context;
  for (let i = 0; i < nodes.length; i++) {
    const node = nodes[i];
    if (isString(node)) {
      push(
        node,
        -3
        /* Unknown */
      );
    } else if (isArray(node)) {
      genNodeListAsArray(node, context);
    } else {
      genNode(node, context);
    }
    if (i < nodes.length - 1) {
      if (multilines) {
        comma && push(",");
        newline();
      } else {
        comma && push(", ");
      }
    }
  }
}
function genNode(node, context) {
  if (isString(node)) {
    context.push(
      node,
      -3
      /* Unknown */
    );
    return;
  }
  if (isSymbol(node)) {
    context.push(context.helper(node));
    return;
  }
  switch (node.type) {
    case 1:
    case 9:
    case 11:
      assert(
        node.codegenNode != null,
        `Codegen node is missing for element/if/for node. Apply appropriate transforms first.`
      );
      genNode(node.codegenNode, context);
      break;
    case 2:
      genText(node, context);
      break;
    case 4:
      genExpression(node, context);
      break;
    case 5:
      genInterpolation(node, context);
      break;
    case 12:
      genNode(node.codegenNode, context);
      break;
    case 8:
      genCompoundExpression(node, context);
      break;
    case 3:
      genComment(node, context);
      break;
    case 13:
      genVNodeCall(node, context);
      break;
    case 14:
      genCallExpression(node, context);
      break;
    case 15:
      genObjectExpression(node, context);
      break;
    case 17:
      genArrayExpression(node, context);
      break;
    case 18:
      genFunctionExpression(node, context);
      break;
    case 19:
      genConditionalExpression(node, context);
      break;
    case 20:
      genCacheExpression(node, context);
      break;
    case 21:
      genNodeList(node.body, context, true, false);
      break;
    case 22:
      break;
    case 23:
      break;
    case 24:
      break;
    case 25:
      break;
    case 26:
      break;
    case 10:
      break;
    default: {
      assert(false, `unhandled codegen node type: ${node.type}`);
      const exhaustiveCheck = node;
      return exhaustiveCheck;
    }
  }
}
function genText(node, context) {
  context.push(JSON.stringify(node.content), -3, node);
}
function genExpression(node, context) {
  const { content, isStatic } = node;
  context.push(
    isStatic ? JSON.stringify(content) : content,
    -3,
    node
  );
}
function genInterpolation(node, context) {
  const { push, helper, pure } = context;
  if (pure) push(PURE_ANNOTATION);
  push(`${helper(TO_DISPLAY_STRING)}(`);
  genNode(node.content, context);
  push(`)`);
}
function genCompoundExpression(node, context) {
  for (let i = 0; i < node.children.length; i++) {
    const child = node.children[i];
    if (isString(child)) {
      context.push(
        child,
        -3
        /* Unknown */
      );
    } else {
      genNode(child, context);
    }
  }
}
function genExpressionAsPropertyKey(node, context) {
  const { push } = context;
  if (node.type === 8) {
    push(`[`);
    genCompoundExpression(node, context);
    push(`]`);
  } else if (node.isStatic) {
    const text = isSimpleIdentifier(node.content) ? node.content : JSON.stringify(node.content);
    push(text, -2, node);
  } else {
    push(`[${node.content}]`, -3, node);
  }
}
function genComment(node, context) {
  const { push, helper, pure } = context;
  if (pure) {
    push(PURE_ANNOTATION);
  }
  push(
    `${helper(CREATE_COMMENT)}(${JSON.stringify(node.content)})`,
    -3,
    node
  );
}
function genVNodeCall(node, context) {
  const { push, helper, pure } = context;
  const {
    tag,
    props,
    children,
    patchFlag,
    dynamicProps,
    directives,
    isBlock,
    disableTracking,
    isComponent: isComponent2
  } = node;
  if (directives) {
    push(helper(WITH_DIRECTIVES) + `(`);
  }
  if (isBlock) {
    push(`(${helper(OPEN_BLOCK)}(${disableTracking ? `true` : ``}), `);
  }
  if (pure) {
    push(PURE_ANNOTATION);
  }
  const callHelper = isBlock ? getVNodeBlockHelper(context.inSSR, isComponent2) : getVNodeHelper(context.inSSR, isComponent2);
  push(helper(callHelper) + `(`, -2, node);
  genNodeList(
    genNullableArgs([tag, props, children, patchFlag, dynamicProps]),
    context
  );
  push(`)`);
  if (isBlock) {
    push(`)`);
  }
  if (directives) {
    push(`, `);
    genNode(directives, context);
    push(`)`);
  }
}
function genNullableArgs(args) {
  let i = args.length;
  while (i--) {
    if (args[i] != null) break;
  }
  return args.slice(0, i + 1).map((arg) => arg || `null`);
}
function genCallExpression(node, context) {
  const { push, helper, pure } = context;
  const callee = isString(node.callee) ? node.callee : helper(node.callee);
  if (pure) {
    push(PURE_ANNOTATION);
  }
  push(callee + `(`, -2, node);
  genNodeList(node.arguments, context);
  push(`)`);
}
function genObjectExpression(node, context) {
  const { push, indent, deindent, newline } = context;
  const { properties } = node;
  if (!properties.length) {
    push(`{}`, -2, node);
    return;
  }
  const multilines = properties.length > 1 || properties.some((p2) => p2.value.type !== 4);
  push(multilines ? `{` : `{ `);
  multilines && indent();
  for (let i = 0; i < properties.length; i++) {
    const { key, value } = properties[i];
    genExpressionAsPropertyKey(key, context);
    push(`: `);
    genNode(value, context);
    if (i < properties.length - 1) {
      push(`,`);
      newline();
    }
  }
  multilines && deindent();
  push(multilines ? `}` : ` }`);
}
function genArrayExpression(node, context) {
  genNodeListAsArray(node.elements, context);
}
function genFunctionExpression(node, context) {
  const { push, indent, deindent } = context;
  const { params, returns, body, newline, isSlot } = node;
  if (isSlot) {
    push(`_${helperNameMap[WITH_CTX]}(`);
  }
  push(`(`, -2, node);
  if (isArray(params)) {
    genNodeList(params, context);
  } else if (params) {
    genNode(params, context);
  }
  push(`) => `);
  if (newline || body) {
    push(`{`);
    indent();
  }
  if (returns) {
    if (newline) {
      push(`return `);
    }
    if (isArray(returns)) {
      genNodeListAsArray(returns, context);
    } else {
      genNode(returns, context);
    }
  } else if (body) {
    genNode(body, context);
  }
  if (newline || body) {
    deindent();
    push(`}`);
  }
  if (isSlot) {
    if (node.isNonScopedSlot) {
      push(`, undefined, true`);
    }
    push(`)`);
  }
}
function genConditionalExpression(node, context) {
  const { test, consequent, alternate, newline: needNewline } = node;
  const { push, indent, deindent, newline } = context;
  if (test.type === 4) {
    const needsParens = !isSimpleIdentifier(test.content);
    needsParens && push(`(`);
    genExpression(test, context);
    needsParens && push(`)`);
  } else {
    push(`(`);
    genNode(test, context);
    push(`)`);
  }
  needNewline && indent();
  context.indentLevel++;
  needNewline || push(` `);
  push(`? `);
  genNode(consequent, context);
  context.indentLevel--;
  needNewline && newline();
  needNewline || push(` `);
  push(`: `);
  const isNested = alternate.type === 19;
  if (!isNested) {
    context.indentLevel++;
  }
  genNode(alternate, context);
  if (!isNested) {
    context.indentLevel--;
  }
  needNewline && deindent(
    true
    /* without newline */
  );
}
function genCacheExpression(node, context) {
  const { push, helper, indent, deindent, newline } = context;
  push(`_cache[${node.index}] || (`);
  if (node.isVNode) {
    indent();
    push(`${helper(SET_BLOCK_TRACKING)}(-1),`);
    newline();
  }
  push(`_cache[${node.index}] = `);
  genNode(node.value, context);
  if (node.isVNode) {
    push(`,`);
    newline();
    push(`${helper(SET_BLOCK_TRACKING)}(1),`);
    newline();
    push(`_cache[${node.index}]`);
    deindent();
  }
  push(`)`);
}
const prohibitedKeywordRE = new RegExp(
  "\\b" + "arguments,await,break,case,catch,class,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,let,new,return,super,switch,throw,try,var,void,while,with,yield".split(",").join("\\b|\\b") + "\\b"
);
const stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;
function validateBrowserExpression(node, context, asParams = false, asRawStatements = false) {
  const exp = node.content;
  if (!exp.trim()) {
    return;
  }
  try {
    new Function(
      asRawStatements ? ` ${exp} ` : `return ${asParams ? `(${exp}) => {}` : `(${exp})`}`
    );
  } catch (e) {
    let message = e.message;
    const keywordMatch = exp.replace(stripStringRE, "").match(prohibitedKeywordRE);
    if (keywordMatch) {
      message = `avoid using JavaScript keyword as property name: "${keywordMatch[0]}"`;
    }
    context.onError(
      createCompilerError(
        45,
        node.loc,
        void 0,
        message
      )
    );
  }
}
const transformExpression = (node, context) => {
  if (node.type === 5) {
    node.content = processExpression(
      node.content,
      context
    );
  } else if (node.type === 1) {
    for (let i = 0; i < node.props.length; i++) {
      const dir = node.props[i];
      if (dir.type === 7 && dir.name !== "for") {
        const exp = dir.exp;
        const arg = dir.arg;
        if (exp && exp.type === 4 && !(dir.name === "on" && arg)) {
          dir.exp = processExpression(
            exp,
            context,
            // slot args must be processed as function params
            dir.name === "slot"
          );
        }
        if (arg && arg.type === 4 && !arg.isStatic) {
          dir.arg = processExpression(arg, context);
        }
      }
    }
  }
};
function processExpression(node, context, asParams = false, asRawStatements = false, localVars = Object.create(context.identifiers)) {
  {
    {
      validateBrowserExpression(node, context, asParams, asRawStatements);
    }
    return node;
  }
}
const transformIf = createStructuralDirectiveTransform(
  /^(if|else|else-if)$/,
  (node, dir, context) => {
    return processIf(node, dir, context, (ifNode, branch, isRoot) => {
      const siblings = context.parent.children;
      let i = siblings.indexOf(ifNode);
      let key = 0;
      while (i-- >= 0) {
        const sibling = siblings[i];
        if (sibling && sibling.type === 9) {
          key += sibling.branches.length;
        }
      }
      return () => {
        if (isRoot) {
          ifNode.codegenNode = createCodegenNodeForBranch(
            branch,
            key,
            context
          );
        } else {
          const parentCondition = getParentCondition(ifNode.codegenNode);
          parentCondition.alternate = createCodegenNodeForBranch(
            branch,
            key + ifNode.branches.length - 1,
            context
          );
        }
      };
    });
  }
);
function processIf(node, dir, context, processCodegen) {
  if (dir.name !== "else" && (!dir.exp || !dir.exp.content.trim())) {
    const loc = dir.exp ? dir.exp.loc : node.loc;
    context.onError(
      createCompilerError(28, dir.loc)
    );
    dir.exp = createSimpleExpression(`true`, false, loc);
  }
  if (dir.exp) {
    validateBrowserExpression(dir.exp, context);
  }
  if (dir.name === "if") {
    const branch = createIfBranch(node, dir);
    const ifNode = {
      type: 9,
      loc: node.loc,
      branches: [branch]
    };
    context.replaceNode(ifNode);
    if (processCodegen) {
      return processCodegen(ifNode, branch, true);
    }
  } else {
    const siblings = context.parent.children;
    const comments = [];
    let i = siblings.indexOf(node);
    while (i-- >= -1) {
      const sibling = siblings[i];
      if (sibling && sibling.type === 3) {
        context.removeNode(sibling);
        comments.unshift(sibling);
        continue;
      }
      if (sibling && sibling.type === 2 && !sibling.content.trim().length) {
        context.removeNode(sibling);
        continue;
      }
      if (sibling && sibling.type === 9) {
        if (dir.name === "else-if" && sibling.branches[sibling.branches.length - 1].condition === void 0) {
          context.onError(
            createCompilerError(30, node.loc)
          );
        }
        context.removeNode();
        const branch = createIfBranch(node, dir);
        if (comments.length && // #3619 ignore comments if the v-if is direct child of <transition>
        !(context.parent && context.parent.type === 1 && (context.parent.tag === "transition" || context.parent.tag === "Transition"))) {
          branch.children = [...comments, ...branch.children];
        }
        {
          const key = branch.userKey;
          if (key) {
            sibling.branches.forEach(({ userKey }) => {
              if (isSameKey(userKey, key)) {
                context.onError(
                  createCompilerError(
                    29,
                    branch.userKey.loc
                  )
                );
              }
            });
          }
        }
        sibling.branches.push(branch);
        const onExit = processCodegen && processCodegen(sibling, branch, false);
        traverseNode(branch, context);
        if (onExit) onExit();
        context.currentNode = null;
      } else {
        context.onError(
          createCompilerError(30, node.loc)
        );
      }
      break;
    }
  }
}
function createIfBranch(node, dir) {
  const isTemplateIf = node.tagType === 3;
  return {
    type: 10,
    loc: node.loc,
    condition: dir.name === "else" ? void 0 : dir.exp,
    children: isTemplateIf && !findDir(node, "for") ? node.children : [node],
    userKey: findProp(node, `key`),
    isTemplateIf
  };
}
function createCodegenNodeForBranch(branch, keyIndex, context) {
  if (branch.condition) {
    return createConditionalExpression(
      branch.condition,
      createChildrenCodegenNode(branch, keyIndex, context),
      // make sure to pass in asBlock: true so that the comment node call
      // closes the current block.
      createCallExpression(context.helper(CREATE_COMMENT), [
        '"v-if"',
        "true"
      ])
    );
  } else {
    return createChildrenCodegenNode(branch, keyIndex, context);
  }
}
function createChildrenCodegenNode(branch, keyIndex, context) {
  const { helper } = context;
  const keyProperty = createObjectProperty(
    `key`,
    createSimpleExpression(
      `${keyIndex}`,
      false,
      locStub,
      2
    )
  );
  const { children } = branch;
  const firstChild = children[0];
  const needFragmentWrapper = children.length !== 1 || firstChild.type !== 1;
  if (needFragmentWrapper) {
    if (children.length === 1 && firstChild.type === 11) {
      const vnodeCall = firstChild.codegenNode;
      injectProp(vnodeCall, keyProperty, context);
      return vnodeCall;
    } else {
      let patchFlag = 64;
      let patchFlagText = PatchFlagNames[64];
      if (!branch.isTemplateIf && children.filter((c) => c.type !== 3).length === 1) {
        patchFlag |= 2048;
        patchFlagText += `, ${PatchFlagNames[2048]}`;
      }
      return createVNodeCall(
        context,
        helper(FRAGMENT),
        createObjectExpression([keyProperty]),
        children,
        patchFlag + ` /* ${patchFlagText} */`,
        void 0,
        void 0,
        true,
        false,
        false,
        branch.loc
      );
    }
  } else {
    const ret = firstChild.codegenNode;
    const vnodeCall = getMemoedVNodeCall(ret);
    if (vnodeCall.type === 13) {
      convertToBlock(vnodeCall, context);
    }
    injectProp(vnodeCall, keyProperty, context);
    return ret;
  }
}
function isSameKey(a, b) {
  if (!a || a.type !== b.type) {
    return false;
  }
  if (a.type === 6) {
    if (a.value.content !== b.value.content) {
      return false;
    }
  } else {
    const exp = a.exp;
    const branchExp = b.exp;
    if (exp.type !== branchExp.type) {
      return false;
    }
    if (exp.type !== 4 || exp.isStatic !== branchExp.isStatic || exp.content !== branchExp.content) {
      return false;
    }
  }
  return true;
}
function getParentCondition(node) {
  while (true) {
    if (node.type === 19) {
      if (node.alternate.type === 19) {
        node = node.alternate;
      } else {
        return node;
      }
    } else if (node.type === 20) {
      node = node.value;
    }
  }
}
const transformBind = (dir, _node, context) => {
  const { modifiers, loc } = dir;
  const arg = dir.arg;
  let { exp } = dir;
  if (exp && exp.type === 4 && !exp.content.trim()) {
    {
      exp = void 0;
    }
  }
  if (!exp) {
    if (arg.type !== 4 || !arg.isStatic) {
      context.onError(
        createCompilerError(
          52,
          arg.loc
        )
      );
      return {
        props: [
          createObjectProperty(arg, createSimpleExpression("", true, loc))
        ]
      };
    }
    transformBindShorthand(dir);
    exp = dir.exp;
  }
  if (arg.type !== 4) {
    arg.children.unshift(`(`);
    arg.children.push(`) || ""`);
  } else if (!arg.isStatic) {
    arg.content = `${arg.content} || ""`;
  }
  if (modifiers.includes("camel")) {
    if (arg.type === 4) {
      if (arg.isStatic) {
        arg.content = camelize(arg.content);
      } else {
        arg.content = `${context.helperString(CAMELIZE)}(${arg.content})`;
      }
    } else {
      arg.children.unshift(`${context.helperString(CAMELIZE)}(`);
      arg.children.push(`)`);
    }
  }
  if (!context.inSSR) {
    if (modifiers.includes("prop")) {
      injectPrefix(arg, ".");
    }
    if (modifiers.includes("attr")) {
      injectPrefix(arg, "^");
    }
  }
  return {
    props: [createObjectProperty(arg, exp)]
  };
};
const transformBindShorthand = (dir, context) => {
  const arg = dir.arg;
  const propName = camelize(arg.content);
  dir.exp = createSimpleExpression(propName, false, arg.loc);
};
const injectPrefix = (arg, prefix) => {
  if (arg.type === 4) {
    if (arg.isStatic) {
      arg.content = prefix + arg.content;
    } else {
      arg.content = `\`${prefix}\${${arg.content}}\``;
    }
  } else {
    arg.children.unshift(`'${prefix}' + (`);
    arg.children.push(`)`);
  }
};
const transformFor = createStructuralDirectiveTransform(
  "for",
  (node, dir, context) => {
    const { helper, removeHelper } = context;
    return processFor(node, dir, context, (forNode) => {
      const renderExp = createCallExpression(helper(RENDER_LIST), [
        forNode.source
      ]);
      const isTemplate = isTemplateNode(node);
      const memo = findDir(node, "memo");
      const keyProp = findProp(node, `key`, false, true);
      if (keyProp && keyProp.type === 7 && !keyProp.exp) {
        transformBindShorthand(keyProp);
      }
      const keyExp = keyProp && (keyProp.type === 6 ? keyProp.value ? createSimpleExpression(keyProp.value.content, true) : void 0 : keyProp.exp);
      const keyProperty = keyProp && keyExp ? createObjectProperty(`key`, keyExp) : null;
      const isStableFragment = forNode.source.type === 4 && forNode.source.constType > 0;
      const fragmentFlag = isStableFragment ? 64 : keyProp ? 128 : 256;
      forNode.codegenNode = createVNodeCall(
        context,
        helper(FRAGMENT),
        void 0,
        renderExp,
        fragmentFlag + ` /* ${PatchFlagNames[fragmentFlag]} */`,
        void 0,
        void 0,
        true,
        !isStableFragment,
        false,
        node.loc
      );
      return () => {
        let childBlock;
        const { children } = forNode;
        if (isTemplate) {
          node.children.some((c) => {
            if (c.type === 1) {
              const key = findProp(c, "key");
              if (key) {
                context.onError(
                  createCompilerError(
                    33,
                    key.loc
                  )
                );
                return true;
              }
            }
          });
        }
        const needFragmentWrapper = children.length !== 1 || children[0].type !== 1;
        const slotOutlet = isSlotOutlet(node) ? node : isTemplate && node.children.length === 1 && isSlotOutlet(node.children[0]) ? node.children[0] : null;
        if (slotOutlet) {
          childBlock = slotOutlet.codegenNode;
          if (isTemplate && keyProperty) {
            injectProp(childBlock, keyProperty, context);
          }
        } else if (needFragmentWrapper) {
          childBlock = createVNodeCall(
            context,
            helper(FRAGMENT),
            keyProperty ? createObjectExpression([keyProperty]) : void 0,
            node.children,
            `64 /* ${PatchFlagNames[64]} */`,
            void 0,
            void 0,
            true,
            void 0,
            false
          );
        } else {
          childBlock = children[0].codegenNode;
          if (isTemplate && keyProperty) {
            injectProp(childBlock, keyProperty, context);
          }
          if (childBlock.isBlock !== !isStableFragment) {
            if (childBlock.isBlock) {
              removeHelper(OPEN_BLOCK);
              removeHelper(
                getVNodeBlockHelper(context.inSSR, childBlock.isComponent)
              );
            } else {
              removeHelper(
                getVNodeHelper(context.inSSR, childBlock.isComponent)
              );
            }
          }
          childBlock.isBlock = !isStableFragment;
          if (childBlock.isBlock) {
            helper(OPEN_BLOCK);
            helper(getVNodeBlockHelper(context.inSSR, childBlock.isComponent));
          } else {
            helper(getVNodeHelper(context.inSSR, childBlock.isComponent));
          }
        }
        if (memo) {
          const loop = createFunctionExpression(
            createForLoopParams(forNode.parseResult, [
              createSimpleExpression(`_cached`)
            ])
          );
          loop.body = createBlockStatement([
            createCompoundExpression([`const _memo = (`, memo.exp, `)`]),
            createCompoundExpression([
              `if (_cached`,
              ...keyExp ? [` && _cached.key === `, keyExp] : [],
              ` && ${context.helperString(
                IS_MEMO_SAME
              )}(_cached, _memo)) return _cached`
            ]),
            createCompoundExpression([`const _item = `, childBlock]),
            createSimpleExpression(`_item.memo = _memo`),
            createSimpleExpression(`return _item`)
          ]);
          renderExp.arguments.push(
            loop,
            createSimpleExpression(`_cache`),
            createSimpleExpression(String(context.cached++))
          );
        } else {
          renderExp.arguments.push(
            createFunctionExpression(
              createForLoopParams(forNode.parseResult),
              childBlock,
              true
            )
          );
        }
      };
    });
  }
);
function processFor(node, dir, context, processCodegen) {
  if (!dir.exp) {
    context.onError(
      createCompilerError(31, dir.loc)
    );
    return;
  }
  const parseResult = dir.forParseResult;
  if (!parseResult) {
    context.onError(
      createCompilerError(32, dir.loc)
    );
    return;
  }
  finalizeForParseResult(parseResult, context);
  const { addIdentifiers, removeIdentifiers, scopes } = context;
  const { source, value, key, index } = parseResult;
  const forNode = {
    type: 11,
    loc: dir.loc,
    source,
    valueAlias: value,
    keyAlias: key,
    objectIndexAlias: index,
    parseResult,
    children: isTemplateNode(node) ? node.children : [node]
  };
  context.replaceNode(forNode);
  scopes.vFor++;
  const onExit = processCodegen && processCodegen(forNode);
  return () => {
    scopes.vFor--;
    if (onExit) onExit();
  };
}
function finalizeForParseResult(result, context) {
  if (result.finalized) return;
  {
    validateBrowserExpression(result.source, context);
    if (result.key) {
      validateBrowserExpression(
        result.key,
        context,
        true
      );
    }
    if (result.index) {
      validateBrowserExpression(
        result.index,
        context,
        true
      );
    }
    if (result.value) {
      validateBrowserExpression(
        result.value,
        context,
        true
      );
    }
  }
  result.finalized = true;
}
function createForLoopParams({ value, key, index }, memoArgs = []) {
  return createParamsList([value, key, index, ...memoArgs]);
}
function createParamsList(args) {
  let i = args.length;
  while (i--) {
    if (args[i]) break;
  }
  return args.slice(0, i + 1).map((arg, i2) => arg || createSimpleExpression(`_`.repeat(i2 + 1), false));
}
const defaultFallback = createSimpleExpression(`undefined`, false);
const trackSlotScopes = (node, context) => {
  if (node.type === 1 && (node.tagType === 1 || node.tagType === 3)) {
    const vSlot = findDir(node, "slot");
    if (vSlot) {
      vSlot.exp;
      context.scopes.vSlot++;
      return () => {
        context.scopes.vSlot--;
      };
    }
  }
};
const buildClientSlotFn = (props, _vForExp, children, loc) => createFunctionExpression(
  props,
  children,
  false,
  true,
  children.length ? children[0].loc : loc
);
function buildSlots(node, context, buildSlotFn = buildClientSlotFn) {
  context.helper(WITH_CTX);
  const { children, loc } = node;
  const slotsProperties = [];
  const dynamicSlots = [];
  let hasDynamicSlots = context.scopes.vSlot > 0 || context.scopes.vFor > 0;
  const onComponentSlot = findDir(node, "slot", true);
  if (onComponentSlot) {
    const { arg, exp } = onComponentSlot;
    if (arg && !isStaticExp(arg)) {
      hasDynamicSlots = true;
    }
    slotsProperties.push(
      createObjectProperty(
        arg || createSimpleExpression("default", true),
        buildSlotFn(exp, void 0, children, loc)
      )
    );
  }
  let hasTemplateSlots = false;
  let hasNamedDefaultSlot = false;
  const implicitDefaultChildren = [];
  const seenSlotNames = /* @__PURE__ */ new Set();
  let conditionalBranchIndex = 0;
  for (let i = 0; i < children.length; i++) {
    const slotElement = children[i];
    let slotDir;
    if (!isTemplateNode(slotElement) || !(slotDir = findDir(slotElement, "slot", true))) {
      if (slotElement.type !== 3) {
        implicitDefaultChildren.push(slotElement);
      }
      continue;
    }
    if (onComponentSlot) {
      context.onError(
        createCompilerError(37, slotDir.loc)
      );
      break;
    }
    hasTemplateSlots = true;
    const { children: slotChildren, loc: slotLoc } = slotElement;
    const {
      arg: slotName = createSimpleExpression(`default`, true),
      exp: slotProps,
      loc: dirLoc
    } = slotDir;
    let staticSlotName;
    if (isStaticExp(slotName)) {
      staticSlotName = slotName ? slotName.content : `default`;
    } else {
      hasDynamicSlots = true;
    }
    const vFor = findDir(slotElement, "for");
    const slotFunction = buildSlotFn(slotProps, vFor, slotChildren, slotLoc);
    let vIf;
    let vElse;
    if (vIf = findDir(slotElement, "if")) {
      hasDynamicSlots = true;
      dynamicSlots.push(
        createConditionalExpression(
          vIf.exp,
          buildDynamicSlot(slotName, slotFunction, conditionalBranchIndex++),
          defaultFallback
        )
      );
    } else if (vElse = findDir(
      slotElement,
      /^else(-if)?$/,
      true
      /* allowEmpty */
    )) {
      let j = i;
      let prev;
      while (j--) {
        prev = children[j];
        if (prev.type !== 3) {
          break;
        }
      }
      if (prev && isTemplateNode(prev) && findDir(prev, "if")) {
        children.splice(i, 1);
        i--;
        let conditional = dynamicSlots[dynamicSlots.length - 1];
        while (conditional.alternate.type === 19) {
          conditional = conditional.alternate;
        }
        conditional.alternate = vElse.exp ? createConditionalExpression(
          vElse.exp,
          buildDynamicSlot(
            slotName,
            slotFunction,
            conditionalBranchIndex++
          ),
          defaultFallback
        ) : buildDynamicSlot(slotName, slotFunction, conditionalBranchIndex++);
      } else {
        context.onError(
          createCompilerError(30, vElse.loc)
        );
      }
    } else if (vFor) {
      hasDynamicSlots = true;
      const parseResult = vFor.forParseResult;
      if (parseResult) {
        finalizeForParseResult(parseResult, context);
        dynamicSlots.push(
          createCallExpression(context.helper(RENDER_LIST), [
            parseResult.source,
            createFunctionExpression(
              createForLoopParams(parseResult),
              buildDynamicSlot(slotName, slotFunction),
              true
            )
          ])
        );
      } else {
        context.onError(
          createCompilerError(
            32,
            vFor.loc
          )
        );
      }
    } else {
      if (staticSlotName) {
        if (seenSlotNames.has(staticSlotName)) {
          context.onError(
            createCompilerError(
              38,
              dirLoc
            )
          );
          continue;
        }
        seenSlotNames.add(staticSlotName);
        if (staticSlotName === "default") {
          hasNamedDefaultSlot = true;
        }
      }
      slotsProperties.push(createObjectProperty(slotName, slotFunction));
    }
  }
  if (!onComponentSlot) {
    const buildDefaultSlotProperty = (props, children2) => {
      const fn = buildSlotFn(props, void 0, children2, loc);
      if (context.compatConfig) {
        fn.isNonScopedSlot = true;
      }
      return createObjectProperty(`default`, fn);
    };
    if (!hasTemplateSlots) {
      slotsProperties.push(buildDefaultSlotProperty(void 0, children));
    } else if (implicitDefaultChildren.length && // #3766
    // with whitespace: 'preserve', whitespaces between slots will end up in
    // implicitDefaultChildren. Ignore if all implicit children are whitespaces.
    implicitDefaultChildren.some((node2) => isNonWhitespaceContent(node2))) {
      if (hasNamedDefaultSlot) {
        context.onError(
          createCompilerError(
            39,
            implicitDefaultChildren[0].loc
          )
        );
      } else {
        slotsProperties.push(
          buildDefaultSlotProperty(void 0, implicitDefaultChildren)
        );
      }
    }
  }
  const slotFlag = hasDynamicSlots ? 2 : hasForwardedSlots(node.children) ? 3 : 1;
  let slots = createObjectExpression(
    slotsProperties.concat(
      createObjectProperty(
        `_`,
        // 2 = compiled but dynamic = can skip normalization, but must run diff
        // 1 = compiled and static = can skip normalization AND diff as optimized
        createSimpleExpression(
          slotFlag + ` /* ${slotFlagsText[slotFlag]} */`,
          false
        )
      )
    ),
    loc
  );
  if (dynamicSlots.length) {
    slots = createCallExpression(context.helper(CREATE_SLOTS), [
      slots,
      createArrayExpression(dynamicSlots)
    ]);
  }
  return {
    slots,
    hasDynamicSlots
  };
}
function buildDynamicSlot(name, fn, index) {
  const props = [
    createObjectProperty(`name`, name),
    createObjectProperty(`fn`, fn)
  ];
  if (index != null) {
    props.push(
      createObjectProperty(`key`, createSimpleExpression(String(index), true))
    );
  }
  return createObjectExpression(props);
}
function hasForwardedSlots(children) {
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    switch (child.type) {
      case 1:
        if (child.tagType === 2 || hasForwardedSlots(child.children)) {
          return true;
        }
        break;
      case 9:
        if (hasForwardedSlots(child.branches)) return true;
        break;
      case 10:
      case 11:
        if (hasForwardedSlots(child.children)) return true;
        break;
    }
  }
  return false;
}
function isNonWhitespaceContent(node) {
  if (node.type !== 2 && node.type !== 12)
    return true;
  return node.type === 2 ? !!node.content.trim() : isNonWhitespaceContent(node.content);
}
const directiveImportMap = /* @__PURE__ */ new WeakMap();
const transformElement = (node, context) => {
  return function postTransformElement() {
    node = context.currentNode;
    if (!(node.type === 1 && (node.tagType === 0 || node.tagType === 1))) {
      return;
    }
    const { tag, props } = node;
    const isComponent2 = node.tagType === 1;
    let vnodeTag = isComponent2 ? resolveComponentType(node, context) : `"${tag}"`;
    const isDynamicComponent = isObject(vnodeTag) && vnodeTag.callee === RESOLVE_DYNAMIC_COMPONENT;
    let vnodeProps;
    let vnodeChildren;
    let vnodePatchFlag;
    let patchFlag = 0;
    let vnodeDynamicProps;
    let dynamicPropNames;
    let vnodeDirectives;
    let shouldUseBlock = (
      // dynamic component may resolve to plain elements
      isDynamicComponent || vnodeTag === TELEPORT || vnodeTag === SUSPENSE || !isComponent2 && // <svg> and <foreignObject> must be forced into blocks so that block
      // updates inside get proper isSVG flag at runtime. (#639, #643)
      // This is technically web-specific, but splitting the logic out of core
      // leads to too much unnecessary complexity.
      (tag === "svg" || tag === "foreignObject" || tag === "math")
    );
    if (props.length > 0) {
      const propsBuildResult = buildProps(
        node,
        context,
        void 0,
        isComponent2,
        isDynamicComponent
      );
      vnodeProps = propsBuildResult.props;
      patchFlag = propsBuildResult.patchFlag;
      dynamicPropNames = propsBuildResult.dynamicPropNames;
      const directives = propsBuildResult.directives;
      vnodeDirectives = directives && directives.length ? createArrayExpression(
        directives.map((dir) => buildDirectiveArgs(dir, context))
      ) : void 0;
      if (propsBuildResult.shouldUseBlock) {
        shouldUseBlock = true;
      }
    }
    if (node.children.length > 0) {
      if (vnodeTag === KEEP_ALIVE) {
        shouldUseBlock = true;
        patchFlag |= 1024;
        if (node.children.length > 1) {
          context.onError(
            createCompilerError(46, {
              start: node.children[0].loc.start,
              end: node.children[node.children.length - 1].loc.end,
              source: ""
            })
          );
        }
      }
      const shouldBuildAsSlots = isComponent2 && // Teleport is not a real component and has dedicated runtime handling
      vnodeTag !== TELEPORT && // explained above.
      vnodeTag !== KEEP_ALIVE;
      if (shouldBuildAsSlots) {
        const { slots, hasDynamicSlots } = buildSlots(node, context);
        vnodeChildren = slots;
        if (hasDynamicSlots) {
          patchFlag |= 1024;
        }
      } else if (node.children.length === 1 && vnodeTag !== TELEPORT) {
        const child = node.children[0];
        const type = child.type;
        const hasDynamicTextChild = type === 5 || type === 8;
        if (hasDynamicTextChild && getConstantType(child, context) === 0) {
          patchFlag |= 1;
        }
        if (hasDynamicTextChild || type === 2) {
          vnodeChildren = child;
        } else {
          vnodeChildren = node.children;
        }
      } else {
        vnodeChildren = node.children;
      }
    }
    if (patchFlag !== 0) {
      {
        if (patchFlag < 0) {
          vnodePatchFlag = patchFlag + ` /* ${PatchFlagNames[patchFlag]} */`;
        } else {
          const flagNames = Object.keys(PatchFlagNames).map(Number).filter((n) => n > 0 && patchFlag & n).map((n) => PatchFlagNames[n]).join(`, `);
          vnodePatchFlag = patchFlag + ` /* ${flagNames} */`;
        }
      }
      if (dynamicPropNames && dynamicPropNames.length) {
        vnodeDynamicProps = stringifyDynamicPropNames(dynamicPropNames);
      }
    }
    node.codegenNode = createVNodeCall(
      context,
      vnodeTag,
      vnodeProps,
      vnodeChildren,
      vnodePatchFlag,
      vnodeDynamicProps,
      vnodeDirectives,
      !!shouldUseBlock,
      false,
      isComponent2,
      node.loc
    );
  };
};
function resolveComponentType(node, context, ssr = false) {
  let { tag } = node;
  const isExplicitDynamic = isComponentTag(tag);
  const isProp = findProp(
    node,
    "is",
    false,
    true
    /* allow empty */
  );
  if (isProp) {
    if (isExplicitDynamic || isCompatEnabled(
      "COMPILER_IS_ON_ELEMENT",
      context
    )) {
      let exp;
      if (isProp.type === 6) {
        exp = isProp.value && createSimpleExpression(isProp.value.content, true);
      } else {
        exp = isProp.exp;
        if (!exp) {
          exp = createSimpleExpression(`is`, false, isProp.loc);
        }
      }
      if (exp) {
        return createCallExpression(context.helper(RESOLVE_DYNAMIC_COMPONENT), [
          exp
        ]);
      }
    } else if (isProp.type === 6 && isProp.value.content.startsWith("vue:")) {
      tag = isProp.value.content.slice(4);
    }
  }
  const builtIn = isCoreComponent(tag) || context.isBuiltInComponent(tag);
  if (builtIn) {
    if (!ssr) context.helper(builtIn);
    return builtIn;
  }
  context.helper(RESOLVE_COMPONENT);
  context.components.add(tag);
  return toValidAssetId(tag, `component`);
}
function buildProps(node, context, props = node.props, isComponent2, isDynamicComponent, ssr = false) {
  const { tag, loc: elementLoc, children } = node;
  let properties = [];
  const mergeArgs = [];
  const runtimeDirectives = [];
  const hasChildren = children.length > 0;
  let shouldUseBlock = false;
  let patchFlag = 0;
  let hasRef = false;
  let hasClassBinding = false;
  let hasStyleBinding = false;
  let hasHydrationEventBinding = false;
  let hasDynamicKeys = false;
  let hasVnodeHook = false;
  const dynamicPropNames = [];
  const pushMergeArg = (arg) => {
    if (properties.length) {
      mergeArgs.push(
        createObjectExpression(dedupeProperties(properties), elementLoc)
      );
      properties = [];
    }
    if (arg) mergeArgs.push(arg);
  };
  const pushRefVForMarker = () => {
    if (context.scopes.vFor > 0) {
      properties.push(
        createObjectProperty(
          createSimpleExpression("ref_for", true),
          createSimpleExpression("true")
        )
      );
    }
  };
  const analyzePatchFlag = ({ key, value }) => {
    if (isStaticExp(key)) {
      const name = key.content;
      const isEventHandler = isOn(name);
      if (isEventHandler && (!isComponent2 || isDynamicComponent) && // omit the flag for click handlers because hydration gives click
      // dedicated fast path.
      name.toLowerCase() !== "onclick" && // omit v-model handlers
      name !== "onUpdate:modelValue" && // omit onVnodeXXX hooks
      !isReservedProp(name)) {
        hasHydrationEventBinding = true;
      }
      if (isEventHandler && isReservedProp(name)) {
        hasVnodeHook = true;
      }
      if (isEventHandler && value.type === 14) {
        value = value.arguments[0];
      }
      if (value.type === 20 || (value.type === 4 || value.type === 8) && getConstantType(value, context) > 0) {
        return;
      }
      if (name === "ref") {
        hasRef = true;
      } else if (name === "class") {
        hasClassBinding = true;
      } else if (name === "style") {
        hasStyleBinding = true;
      } else if (name !== "key" && !dynamicPropNames.includes(name)) {
        dynamicPropNames.push(name);
      }
      if (isComponent2 && (name === "class" || name === "style") && !dynamicPropNames.includes(name)) {
        dynamicPropNames.push(name);
      }
    } else {
      hasDynamicKeys = true;
    }
  };
  for (let i = 0; i < props.length; i++) {
    const prop = props[i];
    if (prop.type === 6) {
      const { loc, name, nameLoc, value } = prop;
      let isStatic = true;
      if (name === "ref") {
        hasRef = true;
        pushRefVForMarker();
      }
      if (name === "is" && (isComponentTag(tag) || value && value.content.startsWith("vue:") || isCompatEnabled(
        "COMPILER_IS_ON_ELEMENT",
        context
      ))) {
        continue;
      }
      properties.push(
        createObjectProperty(
          createSimpleExpression(name, true, nameLoc),
          createSimpleExpression(
            value ? value.content : "",
            isStatic,
            value ? value.loc : loc
          )
        )
      );
    } else {
      const { name, arg, exp, loc, modifiers } = prop;
      const isVBind = name === "bind";
      const isVOn = name === "on";
      if (name === "slot") {
        if (!isComponent2) {
          context.onError(
            createCompilerError(40, loc)
          );
        }
        continue;
      }
      if (name === "once" || name === "memo") {
        continue;
      }
      if (name === "is" || isVBind && isStaticArgOf(arg, "is") && (isComponentTag(tag) || isCompatEnabled(
        "COMPILER_IS_ON_ELEMENT",
        context
      ))) {
        continue;
      }
      if (isVOn && ssr) {
        continue;
      }
      if (
        // #938: elements with dynamic keys should be forced into blocks
        isVBind && isStaticArgOf(arg, "key") || // inline before-update hooks need to force block so that it is invoked
        // before children
        isVOn && hasChildren && isStaticArgOf(arg, "vue:before-update")
      ) {
        shouldUseBlock = true;
      }
      if (isVBind && isStaticArgOf(arg, "ref")) {
        pushRefVForMarker();
      }
      if (!arg && (isVBind || isVOn)) {
        hasDynamicKeys = true;
        if (exp) {
          if (isVBind) {
            pushRefVForMarker();
            pushMergeArg();
            {
              {
                const hasOverridableKeys = mergeArgs.some((arg2) => {
                  if (arg2.type === 15) {
                    return arg2.properties.some(({ key }) => {
                      if (key.type !== 4 || !key.isStatic) {
                        return true;
                      }
                      return key.content !== "class" && key.content !== "style" && !isOn(key.content);
                    });
                  } else {
                    return true;
                  }
                });
                if (hasOverridableKeys) {
                  checkCompatEnabled(
                    "COMPILER_V_BIND_OBJECT_ORDER",
                    context,
                    loc
                  );
                }
              }
              if (isCompatEnabled(
                "COMPILER_V_BIND_OBJECT_ORDER",
                context
              )) {
                mergeArgs.unshift(exp);
                continue;
              }
            }
            mergeArgs.push(exp);
          } else {
            pushMergeArg({
              type: 14,
              loc,
              callee: context.helper(TO_HANDLERS),
              arguments: isComponent2 ? [exp] : [exp, `true`]
            });
          }
        } else {
          context.onError(
            createCompilerError(
              isVBind ? 34 : 35,
              loc
            )
          );
        }
        continue;
      }
      if (isVBind && modifiers.includes("prop")) {
        patchFlag |= 32;
      }
      const directiveTransform = context.directiveTransforms[name];
      if (directiveTransform) {
        const { props: props2, needRuntime } = directiveTransform(prop, node, context);
        !ssr && props2.forEach(analyzePatchFlag);
        if (isVOn && arg && !isStaticExp(arg)) {
          pushMergeArg(createObjectExpression(props2, elementLoc));
        } else {
          properties.push(...props2);
        }
        if (needRuntime) {
          runtimeDirectives.push(prop);
          if (isSymbol(needRuntime)) {
            directiveImportMap.set(prop, needRuntime);
          }
        }
      } else if (!isBuiltInDirective(name)) {
        runtimeDirectives.push(prop);
        if (hasChildren) {
          shouldUseBlock = true;
        }
      }
    }
  }
  let propsExpression = void 0;
  if (mergeArgs.length) {
    pushMergeArg();
    if (mergeArgs.length > 1) {
      propsExpression = createCallExpression(
        context.helper(MERGE_PROPS),
        mergeArgs,
        elementLoc
      );
    } else {
      propsExpression = mergeArgs[0];
    }
  } else if (properties.length) {
    propsExpression = createObjectExpression(
      dedupeProperties(properties),
      elementLoc
    );
  }
  if (hasDynamicKeys) {
    patchFlag |= 16;
  } else {
    if (hasClassBinding && !isComponent2) {
      patchFlag |= 2;
    }
    if (hasStyleBinding && !isComponent2) {
      patchFlag |= 4;
    }
    if (dynamicPropNames.length) {
      patchFlag |= 8;
    }
    if (hasHydrationEventBinding) {
      patchFlag |= 32;
    }
  }
  if (!shouldUseBlock && (patchFlag === 0 || patchFlag === 32) && (hasRef || hasVnodeHook || runtimeDirectives.length > 0)) {
    patchFlag |= 512;
  }
  if (!context.inSSR && propsExpression) {
    switch (propsExpression.type) {
      case 15:
        let classKeyIndex = -1;
        let styleKeyIndex = -1;
        let hasDynamicKey = false;
        for (let i = 0; i < propsExpression.properties.length; i++) {
          const key = propsExpression.properties[i].key;
          if (isStaticExp(key)) {
            if (key.content === "class") {
              classKeyIndex = i;
            } else if (key.content === "style") {
              styleKeyIndex = i;
            }
          } else if (!key.isHandlerKey) {
            hasDynamicKey = true;
          }
        }
        const classProp = propsExpression.properties[classKeyIndex];
        const styleProp = propsExpression.properties[styleKeyIndex];
        if (!hasDynamicKey) {
          if (classProp && !isStaticExp(classProp.value)) {
            classProp.value = createCallExpression(
              context.helper(NORMALIZE_CLASS),
              [classProp.value]
            );
          }
          if (styleProp && // the static style is compiled into an object,
          // so use `hasStyleBinding` to ensure that it is a dynamic style binding
          (hasStyleBinding || styleProp.value.type === 4 && styleProp.value.content.trim()[0] === `[` || // v-bind:style and style both exist,
          // v-bind:style with static literal object
          styleProp.value.type === 17)) {
            styleProp.value = createCallExpression(
              context.helper(NORMALIZE_STYLE),
              [styleProp.value]
            );
          }
        } else {
          propsExpression = createCallExpression(
            context.helper(NORMALIZE_PROPS),
            [propsExpression]
          );
        }
        break;
      case 14:
        break;
      default:
        propsExpression = createCallExpression(
          context.helper(NORMALIZE_PROPS),
          [
            createCallExpression(context.helper(GUARD_REACTIVE_PROPS), [
              propsExpression
            ])
          ]
        );
        break;
    }
  }
  return {
    props: propsExpression,
    directives: runtimeDirectives,
    patchFlag,
    dynamicPropNames,
    shouldUseBlock
  };
}
function dedupeProperties(properties) {
  const knownProps = /* @__PURE__ */ new Map();
  const deduped = [];
  for (let i = 0; i < properties.length; i++) {
    const prop = properties[i];
    if (prop.key.type === 8 || !prop.key.isStatic) {
      deduped.push(prop);
      continue;
    }
    const name = prop.key.content;
    const existing = knownProps.get(name);
    if (existing) {
      if (name === "style" || name === "class" || isOn(name)) {
        mergeAsArray(existing, prop);
      }
    } else {
      knownProps.set(name, prop);
      deduped.push(prop);
    }
  }
  return deduped;
}
function mergeAsArray(existing, incoming) {
  if (existing.value.type === 17) {
    existing.value.elements.push(incoming.value);
  } else {
    existing.value = createArrayExpression(
      [existing.value, incoming.value],
      existing.loc
    );
  }
}
function buildDirectiveArgs(dir, context) {
  const dirArgs = [];
  const runtime = directiveImportMap.get(dir);
  if (runtime) {
    dirArgs.push(context.helperString(runtime));
  } else {
    {
      context.helper(RESOLVE_DIRECTIVE);
      context.directives.add(dir.name);
      dirArgs.push(toValidAssetId(dir.name, `directive`));
    }
  }
  const { loc } = dir;
  if (dir.exp) dirArgs.push(dir.exp);
  if (dir.arg) {
    if (!dir.exp) {
      dirArgs.push(`void 0`);
    }
    dirArgs.push(dir.arg);
  }
  if (Object.keys(dir.modifiers).length) {
    if (!dir.arg) {
      if (!dir.exp) {
        dirArgs.push(`void 0`);
      }
      dirArgs.push(`void 0`);
    }
    const trueExpression = createSimpleExpression(`true`, false, loc);
    dirArgs.push(
      createObjectExpression(
        dir.modifiers.map(
          (modifier) => createObjectProperty(modifier, trueExpression)
        ),
        loc
      )
    );
  }
  return createArrayExpression(dirArgs, dir.loc);
}
function stringifyDynamicPropNames(props) {
  let propsNamesString = `[`;
  for (let i = 0, l = props.length; i < l; i++) {
    propsNamesString += JSON.stringify(props[i]);
    if (i < l - 1) propsNamesString += ", ";
  }
  return propsNamesString + `]`;
}
function isComponentTag(tag) {
  return tag === "component" || tag === "Component";
}
const transformSlotOutlet = (node, context) => {
  if (isSlotOutlet(node)) {
    const { children, loc } = node;
    const { slotName, slotProps } = processSlotOutlet(node, context);
    const slotArgs = [
      context.prefixIdentifiers ? `_ctx.$slots` : `$slots`,
      slotName,
      "{}",
      "undefined",
      "true"
    ];
    let expectedLen = 2;
    if (slotProps) {
      slotArgs[2] = slotProps;
      expectedLen = 3;
    }
    if (children.length) {
      slotArgs[3] = createFunctionExpression([], children, false, false, loc);
      expectedLen = 4;
    }
    if (context.scopeId && !context.slotted) {
      expectedLen = 5;
    }
    slotArgs.splice(expectedLen);
    node.codegenNode = createCallExpression(
      context.helper(RENDER_SLOT),
      slotArgs,
      loc
    );
  }
};
function processSlotOutlet(node, context) {
  let slotName = `"default"`;
  let slotProps = void 0;
  const nonNameProps = [];
  for (let i = 0; i < node.props.length; i++) {
    const p2 = node.props[i];
    if (p2.type === 6) {
      if (p2.value) {
        if (p2.name === "name") {
          slotName = JSON.stringify(p2.value.content);
        } else {
          p2.name = camelize(p2.name);
          nonNameProps.push(p2);
        }
      }
    } else {
      if (p2.name === "bind" && isStaticArgOf(p2.arg, "name")) {
        if (p2.exp) {
          slotName = p2.exp;
        } else if (p2.arg && p2.arg.type === 4) {
          const name = camelize(p2.arg.content);
          slotName = p2.exp = createSimpleExpression(name, false, p2.arg.loc);
        }
      } else {
        if (p2.name === "bind" && p2.arg && isStaticExp(p2.arg)) {
          p2.arg.content = camelize(p2.arg.content);
        }
        nonNameProps.push(p2);
      }
    }
  }
  if (nonNameProps.length > 0) {
    const { props, directives } = buildProps(
      node,
      context,
      nonNameProps,
      false,
      false
    );
    slotProps = props;
    if (directives.length) {
      context.onError(
        createCompilerError(
          36,
          directives[0].loc
        )
      );
    }
  }
  return {
    slotName,
    slotProps
  };
}
const fnExpRE = /^\s*(async\s*)?(\([^)]*?\)|[\w$_]+)\s*(:[^=]+)?=>|^\s*(async\s+)?function(?:\s+[\w$]+)?\s*\(/;
const transformOn$1 = (dir, node, context, augmentor) => {
  const { loc, modifiers, arg } = dir;
  if (!dir.exp && !modifiers.length) {
    context.onError(createCompilerError(35, loc));
  }
  let eventName;
  if (arg.type === 4) {
    if (arg.isStatic) {
      let rawName = arg.content;
      if (rawName.startsWith("vnode")) {
        context.onError(createCompilerError(51, arg.loc));
      }
      if (rawName.startsWith("vue:")) {
        rawName = `vnode-${rawName.slice(4)}`;
      }
      const eventString = node.tagType !== 0 || rawName.startsWith("vnode") || !/[A-Z]/.test(rawName) ? (
        // for non-element and vnode lifecycle event listeners, auto convert
        // it to camelCase. See issue #2249
        toHandlerKey(camelize(rawName))
      ) : (
        // preserve case for plain element listeners that have uppercase
        // letters, as these may be custom elements' custom events
        `on:${rawName}`
      );
      eventName = createSimpleExpression(eventString, true, arg.loc);
    } else {
      eventName = createCompoundExpression([
        `${context.helperString(TO_HANDLER_KEY)}(`,
        arg,
        `)`
      ]);
    }
  } else {
    eventName = arg;
    eventName.children.unshift(`${context.helperString(TO_HANDLER_KEY)}(`);
    eventName.children.push(`)`);
  }
  let exp = dir.exp;
  if (exp && !exp.content.trim()) {
    exp = void 0;
  }
  let shouldCache = context.cacheHandlers && !exp && !context.inVOnce;
  if (exp) {
    const isMemberExp = isMemberExpression(exp.content);
    const isInlineStatement = !(isMemberExp || fnExpRE.test(exp.content));
    const hasMultipleStatements = exp.content.includes(`;`);
    {
      validateBrowserExpression(
        exp,
        context,
        false,
        hasMultipleStatements
      );
    }
    if (isInlineStatement || shouldCache && isMemberExp) {
      exp = createCompoundExpression([
        `${isInlineStatement ? `$event` : `${``}(...args)`} => ${hasMultipleStatements ? `{` : `(`}`,
        exp,
        hasMultipleStatements ? `}` : `)`
      ]);
    }
  }
  let ret = {
    props: [
      createObjectProperty(
        eventName,
        exp || createSimpleExpression(`() => {}`, false, loc)
      )
    ]
  };
  if (augmentor) {
    ret = augmentor(ret);
  }
  if (shouldCache) {
    ret.props[0].value = context.cache(ret.props[0].value);
  }
  ret.props.forEach((p2) => p2.key.isHandlerKey = true);
  return ret;
};
const transformText = (node, context) => {
  if (node.type === 0 || node.type === 1 || node.type === 11 || node.type === 10) {
    return () => {
      const children = node.children;
      let currentContainer = void 0;
      let hasText = false;
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (isText$1(child)) {
          hasText = true;
          for (let j = i + 1; j < children.length; j++) {
            const next = children[j];
            if (isText$1(next)) {
              if (!currentContainer) {
                currentContainer = children[i] = createCompoundExpression(
                  [child],
                  child.loc
                );
              }
              currentContainer.children.push(` + `, next);
              children.splice(j, 1);
              j--;
            } else {
              currentContainer = void 0;
              break;
            }
          }
        }
      }
      if (!hasText || // if this is a plain element with a single text child, leave it
      // as-is since the runtime has dedicated fast path for this by directly
      // setting textContent of the element.
      // for component root it's always normalized anyway.
      children.length === 1 && (node.type === 0 || node.type === 1 && node.tagType === 0 && // #3756
      // custom directives can potentially add DOM elements arbitrarily,
      // we need to avoid setting textContent of the element at runtime
      // to avoid accidentally overwriting the DOM elements added
      // by the user through custom directives.
      !node.props.find(
        (p2) => p2.type === 7 && !context.directiveTransforms[p2.name]
      ) && // in compat mode, <template> tags with no special directives
      // will be rendered as a fragment so its children must be
      // converted into vnodes.
      !(node.tag === "template"))) {
        return;
      }
      for (let i = 0; i < children.length; i++) {
        const child = children[i];
        if (isText$1(child) || child.type === 8) {
          const callArgs = [];
          if (child.type !== 2 || child.content !== " ") {
            callArgs.push(child);
          }
          if (!context.ssr && getConstantType(child, context) === 0) {
            callArgs.push(
              `1 /* ${PatchFlagNames[1]} */`
            );
          }
          children[i] = {
            type: 12,
            content: child,
            loc: child.loc,
            codegenNode: createCallExpression(
              context.helper(CREATE_TEXT),
              callArgs
            )
          };
        }
      }
    };
  }
};
const seen$1 = /* @__PURE__ */ new WeakSet();
const transformOnce = (node, context) => {
  if (node.type === 1 && findDir(node, "once", true)) {
    if (seen$1.has(node) || context.inVOnce || context.inSSR) {
      return;
    }
    seen$1.add(node);
    context.inVOnce = true;
    context.helper(SET_BLOCK_TRACKING);
    return () => {
      context.inVOnce = false;
      const cur = context.currentNode;
      if (cur.codegenNode) {
        cur.codegenNode = context.cache(
          cur.codegenNode,
          true
          /* isVNode */
        );
      }
    };
  }
};
const transformModel$1 = (dir, node, context) => {
  const { exp, arg } = dir;
  if (!exp) {
    context.onError(
      createCompilerError(41, dir.loc)
    );
    return createTransformProps();
  }
  const rawExp = exp.loc.source;
  const expString = exp.type === 4 ? exp.content : rawExp;
  const bindingType = context.bindingMetadata[rawExp];
  if (bindingType === "props" || bindingType === "props-aliased") {
    context.onError(createCompilerError(44, exp.loc));
    return createTransformProps();
  }
  const maybeRef = false;
  if (!expString.trim() || !isMemberExpression(expString) && !maybeRef) {
    context.onError(
      createCompilerError(42, exp.loc)
    );
    return createTransformProps();
  }
  const propName = arg ? arg : createSimpleExpression("modelValue", true);
  const eventName = arg ? isStaticExp(arg) ? `onUpdate:${camelize(arg.content)}` : createCompoundExpression(['"onUpdate:" + ', arg]) : `onUpdate:modelValue`;
  let assignmentExp;
  const eventArg = context.isTS ? `($event: any)` : `$event`;
  {
    assignmentExp = createCompoundExpression([
      `${eventArg} => ((`,
      exp,
      `) = $event)`
    ]);
  }
  const props = [
    // modelValue: foo
    createObjectProperty(propName, dir.exp),
    // "onUpdate:modelValue": $event => (foo = $event)
    createObjectProperty(eventName, assignmentExp)
  ];
  if (dir.modifiers.length && node.tagType === 1) {
    const modifiers = dir.modifiers.map((m2) => (isSimpleIdentifier(m2) ? m2 : JSON.stringify(m2)) + `: true`).join(`, `);
    const modifiersKey = arg ? isStaticExp(arg) ? `${arg.content}Modifiers` : createCompoundExpression([arg, ' + "Modifiers"']) : `modelModifiers`;
    props.push(
      createObjectProperty(
        modifiersKey,
        createSimpleExpression(
          `{ ${modifiers} }`,
          false,
          dir.loc,
          2
        )
      )
    );
  }
  return createTransformProps(props);
};
function createTransformProps(props = []) {
  return { props };
}
const validDivisionCharRE = /[\w).+\-_$\]]/;
const transformFilter = (node, context) => {
  if (!isCompatEnabled("COMPILER_FILTERS", context)) {
    return;
  }
  if (node.type === 5) {
    rewriteFilter(node.content, context);
  }
  if (node.type === 1) {
    node.props.forEach((prop) => {
      if (prop.type === 7 && prop.name !== "for" && prop.exp) {
        rewriteFilter(prop.exp, context);
      }
    });
  }
};
function rewriteFilter(node, context) {
  if (node.type === 4) {
    parseFilter(node, context);
  } else {
    for (let i = 0; i < node.children.length; i++) {
      const child = node.children[i];
      if (typeof child !== "object") continue;
      if (child.type === 4) {
        parseFilter(child, context);
      } else if (child.type === 8) {
        rewriteFilter(node, context);
      } else if (child.type === 5) {
        rewriteFilter(child.content, context);
      }
    }
  }
}
function parseFilter(node, context) {
  const exp = node.content;
  let inSingle = false;
  let inDouble = false;
  let inTemplateString = false;
  let inRegex = false;
  let curly = 0;
  let square = 0;
  let paren = 0;
  let lastFilterIndex = 0;
  let c, prev, i, expression, filters = [];
  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 39 && prev !== 92) inSingle = false;
    } else if (inDouble) {
      if (c === 34 && prev !== 92) inDouble = false;
    } else if (inTemplateString) {
      if (c === 96 && prev !== 92) inTemplateString = false;
    } else if (inRegex) {
      if (c === 47 && prev !== 92) inRegex = false;
    } else if (c === 124 && // pipe
    exp.charCodeAt(i + 1) !== 124 && exp.charCodeAt(i - 1) !== 124 && !curly && !square && !paren) {
      if (expression === void 0) {
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 34:
          inDouble = true;
          break;
        case 39:
          inSingle = true;
          break;
        case 96:
          inTemplateString = true;
          break;
        case 40:
          paren++;
          break;
        case 41:
          paren--;
          break;
        case 91:
          square++;
          break;
        case 93:
          square--;
          break;
        case 123:
          curly++;
          break;
        case 125:
          curly--;
          break;
      }
      if (c === 47) {
        let j = i - 1;
        let p2;
        for (; j >= 0; j--) {
          p2 = exp.charAt(j);
          if (p2 !== " ") break;
        }
        if (!p2 || !validDivisionCharRE.test(p2)) {
          inRegex = true;
        }
      }
    }
  }
  if (expression === void 0) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }
  function pushFilter() {
    filters.push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }
  if (filters.length) {
    warnDeprecation(
      "COMPILER_FILTERS",
      context,
      node.loc
    );
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i], context);
    }
    node.content = expression;
    node.ast = void 0;
  }
}
function wrapFilter(exp, filter, context) {
  context.helper(RESOLVE_FILTER);
  const i = filter.indexOf("(");
  if (i < 0) {
    context.filters.add(filter);
    return `${toValidAssetId(filter, "filter")}(${exp})`;
  } else {
    const name = filter.slice(0, i);
    const args = filter.slice(i + 1);
    context.filters.add(name);
    return `${toValidAssetId(name, "filter")}(${exp}${args !== ")" ? "," + args : args}`;
  }
}
const seen = /* @__PURE__ */ new WeakSet();
const transformMemo = (node, context) => {
  if (node.type === 1) {
    const dir = findDir(node, "memo");
    if (!dir || seen.has(node)) {
      return;
    }
    seen.add(node);
    return () => {
      const codegenNode = node.codegenNode || context.currentNode.codegenNode;
      if (codegenNode && codegenNode.type === 13) {
        if (node.tagType !== 1) {
          convertToBlock(codegenNode, context);
        }
        node.codegenNode = createCallExpression(context.helper(WITH_MEMO), [
          dir.exp,
          createFunctionExpression(void 0, codegenNode),
          `_cache`,
          String(context.cached++)
        ]);
      }
    };
  }
};
function getBaseTransformPreset(prefixIdentifiers) {
  return [
    [
      transformOnce,
      transformIf,
      transformMemo,
      transformFor,
      ...[transformFilter],
      ...[transformExpression],
      transformSlotOutlet,
      transformElement,
      trackSlotScopes,
      transformText
    ],
    {
      on: transformOn$1,
      bind: transformBind,
      model: transformModel$1
    }
  ];
}
function baseCompile(source, options = {}) {
  const onError = options.onError || defaultOnError;
  const isModuleMode = options.mode === "module";
  {
    if (options.prefixIdentifiers === true) {
      onError(createCompilerError(47));
    } else if (isModuleMode) {
      onError(createCompilerError(48));
    }
  }
  const prefixIdentifiers = false;
  if (options.cacheHandlers) {
    onError(createCompilerError(49));
  }
  if (options.scopeId && !isModuleMode) {
    onError(createCompilerError(50));
  }
  const resolvedOptions = extend({}, options, {
    prefixIdentifiers
  });
  const ast = isString(source) ? baseParse(source, resolvedOptions) : source;
  const [nodeTransforms, directiveTransforms] = getBaseTransformPreset();
  transform(
    ast,
    extend({}, resolvedOptions, {
      nodeTransforms: [
        ...nodeTransforms,
        ...options.nodeTransforms || []
        // user transforms
      ],
      directiveTransforms: extend(
        {},
        directiveTransforms,
        options.directiveTransforms || {}
        // user transforms
      )
    })
  );
  return generate(ast, resolvedOptions);
}
const noopDirectiveTransform = () => ({ props: [] });
/**
* @vue/compiler-dom v3.4.29
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
const V_MODEL_RADIO = Symbol(`vModelRadio`);
const V_MODEL_CHECKBOX = Symbol(`vModelCheckbox`);
const V_MODEL_TEXT = Symbol(`vModelText`);
const V_MODEL_SELECT = Symbol(`vModelSelect`);
const V_MODEL_DYNAMIC = Symbol(`vModelDynamic`);
const V_ON_WITH_MODIFIERS = Symbol(`vOnModifiersGuard`);
const V_ON_WITH_KEYS = Symbol(`vOnKeysGuard`);
const V_SHOW = Symbol(`vShow`);
const TRANSITION = Symbol(`Transition`);
const TRANSITION_GROUP = Symbol(`TransitionGroup`);
registerRuntimeHelpers({
  [V_MODEL_RADIO]: `vModelRadio`,
  [V_MODEL_CHECKBOX]: `vModelCheckbox`,
  [V_MODEL_TEXT]: `vModelText`,
  [V_MODEL_SELECT]: `vModelSelect`,
  [V_MODEL_DYNAMIC]: `vModelDynamic`,
  [V_ON_WITH_MODIFIERS]: `withModifiers`,
  [V_ON_WITH_KEYS]: `withKeys`,
  [V_SHOW]: `vShow`,
  [TRANSITION]: `Transition`,
  [TRANSITION_GROUP]: `TransitionGroup`
});
let decoder;
function decodeHtmlBrowser(raw, asAttr = false) {
  if (!decoder) {
    decoder = document.createElement("div");
  }
  if (asAttr) {
    decoder.innerHTML = `<div foo="${raw.replace(/"/g, "&quot;")}">`;
    return decoder.children[0].getAttribute("foo");
  } else {
    decoder.innerHTML = raw;
    return decoder.textContent;
  }
}
const parserOptions = {
  parseMode: "html",
  isVoidTag,
  isNativeTag: (tag) => isHTMLTag(tag) || isSVGTag(tag) || isMathMLTag(tag),
  isPreTag: (tag) => tag === "pre",
  decodeEntities: decodeHtmlBrowser,
  isBuiltInComponent: (tag) => {
    if (tag === "Transition" || tag === "transition") {
      return TRANSITION;
    } else if (tag === "TransitionGroup" || tag === "transition-group") {
      return TRANSITION_GROUP;
    }
  },
  // https://html.spec.whatwg.org/multipage/parsing.html#tree-construction-dispatcher
  getNamespace(tag, parent, rootNamespace) {
    let ns = parent ? parent.ns : rootNamespace;
    if (parent && ns === 2) {
      if (parent.tag === "annotation-xml") {
        if (tag === "svg") {
          return 1;
        }
        if (parent.props.some(
          (a) => a.type === 6 && a.name === "encoding" && a.value != null && (a.value.content === "text/html" || a.value.content === "application/xhtml+xml")
        )) {
          ns = 0;
        }
      } else if (/^m(?:[ions]|text)$/.test(parent.tag) && tag !== "mglyph" && tag !== "malignmark") {
        ns = 0;
      }
    } else if (parent && ns === 1) {
      if (parent.tag === "foreignObject" || parent.tag === "desc" || parent.tag === "title") {
        ns = 0;
      }
    }
    if (ns === 0) {
      if (tag === "svg") {
        return 1;
      }
      if (tag === "math") {
        return 2;
      }
    }
    return ns;
  }
};
const transformStyle = (node) => {
  if (node.type === 1) {
    node.props.forEach((p2, i) => {
      if (p2.type === 6 && p2.name === "style" && p2.value) {
        node.props[i] = {
          type: 7,
          name: `bind`,
          arg: createSimpleExpression(`style`, true, p2.loc),
          exp: parseInlineCSS(p2.value.content, p2.loc),
          modifiers: [],
          loc: p2.loc
        };
      }
    });
  }
};
const parseInlineCSS = (cssText, loc) => {
  const normalized = parseStringStyle(cssText);
  return createSimpleExpression(
    JSON.stringify(normalized),
    false,
    loc,
    3
  );
};
function createDOMCompilerError(code, loc) {
  return createCompilerError(
    code,
    loc,
    DOMErrorMessages
  );
}
const DOMErrorMessages = {
  [53]: `v-html is missing expression.`,
  [54]: `v-html will override element children.`,
  [55]: `v-text is missing expression.`,
  [56]: `v-text will override element children.`,
  [57]: `v-model can only be used on <input>, <textarea> and <select> elements.`,
  [58]: `v-model argument is not supported on plain elements.`,
  [59]: `v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.`,
  [60]: `Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.`,
  [61]: `v-show is missing expression.`,
  [62]: `<Transition> expects exactly one child element or component.`,
  [63]: `Tags with side effect (<script> and <style>) are ignored in client component templates.`
};
const transformVHtml = (dir, node, context) => {
  const { exp, loc } = dir;
  if (!exp) {
    context.onError(
      createDOMCompilerError(53, loc)
    );
  }
  if (node.children.length) {
    context.onError(
      createDOMCompilerError(54, loc)
    );
    node.children.length = 0;
  }
  return {
    props: [
      createObjectProperty(
        createSimpleExpression(`innerHTML`, true, loc),
        exp || createSimpleExpression("", true)
      )
    ]
  };
};
const transformVText = (dir, node, context) => {
  const { exp, loc } = dir;
  if (!exp) {
    context.onError(
      createDOMCompilerError(55, loc)
    );
  }
  if (node.children.length) {
    context.onError(
      createDOMCompilerError(56, loc)
    );
    node.children.length = 0;
  }
  return {
    props: [
      createObjectProperty(
        createSimpleExpression(`textContent`, true),
        exp ? getConstantType(exp, context) > 0 ? exp : createCallExpression(
          context.helperString(TO_DISPLAY_STRING),
          [exp],
          loc
        ) : createSimpleExpression("", true)
      )
    ]
  };
};
const transformModel = (dir, node, context) => {
  const baseResult = transformModel$1(dir, node, context);
  if (!baseResult.props.length || node.tagType === 1) {
    return baseResult;
  }
  if (dir.arg) {
    context.onError(
      createDOMCompilerError(
        58,
        dir.arg.loc
      )
    );
  }
  function checkDuplicatedValue() {
    const value = findDir(node, "bind");
    if (value && isStaticArgOf(value.arg, "value")) {
      context.onError(
        createDOMCompilerError(
          60,
          value.loc
        )
      );
    }
  }
  const { tag } = node;
  const isCustomElement = context.isCustomElement(tag);
  if (tag === "input" || tag === "textarea" || tag === "select" || isCustomElement) {
    let directiveToUse = V_MODEL_TEXT;
    let isInvalidType = false;
    if (tag === "input" || isCustomElement) {
      const type = findProp(node, `type`);
      if (type) {
        if (type.type === 7) {
          directiveToUse = V_MODEL_DYNAMIC;
        } else if (type.value) {
          switch (type.value.content) {
            case "radio":
              directiveToUse = V_MODEL_RADIO;
              break;
            case "checkbox":
              directiveToUse = V_MODEL_CHECKBOX;
              break;
            case "file":
              isInvalidType = true;
              context.onError(
                createDOMCompilerError(
                  59,
                  dir.loc
                )
              );
              break;
            default:
              checkDuplicatedValue();
              break;
          }
        }
      } else if (hasDynamicKeyVBind(node)) {
        directiveToUse = V_MODEL_DYNAMIC;
      } else {
        checkDuplicatedValue();
      }
    } else if (tag === "select") {
      directiveToUse = V_MODEL_SELECT;
    } else {
      checkDuplicatedValue();
    }
    if (!isInvalidType) {
      baseResult.needRuntime = context.helper(directiveToUse);
    }
  } else {
    context.onError(
      createDOMCompilerError(
        57,
        dir.loc
      )
    );
  }
  baseResult.props = baseResult.props.filter(
    (p2) => !(p2.key.type === 4 && p2.key.content === "modelValue")
  );
  return baseResult;
};
const isEventOptionModifier = /* @__PURE__ */ makeMap(`passive,once,capture`);
const isNonKeyModifier = /* @__PURE__ */ makeMap(
  // event propagation management
  `stop,prevent,self,ctrl,shift,alt,meta,exact,middle`
);
const maybeKeyModifier = /* @__PURE__ */ makeMap("left,right");
const isKeyboardEvent = /* @__PURE__ */ makeMap(
  `onkeyup,onkeydown,onkeypress`,
  true
);
const resolveModifiers = (key, modifiers, context, loc) => {
  const keyModifiers = [];
  const nonKeyModifiers = [];
  const eventOptionModifiers = [];
  for (let i = 0; i < modifiers.length; i++) {
    const modifier = modifiers[i];
    if (modifier === "native" && checkCompatEnabled(
      "COMPILER_V_ON_NATIVE",
      context,
      loc
    )) {
      eventOptionModifiers.push(modifier);
    } else if (isEventOptionModifier(modifier)) {
      eventOptionModifiers.push(modifier);
    } else {
      if (maybeKeyModifier(modifier)) {
        if (isStaticExp(key)) {
          if (isKeyboardEvent(key.content)) {
            keyModifiers.push(modifier);
          } else {
            nonKeyModifiers.push(modifier);
          }
        } else {
          keyModifiers.push(modifier);
          nonKeyModifiers.push(modifier);
        }
      } else {
        if (isNonKeyModifier(modifier)) {
          nonKeyModifiers.push(modifier);
        } else {
          keyModifiers.push(modifier);
        }
      }
    }
  }
  return {
    keyModifiers,
    nonKeyModifiers,
    eventOptionModifiers
  };
};
const transformClick = (key, event) => {
  const isStaticClick = isStaticExp(key) && key.content.toLowerCase() === "onclick";
  return isStaticClick ? createSimpleExpression(event, true) : key.type !== 4 ? createCompoundExpression([
    `(`,
    key,
    `) === "onClick" ? "${event}" : (`,
    key,
    `)`
  ]) : key;
};
const transformOn = (dir, node, context) => {
  return transformOn$1(dir, node, context, (baseResult) => {
    const { modifiers } = dir;
    if (!modifiers.length) return baseResult;
    let { key, value: handlerExp } = baseResult.props[0];
    const { keyModifiers, nonKeyModifiers, eventOptionModifiers } = resolveModifiers(key, modifiers, context, dir.loc);
    if (nonKeyModifiers.includes("right")) {
      key = transformClick(key, `onContextmenu`);
    }
    if (nonKeyModifiers.includes("middle")) {
      key = transformClick(key, `onMouseup`);
    }
    if (nonKeyModifiers.length) {
      handlerExp = createCallExpression(context.helper(V_ON_WITH_MODIFIERS), [
        handlerExp,
        JSON.stringify(nonKeyModifiers)
      ]);
    }
    if (keyModifiers.length && // if event name is dynamic, always wrap with keys guard
    (!isStaticExp(key) || isKeyboardEvent(key.content))) {
      handlerExp = createCallExpression(context.helper(V_ON_WITH_KEYS), [
        handlerExp,
        JSON.stringify(keyModifiers)
      ]);
    }
    if (eventOptionModifiers.length) {
      const modifierPostfix = eventOptionModifiers.map(capitalize).join("");
      key = isStaticExp(key) ? createSimpleExpression(`${key.content}${modifierPostfix}`, true) : createCompoundExpression([`(`, key, `) + "${modifierPostfix}"`]);
    }
    return {
      props: [createObjectProperty(key, handlerExp)]
    };
  });
};
const transformShow = (dir, node, context) => {
  const { exp, loc } = dir;
  if (!exp) {
    context.onError(
      createDOMCompilerError(61, loc)
    );
  }
  return {
    props: [],
    needRuntime: context.helper(V_SHOW)
  };
};
const transformTransition = (node, context) => {
  if (node.type === 1 && node.tagType === 1) {
    const component = context.isBuiltInComponent(node.tag);
    if (component === TRANSITION) {
      return () => {
        if (!node.children.length) {
          return;
        }
        if (hasMultipleChildren(node)) {
          context.onError(
            createDOMCompilerError(
              62,
              {
                start: node.children[0].loc.start,
                end: node.children[node.children.length - 1].loc.end,
                source: ""
              }
            )
          );
        }
        const child = node.children[0];
        if (child.type === 1) {
          for (const p2 of child.props) {
            if (p2.type === 7 && p2.name === "show") {
              node.props.push({
                type: 6,
                name: "persisted",
                nameLoc: node.loc,
                value: void 0,
                loc: node.loc
              });
            }
          }
        }
      };
    }
  }
};
function hasMultipleChildren(node) {
  const children = node.children = node.children.filter(
    (c) => c.type !== 3 && !(c.type === 2 && !c.content.trim())
  );
  const child = children[0];
  return children.length !== 1 || child.type === 11 || child.type === 9 && child.branches.some(hasMultipleChildren);
}
const ignoreSideEffectTags = (node, context) => {
  if (node.type === 1 && node.tagType === 0 && (node.tag === "script" || node.tag === "style")) {
    context.onError(
      createDOMCompilerError(
        63,
        node.loc
      )
    );
    context.removeNode();
  }
};
const DOMNodeTransforms = [
  transformStyle,
  ...[transformTransition]
];
const DOMDirectiveTransforms = {
  cloak: noopDirectiveTransform,
  html: transformVHtml,
  text: transformVText,
  model: transformModel,
  // override compiler-core
  on: transformOn,
  // override compiler-core
  show: transformShow
};
function compile(src, options = {}) {
  return baseCompile(
    src,
    extend({}, parserOptions, options, {
      nodeTransforms: [
        // ignore <script> and <tag>
        // this is not put inside DOMNodeTransforms because that list is used
        // by compiler-ssr to generate vnode fallback branches
        ignoreSideEffectTags,
        ...DOMNodeTransforms,
        ...options.nodeTransforms || []
      ],
      directiveTransforms: extend(
        {},
        DOMDirectiveTransforms,
        options.directiveTransforms || {}
      ),
      transformHoist: null
    })
  );
}
/**
* vue v3.4.29
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/
function initDev() {
  {
    initCustomFormatter();
  }
}
{
  initDev();
}
const compileCache = /* @__PURE__ */ new WeakMap();
function getCache(options) {
  let c = compileCache.get(options != null ? options : EMPTY_OBJ);
  if (!c) {
    c = /* @__PURE__ */ Object.create(null);
    compileCache.set(options != null ? options : EMPTY_OBJ, c);
  }
  return c;
}
function compileToFunction(template, options) {
  if (!isString(template)) {
    if (template.nodeType) {
      template = template.innerHTML;
    } else {
      warn(`invalid template option: `, template);
      return NOOP;
    }
  }
  const key = template;
  const cache = getCache(options);
  const cached = cache[key];
  if (cached) {
    return cached;
  }
  if (template[0] === "#") {
    const el = document.querySelector(template);
    if (!el) {
      warn(`Template element not found or is empty: ${template}`);
    }
    template = el ? el.innerHTML : ``;
  }
  const opts = extend(
    {
      hoistStatic: true,
      onError,
      onWarn: (e) => onError(e, true)
    },
    options
  );
  if (!opts.isCustomElement && typeof customElements !== "undefined") {
    opts.isCustomElement = (tag) => !!customElements.get(tag);
  }
  const { code } = compile(template, opts);
  function onError(err, asWarning = false) {
    const message = asWarning ? err.message : `Template compilation error: ${err.message}`;
    const codeFrame = err.loc && generateCodeFrame(
      template,
      err.loc.start.offset,
      err.loc.end.offset
    );
    warn(codeFrame ? `${message}
${codeFrame}` : message);
  }
  const render2 = new Function("Vue", code)(runtimeDom);
  render2._rc = true;
  return cache[key] = render2;
}
registerRuntimeCompiler(compileToFunction);
const min = Math.min;
const max = Math.max;
const round = Math.round;
const floor = Math.floor;
const createCoords = (v) => ({
  x: v,
  y: v
});
const oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
const oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl) return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x: x2,
    y,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y,
    left: x2,
    right: x2 + width,
    bottom: y + height,
    x: x2,
    y
  };
}
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
const computePosition$1 = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x: x2,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name,
      fn
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset: reset2
    } = await fn({
      x: x2,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x2 = nextX != null ? nextX : x2;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset2 && resetCount <= 50) {
      resetCount++;
      if (typeof reset2 === "object") {
        if (reset2.placement) {
          statefulPlacement = reset2.placement;
        }
        if (reset2.rects) {
          rects = reset2.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset2.rects;
        }
        ({
          x: x2,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
    }
  }
  return {
    x: x2,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x: x2,
    y,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x: x2,
    y,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
const arrow$1 = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const {
      x: x2,
      y,
      placement,
      rects,
      platform: platform2,
      elements,
      middlewareData
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x: x2,
      y
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform2.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
    const min$1 = minPadding;
    const max2 = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset2 = clamp(min$1, center, max2);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset2 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset2,
        centerOffset: center - offset2 - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
const flip$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides[0]], overflow[sides[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$map$so;
              const placement2 = (_overflowsData$map$so = overflowsData.map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
const offset$1 = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x: x2,
        y,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x2 + diffCoords.x,
        y: y + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
const shift$1 = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x: x2,
        y,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x3,
              y: y2
            } = _ref;
            return {
              x: x3,
              y: y2
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x: x2,
        y
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x2,
          y: limitedCoords.y - y
        }
      };
    }
  };
};
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isContainingBlock(element) {
  const webkit = isWebKit();
  const css = getComputedStyle(element);
  return css.transform !== "none" || css.perspective !== "none" || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports) return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getCssDimensions(element) {
  const css = getComputedStyle(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x2 = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;
  if (!x2 || !Number.isFinite(x2)) {
    x2 = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x: x2,
    y
  };
}
const noOffsets = /* @__PURE__ */ createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x2 = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = currentWin.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x2 *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x2 += left;
      y += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = currentWin.frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x: x2,
    y
  });
}
const topLayerSelectors = [":popover-open", ":modal"];
function isTopLayer(element) {
  return topLayerSelectors.some((selector) => {
    try {
      return element.matches(selector);
    } catch (e) {
      return false;
    }
  });
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x2 = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle(body).direction === "rtl") {
    x2 += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x: x2,
    y
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x2 = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x2 = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x2,
    y
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x2 = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x: x2,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  const x2 = rect.left + scroll.scrollLeft - offsets.x;
  const y = rect.top + scroll.scrollTop - offsets.y;
  return {
    x: x2,
    y,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element) {
  return getComputedStyle(element).position === "static";
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}
function getOffsetParent(element, polyfill) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}
const getElementRects = async function(data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  const floatingDimensions = await getDimensionsFn(data.floating);
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      width: floatingDimensions.width,
      height: floatingDimensions.height
    }
  };
};
function isRTL(element) {
  return getComputedStyle(element).direction === "rtl";
}
const platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
const offset = offset$1;
const shift = shift$1;
const flip = flip$1;
const arrow = arrow$1;
const computePosition = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition$1(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};
const _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};
const _sfc_main$e = {
  props: {
    anchorElemId: {
      type: String,
      default: null
    },
    onClick: {
      type: Boolean,
      default: false
    }
  },
  setup(props) {
    const tooltipElem = ref(null);
    const arrowElem = ref(null);
    const anchorElem = ref(null);
    const state = reactive({
      isVisible: false
    });
    onMounted(() => {
      anchorElem.value = props.anchorElemId !== null ? document.querySelector("#" + props.anchorElemId) : tooltipElem.value.previousElementSibling;
      if (props.onClick) {
        enableClickListeners();
      } else {
        enableHoverListeners();
      }
    });
    const enableHoverListeners = () => {
      [
        ["mouseenter", showTooltip],
        ["mouseleave", hideTooltip],
        ["focus", hideTooltip],
        ["blur", hideTooltip]
      ].forEach(([event, listener]) => {
        anchorElem.value.addEventListener(event, listener);
      });
    };
    const enableClickListeners = () => {
      anchorElem.value.addEventListener("click", toggleTooltip);
      document.addEventListener("click", function(evt) {
        if (state.isVisible) {
          let clickedElem = evt.target;
          if (clickedElem.closest("[role=tooltip]") == null && clickedElem.closest("#" + props.anchorElemId) == null) {
            hideTooltip();
          }
        }
      });
    };
    const setTooltipPosition = () => {
      autoUpdate(anchorElem.value, tooltipElem.value, () => {
        if (anchorElem.value !== null && arrowElem.value !== null) {
          const arrowWidth = arrowElem.value.offsetWidth;
          const floatingOffset = Math.sqrt(2 * arrowWidth ** 2) / 2;
          computePosition(anchorElem.value, tooltipElem.value, {
            placement: "top",
            middleware: [
              flip(),
              shift({
                padding: 5
              }),
              offset({
                mainAxis: floatingOffset
              }),
              arrow({ element: arrowElem.value })
            ]
          }).then(({ x: x2, y, placement, middlewareData }) => {
            Object.assign(tooltipElem.value.style, {
              left: `${x2}px`,
              top: `${y}px`
            });
            if (middlewareData.arrow) {
              const { x: x3, y: y2 } = middlewareData.arrow;
              const staticSide = {
                top: "bottom",
                right: "left",
                bottom: "top",
                left: "right"
              }[placement.split("-")[0]];
              Object.assign(arrowElem.value.style, {
                left: x3 != null ? `${x3}px` : "",
                top: y2 != null ? `${y2}px` : "",
                right: "",
                bottom: "",
                [staticSide]: `${-arrowElem.value.offsetWidth / 2}px`
              });
            }
          });
        }
      });
    };
    const toggleTooltip = () => {
      if (state.isVisible) {
        hideTooltip();
      } else {
        showTooltip();
      }
    };
    const showTooltip = () => {
      if (!state.isVisible) {
        let content = tooltipElem.value.querySelector(".tooltip-content").textContent.trim();
        if (content !== "") {
          tooltipElem.value.style.display = "block";
          setTooltipPosition();
          state.isVisible = true;
          if (!props.onClick) {
            setTimeout(function() {
              hideTooltip();
            }, 1e4);
          }
        }
      }
    };
    const hideTooltip = () => {
      if (state.isVisible) {
        tooltipElem.value.style.display = "";
        state.isVisible = false;
      }
    };
    return {
      tooltipElem,
      arrowElem
      // state
    };
  }
};
const _hoisted_1$b = {
  ref: "tooltipElem",
  role: "tooltip"
};
const _hoisted_2$6 = { class: "tooltip-content" };
const _hoisted_3$4 = {
  ref: "arrowElem",
  class: "tooltip-arrow"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1$b, [
    createBaseVNode("div", _hoisted_2$6, [
      renderSlot(_ctx.$slots, "default", {}, void 0, true)
    ]),
    createBaseVNode("div", _hoisted_3$4, null, 512)
  ], 512);
}
const tooltip = /* @__PURE__ */ _export_sfc(_sfc_main$e, [["render", _sfc_render], ["__scopeId", "data-v-056b1214"]]);
const _hoisted_1$a = { role: "dialog" };
const _sfc_main$d = {
  __name: "dialog_box",
  setup(__props, { expose: __expose }) {
    const anchorElem = ref(null);
    const dialogOverlayElem = ref(null);
    const dialogContentElem = ref(null);
    const originalBodyOverflow = ref(null);
    __expose({
      closeDialog
    });
    onMounted(() => {
      originalBodyOverflow.value = dialogOverlayElem.value.style.overflow;
      anchorElem.value.addEventListener("click", function(evt) {
        let clickedElem = evt.target;
        if (!clickedElem.classList.contains("dontOpenDialog") && clickedElem.closest(".dontOpenDialog") == null) {
          openDialog();
        }
      });
      dialogOverlayElem.value.addEventListener("click", function(evt) {
        let clickedElem = evt.target;
        if (clickedElem.closest(".dialog-content") == null) {
          closeDialog();
        }
      });
      dialogContentElem.value.querySelectorAll('[role="closeDialog"]').forEach(function(item) {
        item.addEventListener("click", closeDialog);
      });
    });
    function openDialog() {
      document.querySelector("body").style.overflow = "hidden";
      dialogOverlayElem.value.classList.add("visible");
      dialogContentElem.value.classList.add("visible");
    }
    function closeDialog() {
      document.querySelector("body").style.overflow = originalBodyOverflow.value;
      dialogContentElem.value.classList.remove("visible");
      dialogOverlayElem.value.classList.remove("visible");
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$a, [
        createBaseVNode("div", {
          ref_key: "anchorElem",
          ref: anchorElem,
          class: "dialog-anchor"
        }, [
          renderSlot(_ctx.$slots, "dialog-anchor")
        ], 512),
        createBaseVNode("div", {
          ref_key: "dialogOverlayElem",
          ref: dialogOverlayElem,
          class: "dialog-overlay"
        }, [
          createBaseVNode("div", {
            ref_key: "dialogContentElem",
            ref: dialogContentElem,
            class: "dialog-content"
          }, [
            renderSlot(_ctx.$slots, "dialog-content")
          ], 512)
        ], 512)
      ]);
    };
  }
};
class Base {
  constructor(options, input_data) {
    const app = createApp(
      options || {},
      input_data || {}
    );
    app.component("tooltip", tooltip);
    app.component("dialogBox", _sfc_main$d);
    return app;
  }
}
var isVue2 = false;
function set(target, key, val) {
  if (Array.isArray(target)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }
  target[key] = val;
  return val;
}
function del(target, key) {
  if (Array.isArray(target)) {
    target.splice(key, 1);
    return;
  }
  delete target[key];
}
function getDevtoolsGlobalHook() {
  return getTarget().__VUE_DEVTOOLS_GLOBAL_HOOK__;
}
function getTarget() {
  return typeof navigator !== "undefined" && typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : {};
}
const isProxyAvailable = typeof Proxy === "function";
const HOOK_SETUP = "devtools-plugin:setup";
const HOOK_PLUGIN_SETTINGS_SET = "plugin:settings:set";
let supported;
let perf;
function isPerformanceSupported() {
  var _a;
  if (supported !== void 0) {
    return supported;
  }
  if (typeof window !== "undefined" && window.performance) {
    supported = true;
    perf = window.performance;
  } else if (typeof globalThis !== "undefined" && ((_a = globalThis.perf_hooks) === null || _a === void 0 ? void 0 : _a.performance)) {
    supported = true;
    perf = globalThis.perf_hooks.performance;
  } else {
    supported = false;
  }
  return supported;
}
function now() {
  return isPerformanceSupported() ? perf.now() : Date.now();
}
class ApiProxy {
  constructor(plugin, hook) {
    this.target = null;
    this.targetQueue = [];
    this.onQueue = [];
    this.plugin = plugin;
    this.hook = hook;
    const defaultSettings = {};
    if (plugin.settings) {
      for (const id in plugin.settings) {
        const item = plugin.settings[id];
        defaultSettings[id] = item.defaultValue;
      }
    }
    const localSettingsSaveId = `__vue-devtools-plugin-settings__${plugin.id}`;
    let currentSettings = Object.assign({}, defaultSettings);
    try {
      const raw = localStorage.getItem(localSettingsSaveId);
      const data = JSON.parse(raw);
      Object.assign(currentSettings, data);
    } catch (e) {
    }
    this.fallbacks = {
      getSettings() {
        return currentSettings;
      },
      setSettings(value) {
        try {
          localStorage.setItem(localSettingsSaveId, JSON.stringify(value));
        } catch (e) {
        }
        currentSettings = value;
      },
      now() {
        return now();
      }
    };
    if (hook) {
      hook.on(HOOK_PLUGIN_SETTINGS_SET, (pluginId, value) => {
        if (pluginId === this.plugin.id) {
          this.fallbacks.setSettings(value);
        }
      });
    }
    this.proxiedOn = new Proxy({}, {
      get: (_target, prop) => {
        if (this.target) {
          return this.target.on[prop];
        } else {
          return (...args) => {
            this.onQueue.push({
              method: prop,
              args
            });
          };
        }
      }
    });
    this.proxiedTarget = new Proxy({}, {
      get: (_target, prop) => {
        if (this.target) {
          return this.target[prop];
        } else if (prop === "on") {
          return this.proxiedOn;
        } else if (Object.keys(this.fallbacks).includes(prop)) {
          return (...args) => {
            this.targetQueue.push({
              method: prop,
              args,
              resolve: () => {
              }
            });
            return this.fallbacks[prop](...args);
          };
        } else {
          return (...args) => {
            return new Promise((resolve2) => {
              this.targetQueue.push({
                method: prop,
                args,
                resolve: resolve2
              });
            });
          };
        }
      }
    });
  }
  async setRealTarget(target) {
    this.target = target;
    for (const item of this.onQueue) {
      this.target.on[item.method](...item.args);
    }
    for (const item of this.targetQueue) {
      item.resolve(await this.target[item.method](...item.args));
    }
  }
}
function setupDevtoolsPlugin(pluginDescriptor, setupFn) {
  const descriptor = pluginDescriptor;
  const target = getTarget();
  const hook = getDevtoolsGlobalHook();
  const enableProxy = isProxyAvailable && descriptor.enableEarlyProxy;
  if (hook && (target.__VUE_DEVTOOLS_PLUGIN_API_AVAILABLE__ || !enableProxy)) {
    hook.emit(HOOK_SETUP, pluginDescriptor, setupFn);
  } else {
    const proxy = enableProxy ? new ApiProxy(descriptor, hook) : null;
    const list = target.__VUE_DEVTOOLS_PLUGINS__ = target.__VUE_DEVTOOLS_PLUGINS__ || [];
    list.push({
      pluginDescriptor: descriptor,
      setupFn,
      proxy
    });
    if (proxy) {
      setupFn(proxy.proxiedTarget);
    }
  }
}
/*!
 * pinia v2.1.7
 * (c) 2023 Eduardo San Martin Morote
 * @license MIT
 */
let activePinia;
const setActivePinia = (pinia) => activePinia = pinia;
const piniaSymbol = Symbol("pinia");
function isPlainObject(o) {
  return o && typeof o === "object" && Object.prototype.toString.call(o) === "[object Object]" && typeof o.toJSON !== "function";
}
var MutationType;
(function(MutationType2) {
  MutationType2["direct"] = "direct";
  MutationType2["patchObject"] = "patch object";
  MutationType2["patchFunction"] = "patch function";
})(MutationType || (MutationType = {}));
const IS_CLIENT = typeof window !== "undefined";
const USE_DEVTOOLS = IS_CLIENT;
const _global = /* @__PURE__ */ (() => typeof window === "object" && window.window === window ? window : typeof self === "object" && self.self === self ? self : typeof global === "object" && global.global === global ? global : typeof globalThis === "object" ? globalThis : { HTMLElement: null })();
function bom(blob, { autoBom = false } = {}) {
  if (autoBom && /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)) {
    return new Blob([String.fromCharCode(65279), blob], { type: blob.type });
  }
  return blob;
}
function download(url, name, opts) {
  const xhr = new XMLHttpRequest();
  xhr.open("GET", url);
  xhr.responseType = "blob";
  xhr.onload = function() {
    saveAs(xhr.response, name, opts);
  };
  xhr.onerror = function() {
    console.error("could not download file");
  };
  xhr.send();
}
function corsEnabled(url) {
  const xhr = new XMLHttpRequest();
  xhr.open("HEAD", url, false);
  try {
    xhr.send();
  } catch (e) {
  }
  return xhr.status >= 200 && xhr.status <= 299;
}
function click(node) {
  try {
    node.dispatchEvent(new MouseEvent("click"));
  } catch (e) {
    const evt = document.createEvent("MouseEvents");
    evt.initMouseEvent("click", true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);
    node.dispatchEvent(evt);
  }
}
const _navigator = typeof navigator === "object" ? navigator : { userAgent: "" };
const isMacOSWebView = /* @__PURE__ */ (() => /Macintosh/.test(_navigator.userAgent) && /AppleWebKit/.test(_navigator.userAgent) && !/Safari/.test(_navigator.userAgent))();
const saveAs = !IS_CLIENT ? () => {
} : (
  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView or mini program
  typeof HTMLAnchorElement !== "undefined" && "download" in HTMLAnchorElement.prototype && !isMacOSWebView ? downloadSaveAs : (
    // Use msSaveOrOpenBlob as a second approach
    "msSaveOrOpenBlob" in _navigator ? msSaveAs : (
      // Fallback to using FileReader and a popup
      fileSaverSaveAs
    )
  )
);
function downloadSaveAs(blob, name = "download", opts) {
  const a = document.createElement("a");
  a.download = name;
  a.rel = "noopener";
  if (typeof blob === "string") {
    a.href = blob;
    if (a.origin !== location.origin) {
      if (corsEnabled(a.href)) {
        download(blob, name, opts);
      } else {
        a.target = "_blank";
        click(a);
      }
    } else {
      click(a);
    }
  } else {
    a.href = URL.createObjectURL(blob);
    setTimeout(function() {
      URL.revokeObjectURL(a.href);
    }, 4e4);
    setTimeout(function() {
      click(a);
    }, 0);
  }
}
function msSaveAs(blob, name = "download", opts) {
  if (typeof blob === "string") {
    if (corsEnabled(blob)) {
      download(blob, name, opts);
    } else {
      const a = document.createElement("a");
      a.href = blob;
      a.target = "_blank";
      setTimeout(function() {
        click(a);
      });
    }
  } else {
    navigator.msSaveOrOpenBlob(bom(blob, opts), name);
  }
}
function fileSaverSaveAs(blob, name, opts, popup) {
  popup = popup || open("", "_blank");
  if (popup) {
    popup.document.title = popup.document.body.innerText = "downloading...";
  }
  if (typeof blob === "string")
    return download(blob, name, opts);
  const force = blob.type === "application/octet-stream";
  const isSafari = /constructor/i.test(String(_global.HTMLElement)) || "safari" in _global;
  const isChromeIOS = /CriOS\/[\d]+/.test(navigator.userAgent);
  if ((isChromeIOS || force && isSafari || isMacOSWebView) && typeof FileReader !== "undefined") {
    const reader = new FileReader();
    reader.onloadend = function() {
      let url = reader.result;
      if (typeof url !== "string") {
        popup = null;
        throw new Error("Wrong reader.result type");
      }
      url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, "data:attachment/file;");
      if (popup) {
        popup.location.href = url;
      } else {
        location.assign(url);
      }
      popup = null;
    };
    reader.readAsDataURL(blob);
  } else {
    const url = URL.createObjectURL(blob);
    if (popup)
      popup.location.assign(url);
    else
      location.href = url;
    popup = null;
    setTimeout(function() {
      URL.revokeObjectURL(url);
    }, 4e4);
  }
}
function toastMessage(message, type) {
  const piniaMessage = "🍍 " + message;
  if (typeof __VUE_DEVTOOLS_TOAST__ === "function") {
    __VUE_DEVTOOLS_TOAST__(piniaMessage, type);
  } else if (type === "error") {
    console.error(piniaMessage);
  } else if (type === "warn") {
    console.warn(piniaMessage);
  } else {
    console.log(piniaMessage);
  }
}
function isPinia(o) {
  return "_a" in o && "install" in o;
}
function checkClipboardAccess() {
  if (!("clipboard" in navigator)) {
    toastMessage(`Your browser doesn't support the Clipboard API`, "error");
    return true;
  }
}
function checkNotFocusedError(error) {
  if (error instanceof Error && error.message.toLowerCase().includes("document is not focused")) {
    toastMessage('You need to activate the "Emulate a focused page" setting in the "Rendering" panel of devtools.', "warn");
    return true;
  }
  return false;
}
async function actionGlobalCopyState(pinia) {
  if (checkClipboardAccess())
    return;
  try {
    await navigator.clipboard.writeText(JSON.stringify(pinia.state.value));
    toastMessage("Global state copied to clipboard.");
  } catch (error) {
    if (checkNotFocusedError(error))
      return;
    toastMessage(`Failed to serialize the state. Check the console for more details.`, "error");
    console.error(error);
  }
}
async function actionGlobalPasteState(pinia) {
  if (checkClipboardAccess())
    return;
  try {
    loadStoresState(pinia, JSON.parse(await navigator.clipboard.readText()));
    toastMessage("Global state pasted from clipboard.");
  } catch (error) {
    if (checkNotFocusedError(error))
      return;
    toastMessage(`Failed to deserialize the state from clipboard. Check the console for more details.`, "error");
    console.error(error);
  }
}
async function actionGlobalSaveState(pinia) {
  try {
    saveAs(new Blob([JSON.stringify(pinia.state.value)], {
      type: "text/plain;charset=utf-8"
    }), "pinia-state.json");
  } catch (error) {
    toastMessage(`Failed to export the state as JSON. Check the console for more details.`, "error");
    console.error(error);
  }
}
let fileInput;
function getFileOpener() {
  if (!fileInput) {
    fileInput = document.createElement("input");
    fileInput.type = "file";
    fileInput.accept = ".json";
  }
  function openFile() {
    return new Promise((resolve2, reject) => {
      fileInput.onchange = async () => {
        const files = fileInput.files;
        if (!files)
          return resolve2(null);
        const file = files.item(0);
        if (!file)
          return resolve2(null);
        return resolve2({ text: await file.text(), file });
      };
      fileInput.oncancel = () => resolve2(null);
      fileInput.onerror = reject;
      fileInput.click();
    });
  }
  return openFile;
}
async function actionGlobalOpenStateFile(pinia) {
  try {
    const open2 = getFileOpener();
    const result = await open2();
    if (!result)
      return;
    const { text, file } = result;
    loadStoresState(pinia, JSON.parse(text));
    toastMessage(`Global state imported from "${file.name}".`);
  } catch (error) {
    toastMessage(`Failed to import the state from JSON. Check the console for more details.`, "error");
    console.error(error);
  }
}
function loadStoresState(pinia, state) {
  for (const key in state) {
    const storeState = pinia.state.value[key];
    if (storeState) {
      Object.assign(storeState, state[key]);
    } else {
      pinia.state.value[key] = state[key];
    }
  }
}
function formatDisplay(display) {
  return {
    _custom: {
      display
    }
  };
}
const PINIA_ROOT_LABEL = "🍍 Pinia (root)";
const PINIA_ROOT_ID = "_root";
function formatStoreForInspectorTree(store) {
  return isPinia(store) ? {
    id: PINIA_ROOT_ID,
    label: PINIA_ROOT_LABEL
  } : {
    id: store.$id,
    label: store.$id
  };
}
function formatStoreForInspectorState(store) {
  if (isPinia(store)) {
    const storeNames = Array.from(store._s.keys());
    const storeMap = store._s;
    const state2 = {
      state: storeNames.map((storeId) => ({
        editable: true,
        key: storeId,
        value: store.state.value[storeId]
      })),
      getters: storeNames.filter((id) => storeMap.get(id)._getters).map((id) => {
        const store2 = storeMap.get(id);
        return {
          editable: false,
          key: id,
          value: store2._getters.reduce((getters, key) => {
            getters[key] = store2[key];
            return getters;
          }, {})
        };
      })
    };
    return state2;
  }
  const state = {
    state: Object.keys(store.$state).map((key) => ({
      editable: true,
      key,
      value: store.$state[key]
    }))
  };
  if (store._getters && store._getters.length) {
    state.getters = store._getters.map((getterName) => ({
      editable: false,
      key: getterName,
      value: store[getterName]
    }));
  }
  if (store._customProperties.size) {
    state.customProperties = Array.from(store._customProperties).map((key) => ({
      editable: true,
      key,
      value: store[key]
    }));
  }
  return state;
}
function formatEventData(events) {
  if (!events)
    return {};
  if (Array.isArray(events)) {
    return events.reduce((data, event) => {
      data.keys.push(event.key);
      data.operations.push(event.type);
      data.oldValue[event.key] = event.oldValue;
      data.newValue[event.key] = event.newValue;
      return data;
    }, {
      oldValue: {},
      keys: [],
      operations: [],
      newValue: {}
    });
  } else {
    return {
      operation: formatDisplay(events.type),
      key: formatDisplay(events.key),
      oldValue: events.oldValue,
      newValue: events.newValue
    };
  }
}
function formatMutationType(type) {
  switch (type) {
    case MutationType.direct:
      return "mutation";
    case MutationType.patchFunction:
      return "$patch";
    case MutationType.patchObject:
      return "$patch";
    default:
      return "unknown";
  }
}
let isTimelineActive = true;
const componentStateTypes = [];
const MUTATIONS_LAYER_ID = "pinia:mutations";
const INSPECTOR_ID = "pinia";
const { assign: assign$1 } = Object;
const getStoreType = (id) => "🍍 " + id;
function registerPiniaDevtools(app, pinia) {
  setupDevtoolsPlugin({
    id: "dev.esm.pinia",
    label: "Pinia 🍍",
    logo: "https://pinia.vuejs.org/logo.svg",
    packageName: "pinia",
    homepage: "https://pinia.vuejs.org",
    componentStateTypes,
    app
  }, (api) => {
    if (typeof api.now !== "function") {
      toastMessage("You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.");
    }
    api.addTimelineLayer({
      id: MUTATIONS_LAYER_ID,
      label: `Pinia 🍍`,
      color: 15064968
    });
    api.addInspector({
      id: INSPECTOR_ID,
      label: "Pinia 🍍",
      icon: "storage",
      treeFilterPlaceholder: "Search stores",
      actions: [
        {
          icon: "content_copy",
          action: () => {
            actionGlobalCopyState(pinia);
          },
          tooltip: "Serialize and copy the state"
        },
        {
          icon: "content_paste",
          action: async () => {
            await actionGlobalPasteState(pinia);
            api.sendInspectorTree(INSPECTOR_ID);
            api.sendInspectorState(INSPECTOR_ID);
          },
          tooltip: "Replace the state with the content of your clipboard"
        },
        {
          icon: "save",
          action: () => {
            actionGlobalSaveState(pinia);
          },
          tooltip: "Save the state as a JSON file"
        },
        {
          icon: "folder_open",
          action: async () => {
            await actionGlobalOpenStateFile(pinia);
            api.sendInspectorTree(INSPECTOR_ID);
            api.sendInspectorState(INSPECTOR_ID);
          },
          tooltip: "Import the state from a JSON file"
        }
      ],
      nodeActions: [
        {
          icon: "restore",
          tooltip: 'Reset the state (with "$reset")',
          action: (nodeId) => {
            const store = pinia._s.get(nodeId);
            if (!store) {
              toastMessage(`Cannot reset "${nodeId}" store because it wasn't found.`, "warn");
            } else if (typeof store.$reset !== "function") {
              toastMessage(`Cannot reset "${nodeId}" store because it doesn't have a "$reset" method implemented.`, "warn");
            } else {
              store.$reset();
              toastMessage(`Store "${nodeId}" reset.`);
            }
          }
        }
      ]
    });
    api.on.inspectComponent((payload, ctx) => {
      const proxy = payload.componentInstance && payload.componentInstance.proxy;
      if (proxy && proxy._pStores) {
        const piniaStores = payload.componentInstance.proxy._pStores;
        Object.values(piniaStores).forEach((store) => {
          payload.instanceData.state.push({
            type: getStoreType(store.$id),
            key: "state",
            editable: true,
            value: store._isOptionsAPI ? {
              _custom: {
                value: toRaw(store.$state),
                actions: [
                  {
                    icon: "restore",
                    tooltip: "Reset the state of this store",
                    action: () => store.$reset()
                  }
                ]
              }
            } : (
              // NOTE: workaround to unwrap transferred refs
              Object.keys(store.$state).reduce((state, key) => {
                state[key] = store.$state[key];
                return state;
              }, {})
            )
          });
          if (store._getters && store._getters.length) {
            payload.instanceData.state.push({
              type: getStoreType(store.$id),
              key: "getters",
              editable: false,
              value: store._getters.reduce((getters, key) => {
                try {
                  getters[key] = store[key];
                } catch (error) {
                  getters[key] = error;
                }
                return getters;
              }, {})
            });
          }
        });
      }
    });
    api.on.getInspectorTree((payload) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
        let stores = [pinia];
        stores = stores.concat(Array.from(pinia._s.values()));
        payload.rootNodes = (payload.filter ? stores.filter((store) => "$id" in store ? store.$id.toLowerCase().includes(payload.filter.toLowerCase()) : PINIA_ROOT_LABEL.toLowerCase().includes(payload.filter.toLowerCase())) : stores).map(formatStoreForInspectorTree);
      }
    });
    api.on.getInspectorState((payload) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
        const inspectedStore = payload.nodeId === PINIA_ROOT_ID ? pinia : pinia._s.get(payload.nodeId);
        if (!inspectedStore) {
          return;
        }
        if (inspectedStore) {
          payload.state = formatStoreForInspectorState(inspectedStore);
        }
      }
    });
    api.on.editInspectorState((payload, ctx) => {
      if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {
        const inspectedStore = payload.nodeId === PINIA_ROOT_ID ? pinia : pinia._s.get(payload.nodeId);
        if (!inspectedStore) {
          return toastMessage(`store "${payload.nodeId}" not found`, "error");
        }
        const { path } = payload;
        if (!isPinia(inspectedStore)) {
          if (path.length !== 1 || !inspectedStore._customProperties.has(path[0]) || path[0] in inspectedStore.$state) {
            path.unshift("$state");
          }
        } else {
          path.unshift("state");
        }
        isTimelineActive = false;
        payload.set(inspectedStore, path, payload.state.value);
        isTimelineActive = true;
      }
    });
    api.on.editComponentState((payload) => {
      if (payload.type.startsWith("🍍")) {
        const storeId = payload.type.replace(/^🍍\s*/, "");
        const store = pinia._s.get(storeId);
        if (!store) {
          return toastMessage(`store "${storeId}" not found`, "error");
        }
        const { path } = payload;
        if (path[0] !== "state") {
          return toastMessage(`Invalid path for store "${storeId}":
${path}
Only state can be modified.`);
        }
        path[0] = "$state";
        isTimelineActive = false;
        payload.set(store, path, payload.state.value);
        isTimelineActive = true;
      }
    });
  });
}
function addStoreToDevtools(app, store) {
  if (!componentStateTypes.includes(getStoreType(store.$id))) {
    componentStateTypes.push(getStoreType(store.$id));
  }
  setupDevtoolsPlugin({
    id: "dev.esm.pinia",
    label: "Pinia 🍍",
    logo: "https://pinia.vuejs.org/logo.svg",
    packageName: "pinia",
    homepage: "https://pinia.vuejs.org",
    componentStateTypes,
    app,
    settings: {
      logStoreChanges: {
        label: "Notify about new/deleted stores",
        type: "boolean",
        defaultValue: true
      }
      // useEmojis: {
      //   label: 'Use emojis in messages ⚡️',
      //   type: 'boolean',
      //   defaultValue: true,
      // },
    }
  }, (api) => {
    const now2 = typeof api.now === "function" ? api.now.bind(api) : Date.now;
    store.$onAction(({ after, onError, name, args }) => {
      const groupId = runningActionId++;
      api.addTimelineEvent({
        layerId: MUTATIONS_LAYER_ID,
        event: {
          time: now2(),
          title: "🛫 " + name,
          subtitle: "start",
          data: {
            store: formatDisplay(store.$id),
            action: formatDisplay(name),
            args
          },
          groupId
        }
      });
      after((result) => {
        activeAction = void 0;
        api.addTimelineEvent({
          layerId: MUTATIONS_LAYER_ID,
          event: {
            time: now2(),
            title: "🛬 " + name,
            subtitle: "end",
            data: {
              store: formatDisplay(store.$id),
              action: formatDisplay(name),
              args,
              result
            },
            groupId
          }
        });
      });
      onError((error) => {
        activeAction = void 0;
        api.addTimelineEvent({
          layerId: MUTATIONS_LAYER_ID,
          event: {
            time: now2(),
            logType: "error",
            title: "💥 " + name,
            subtitle: "end",
            data: {
              store: formatDisplay(store.$id),
              action: formatDisplay(name),
              args,
              error
            },
            groupId
          }
        });
      });
    }, true);
    store._customProperties.forEach((name) => {
      watch(() => unref(store[name]), (newValue, oldValue) => {
        api.notifyComponentUpdate();
        api.sendInspectorState(INSPECTOR_ID);
        if (isTimelineActive) {
          api.addTimelineEvent({
            layerId: MUTATIONS_LAYER_ID,
            event: {
              time: now2(),
              title: "Change",
              subtitle: name,
              data: {
                newValue,
                oldValue
              },
              groupId: activeAction
            }
          });
        }
      }, { deep: true });
    });
    store.$subscribe(({ events, type }, state) => {
      api.notifyComponentUpdate();
      api.sendInspectorState(INSPECTOR_ID);
      if (!isTimelineActive)
        return;
      const eventData = {
        time: now2(),
        title: formatMutationType(type),
        data: assign$1({ store: formatDisplay(store.$id) }, formatEventData(events)),
        groupId: activeAction
      };
      if (type === MutationType.patchFunction) {
        eventData.subtitle = "⤵️";
      } else if (type === MutationType.patchObject) {
        eventData.subtitle = "🧩";
      } else if (events && !Array.isArray(events)) {
        eventData.subtitle = events.type;
      }
      if (events) {
        eventData.data["rawEvent(s)"] = {
          _custom: {
            display: "DebuggerEvent",
            type: "object",
            tooltip: "raw DebuggerEvent[]",
            value: events
          }
        };
      }
      api.addTimelineEvent({
        layerId: MUTATIONS_LAYER_ID,
        event: eventData
      });
    }, { detached: true, flush: "sync" });
    const hotUpdate = store._hotUpdate;
    store._hotUpdate = markRaw((newStore) => {
      hotUpdate(newStore);
      api.addTimelineEvent({
        layerId: MUTATIONS_LAYER_ID,
        event: {
          time: now2(),
          title: "🔥 " + store.$id,
          subtitle: "HMR update",
          data: {
            store: formatDisplay(store.$id),
            info: formatDisplay(`HMR update`)
          }
        }
      });
      api.notifyComponentUpdate();
      api.sendInspectorTree(INSPECTOR_ID);
      api.sendInspectorState(INSPECTOR_ID);
    });
    const { $dispose } = store;
    store.$dispose = () => {
      $dispose();
      api.notifyComponentUpdate();
      api.sendInspectorTree(INSPECTOR_ID);
      api.sendInspectorState(INSPECTOR_ID);
      api.getSettings().logStoreChanges && toastMessage(`Disposed "${store.$id}" store 🗑`);
    };
    api.notifyComponentUpdate();
    api.sendInspectorTree(INSPECTOR_ID);
    api.sendInspectorState(INSPECTOR_ID);
    api.getSettings().logStoreChanges && toastMessage(`"${store.$id}" store installed 🆕`);
  });
}
let runningActionId = 0;
let activeAction;
function patchActionForGrouping(store, actionNames, wrapWithProxy) {
  const actions = actionNames.reduce((storeActions, actionName) => {
    storeActions[actionName] = toRaw(store)[actionName];
    return storeActions;
  }, {});
  for (const actionName in actions) {
    store[actionName] = function() {
      const _actionId = runningActionId;
      const trackedStore = wrapWithProxy ? new Proxy(store, {
        get(...args) {
          activeAction = _actionId;
          return Reflect.get(...args);
        },
        set(...args) {
          activeAction = _actionId;
          return Reflect.set(...args);
        }
      }) : store;
      activeAction = _actionId;
      const retValue = actions[actionName].apply(trackedStore, arguments);
      activeAction = void 0;
      return retValue;
    };
  }
}
function devtoolsPlugin({ app, store, options }) {
  if (store.$id.startsWith("__hot:")) {
    return;
  }
  store._isOptionsAPI = !!options.state;
  patchActionForGrouping(store, Object.keys(options.actions), store._isOptionsAPI);
  const originalHotUpdate = store._hotUpdate;
  toRaw(store)._hotUpdate = function(newStore) {
    originalHotUpdate.apply(this, arguments);
    patchActionForGrouping(store, Object.keys(newStore._hmrPayload.actions), !!store._isOptionsAPI);
  };
  addStoreToDevtools(
    app,
    // FIXME: is there a way to allow the assignment from Store<Id, S, G, A> to StoreGeneric?
    store
  );
}
function createPinia() {
  const scope = effectScope(true);
  const state = scope.run(() => ref({}));
  let _p = [];
  let toBeInstalled = [];
  const pinia = markRaw({
    install(app) {
      setActivePinia(pinia);
      {
        pinia._a = app;
        app.provide(piniaSymbol, pinia);
        app.config.globalProperties.$pinia = pinia;
        if (USE_DEVTOOLS) {
          registerPiniaDevtools(app, pinia);
        }
        toBeInstalled.forEach((plugin) => _p.push(plugin));
        toBeInstalled = [];
      }
    },
    use(plugin) {
      if (!this._a && !isVue2) {
        toBeInstalled.push(plugin);
      } else {
        _p.push(plugin);
      }
      return this;
    },
    _p,
    // it's actually undefined here
    // @ts-expect-error
    _a: null,
    _e: scope,
    _s: /* @__PURE__ */ new Map(),
    state
  });
  if (USE_DEVTOOLS && typeof Proxy !== "undefined") {
    pinia.use(devtoolsPlugin);
  }
  return pinia;
}
function patchObject(newState, oldState) {
  for (const key in oldState) {
    const subPatch = oldState[key];
    if (!(key in newState)) {
      continue;
    }
    const targetValue = newState[key];
    if (isPlainObject(targetValue) && isPlainObject(subPatch) && !isRef(subPatch) && !isReactive(subPatch)) {
      newState[key] = patchObject(targetValue, subPatch);
    } else {
      {
        newState[key] = subPatch;
      }
    }
  }
  return newState;
}
const noop = () => {
};
function addSubscription(subscriptions, callback, detached, onCleanup = noop) {
  subscriptions.push(callback);
  const removeSubscription = () => {
    const idx = subscriptions.indexOf(callback);
    if (idx > -1) {
      subscriptions.splice(idx, 1);
      onCleanup();
    }
  };
  if (!detached && getCurrentScope()) {
    onScopeDispose(removeSubscription);
  }
  return removeSubscription;
}
function triggerSubscriptions(subscriptions, ...args) {
  subscriptions.slice().forEach((callback) => {
    callback(...args);
  });
}
const fallbackRunWithContext = (fn) => fn();
function mergeReactiveObjects(target, patchToApply) {
  if (target instanceof Map && patchToApply instanceof Map) {
    patchToApply.forEach((value, key) => target.set(key, value));
  }
  if (target instanceof Set && patchToApply instanceof Set) {
    patchToApply.forEach(target.add, target);
  }
  for (const key in patchToApply) {
    if (!patchToApply.hasOwnProperty(key))
      continue;
    const subPatch = patchToApply[key];
    const targetValue = target[key];
    if (isPlainObject(targetValue) && isPlainObject(subPatch) && target.hasOwnProperty(key) && !isRef(subPatch) && !isReactive(subPatch)) {
      target[key] = mergeReactiveObjects(targetValue, subPatch);
    } else {
      target[key] = subPatch;
    }
  }
  return target;
}
const skipHydrateSymbol = Symbol("pinia:skipHydration");
function shouldHydrate(obj) {
  return !isPlainObject(obj) || !obj.hasOwnProperty(skipHydrateSymbol);
}
const { assign } = Object;
function isComputed(o) {
  return !!(isRef(o) && o.effect);
}
function createOptionsStore(id, options, pinia, hot) {
  const { state, actions, getters } = options;
  const initialState = pinia.state.value[id];
  let store;
  function setup() {
    if (!initialState && !hot) {
      {
        pinia.state.value[id] = state ? state() : {};
      }
    }
    const localState = hot ? (
      // use ref() to unwrap refs inside state TODO: check if this is still necessary
      toRefs(ref(state ? state() : {}).value)
    ) : toRefs(pinia.state.value[id]);
    return assign(localState, actions, Object.keys(getters || {}).reduce((computedGetters, name) => {
      if (name in localState) {
        console.warn(`[🍍]: A getter cannot have the same name as another state property. Rename one of them. Found with "${name}" in store "${id}".`);
      }
      computedGetters[name] = markRaw(computed(() => {
        setActivePinia(pinia);
        const store2 = pinia._s.get(id);
        return getters[name].call(store2, store2);
      }));
      return computedGetters;
    }, {}));
  }
  store = createSetupStore(id, setup, options, pinia, hot, true);
  return store;
}
function createSetupStore($id, setup, options = {}, pinia, hot, isOptionsStore) {
  let scope;
  const optionsForPlugin = assign({ actions: {} }, options);
  if (!pinia._e.active) {
    throw new Error("Pinia destroyed");
  }
  const $subscribeOptions = {
    deep: true
    // flush: 'post',
  };
  {
    $subscribeOptions.onTrigger = (event) => {
      if (isListening) {
        debuggerEvents = event;
      } else if (isListening == false && !store._hotUpdating) {
        if (Array.isArray(debuggerEvents)) {
          debuggerEvents.push(event);
        } else {
          console.error("🍍 debuggerEvents should be an array. This is most likely an internal Pinia bug.");
        }
      }
    };
  }
  let isListening;
  let isSyncListening;
  let subscriptions = [];
  let actionSubscriptions = [];
  let debuggerEvents;
  const initialState = pinia.state.value[$id];
  if (!isOptionsStore && !initialState && !hot) {
    {
      pinia.state.value[$id] = {};
    }
  }
  const hotState = ref({});
  let activeListener;
  function $patch(partialStateOrMutator) {
    let subscriptionMutation;
    isListening = isSyncListening = false;
    {
      debuggerEvents = [];
    }
    if (typeof partialStateOrMutator === "function") {
      partialStateOrMutator(pinia.state.value[$id]);
      subscriptionMutation = {
        type: MutationType.patchFunction,
        storeId: $id,
        events: debuggerEvents
      };
    } else {
      mergeReactiveObjects(pinia.state.value[$id], partialStateOrMutator);
      subscriptionMutation = {
        type: MutationType.patchObject,
        payload: partialStateOrMutator,
        storeId: $id,
        events: debuggerEvents
      };
    }
    const myListenerId = activeListener = Symbol();
    nextTick().then(() => {
      if (activeListener === myListenerId) {
        isListening = true;
      }
    });
    isSyncListening = true;
    triggerSubscriptions(subscriptions, subscriptionMutation, pinia.state.value[$id]);
  }
  const $reset = isOptionsStore ? function $reset2() {
    const { state } = options;
    const newState = state ? state() : {};
    this.$patch(($state) => {
      assign($state, newState);
    });
  } : (
    /* istanbul ignore next */
    () => {
      throw new Error(`🍍: Store "${$id}" is built using the setup syntax and does not implement $reset().`);
    }
  );
  function $dispose() {
    scope.stop();
    subscriptions = [];
    actionSubscriptions = [];
    pinia._s.delete($id);
  }
  function wrapAction(name, action) {
    return function() {
      setActivePinia(pinia);
      const args = Array.from(arguments);
      const afterCallbackList = [];
      const onErrorCallbackList = [];
      function after(callback) {
        afterCallbackList.push(callback);
      }
      function onError(callback) {
        onErrorCallbackList.push(callback);
      }
      triggerSubscriptions(actionSubscriptions, {
        args,
        name,
        store,
        after,
        onError
      });
      let ret;
      try {
        ret = action.apply(this && this.$id === $id ? this : store, args);
      } catch (error) {
        triggerSubscriptions(onErrorCallbackList, error);
        throw error;
      }
      if (ret instanceof Promise) {
        return ret.then((value) => {
          triggerSubscriptions(afterCallbackList, value);
          return value;
        }).catch((error) => {
          triggerSubscriptions(onErrorCallbackList, error);
          return Promise.reject(error);
        });
      }
      triggerSubscriptions(afterCallbackList, ret);
      return ret;
    };
  }
  const _hmrPayload = /* @__PURE__ */ markRaw({
    actions: {},
    getters: {},
    state: [],
    hotState
  });
  const partialStore = {
    _p: pinia,
    // _s: scope,
    $id,
    $onAction: addSubscription.bind(null, actionSubscriptions),
    $patch,
    $reset,
    $subscribe(callback, options2 = {}) {
      const removeSubscription = addSubscription(subscriptions, callback, options2.detached, () => stopWatcher());
      const stopWatcher = scope.run(() => watch(() => pinia.state.value[$id], (state) => {
        if (options2.flush === "sync" ? isSyncListening : isListening) {
          callback({
            storeId: $id,
            type: MutationType.direct,
            events: debuggerEvents
          }, state);
        }
      }, assign({}, $subscribeOptions, options2)));
      return removeSubscription;
    },
    $dispose
  };
  const store = reactive(assign(
    {
      _hmrPayload,
      _customProperties: markRaw(/* @__PURE__ */ new Set())
      // devtools custom properties
    },
    partialStore
    // must be added later
    // setupStore
  ));
  pinia._s.set($id, store);
  const runWithContext = pinia._a && pinia._a.runWithContext || fallbackRunWithContext;
  const setupStore = runWithContext(() => pinia._e.run(() => (scope = effectScope()).run(setup)));
  for (const key in setupStore) {
    const prop = setupStore[key];
    if (isRef(prop) && !isComputed(prop) || isReactive(prop)) {
      if (hot) {
        set(hotState.value, key, toRef(setupStore, key));
      } else if (!isOptionsStore) {
        if (initialState && shouldHydrate(prop)) {
          if (isRef(prop)) {
            prop.value = initialState[key];
          } else {
            mergeReactiveObjects(prop, initialState[key]);
          }
        }
        {
          pinia.state.value[$id][key] = prop;
        }
      }
      {
        _hmrPayload.state.push(key);
      }
    } else if (typeof prop === "function") {
      const actionValue = hot ? prop : wrapAction(key, prop);
      {
        setupStore[key] = actionValue;
      }
      {
        _hmrPayload.actions[key] = prop;
      }
      optionsForPlugin.actions[key] = prop;
    } else {
      if (isComputed(prop)) {
        _hmrPayload.getters[key] = isOptionsStore ? (
          // @ts-expect-error
          options.getters[key]
        ) : prop;
        if (IS_CLIENT) {
          const getters = setupStore._getters || // @ts-expect-error: same
          (setupStore._getters = markRaw([]));
          getters.push(key);
        }
      }
    }
  }
  {
    assign(store, setupStore);
    assign(toRaw(store), setupStore);
  }
  Object.defineProperty(store, "$state", {
    get: () => hot ? hotState.value : pinia.state.value[$id],
    set: (state) => {
      if (hot) {
        throw new Error("cannot set hotState");
      }
      $patch(($state) => {
        assign($state, state);
      });
    }
  });
  {
    store._hotUpdate = markRaw((newStore) => {
      store._hotUpdating = true;
      newStore._hmrPayload.state.forEach((stateKey) => {
        if (stateKey in store.$state) {
          const newStateTarget = newStore.$state[stateKey];
          const oldStateSource = store.$state[stateKey];
          if (typeof newStateTarget === "object" && isPlainObject(newStateTarget) && isPlainObject(oldStateSource)) {
            patchObject(newStateTarget, oldStateSource);
          } else {
            newStore.$state[stateKey] = oldStateSource;
          }
        }
        set(store, stateKey, toRef(newStore.$state, stateKey));
      });
      Object.keys(store.$state).forEach((stateKey) => {
        if (!(stateKey in newStore.$state)) {
          del(store, stateKey);
        }
      });
      isListening = false;
      isSyncListening = false;
      pinia.state.value[$id] = toRef(newStore._hmrPayload, "hotState");
      isSyncListening = true;
      nextTick().then(() => {
        isListening = true;
      });
      for (const actionName in newStore._hmrPayload.actions) {
        const action = newStore[actionName];
        set(store, actionName, wrapAction(actionName, action));
      }
      for (const getterName in newStore._hmrPayload.getters) {
        const getter = newStore._hmrPayload.getters[getterName];
        const getterValue = isOptionsStore ? (
          // special handling of options api
          computed(() => {
            setActivePinia(pinia);
            return getter.call(store, store);
          })
        ) : getter;
        set(store, getterName, getterValue);
      }
      Object.keys(store._hmrPayload.getters).forEach((key) => {
        if (!(key in newStore._hmrPayload.getters)) {
          del(store, key);
        }
      });
      Object.keys(store._hmrPayload.actions).forEach((key) => {
        if (!(key in newStore._hmrPayload.actions)) {
          del(store, key);
        }
      });
      store._hmrPayload = newStore._hmrPayload;
      store._getters = newStore._getters;
      store._hotUpdating = false;
    });
  }
  if (USE_DEVTOOLS) {
    const nonEnumerable = {
      writable: true,
      configurable: true,
      // avoid warning on devtools trying to display this property
      enumerable: false
    };
    ["_p", "_hmrPayload", "_getters", "_customProperties"].forEach((p2) => {
      Object.defineProperty(store, p2, assign({ value: store[p2] }, nonEnumerable));
    });
  }
  pinia._p.forEach((extender) => {
    if (USE_DEVTOOLS) {
      const extensions = scope.run(() => extender({
        store,
        app: pinia._a,
        pinia,
        options: optionsForPlugin
      }));
      Object.keys(extensions || {}).forEach((key) => store._customProperties.add(key));
      assign(store, extensions);
    } else {
      assign(store, scope.run(() => extender({
        store,
        app: pinia._a,
        pinia,
        options: optionsForPlugin
      })));
    }
  });
  if (store.$state && typeof store.$state === "object" && typeof store.$state.constructor === "function" && !store.$state.constructor.toString().includes("[native code]")) {
    console.warn(`[🍍]: The "state" must be a plain object. It cannot be
	state: () => new MyClass()
Found in store "${store.$id}".`);
  }
  if (initialState && isOptionsStore && options.hydrate) {
    options.hydrate(store.$state, initialState);
  }
  isListening = true;
  isSyncListening = true;
  return store;
}
function defineStore(idOrOptions, setup, setupOptions) {
  let id;
  let options;
  const isSetupStore = typeof setup === "function";
  {
    id = idOrOptions;
    options = isSetupStore ? setupOptions : setup;
  }
  function useStore(pinia, hot) {
    const hasContext = hasInjectionContext();
    pinia = // in test mode, ignore the argument provided as we can always retrieve a
    // pinia instance with getActivePinia()
    pinia || (hasContext ? inject(piniaSymbol, null) : null);
    if (pinia)
      setActivePinia(pinia);
    if (!activePinia) {
      throw new Error(`[🍍]: "getActivePinia()" was called but there was no active Pinia. Are you trying to use a store before calling "app.use(pinia)"?
See https://pinia.vuejs.org/core-concepts/outside-component-usage.html for help.
This will fail in production.`);
    }
    pinia = activePinia;
    if (!pinia._s.has(id)) {
      if (isSetupStore) {
        createSetupStore(id, setup, options, pinia);
      } else {
        createOptionsStore(id, options, pinia);
      }
      {
        useStore._pinia = pinia;
      }
    }
    const store = pinia._s.get(id);
    if (hot) {
      const hotId = "__hot:" + id;
      const newStore = isSetupStore ? createSetupStore(hotId, setup, options, pinia, true) : createOptionsStore(hotId, assign({}, options), pinia, true);
      hot._hotUpdate(newStore);
      delete pinia.state.value[hotId];
      pinia._s.delete(hotId);
    }
    if (IS_CLIENT) {
      const currentInstance2 = getCurrentInstance();
      if (currentInstance2 && currentInstance2.proxy && // avoid adding stores that are just built for hot module replacement
      !hot) {
        const vm = currentInstance2.proxy;
        const cache = "_pStores" in vm ? vm._pStores : vm._pStores = {};
        cache[id] = store;
      }
    }
    return store;
  }
  useStore.$id = id;
  return useStore;
}
const useFormStore = defineStore("FormStore", {
  id: "formStore",
  state: () => ({
    form_errors: []
  }),
  getters: {},
  actions: {
    setInitialErrors(initial_errors) {
      this.form_errors = initial_errors;
    },
    /**
     * Register an invalid module
     */
    registerInvalidModule: (module_error) => {
      (void 0).form_errors.push(module_error);
    },
    /**
     * Register a module as fixed
     */
    registerFixedModule: (module_key) => {
      let _this2 = void 0;
      (void 0).form_errors.forEach(function(item, index) {
        if (item.key === module_key) {
          _this2.form_errors.splice(index, 1);
        }
      });
    }
  }
});
class FormErrors {
  constructor(input_data = {}) {
    const options = {
      props: {
        initial_errors: {
          type: Object,
          default: () => {
          }
        }
      },
      setup(props) {
        const validation_errors = ref(props.initial_errors);
        let has_errors = computed(() => {
          return Object.entries(validation_errors.value).length >= 1;
        });
        watch(validation_errors, () => {
          displayNonValidModules();
        });
        onBeforeMount(() => {
          useFormStore().setInitialErrors(props.initial_errors);
        });
        function displayNonValidModules() {
          let error_class = "validation-error";
          let invalid_modules = validation_errors.value.map((a) => "module_" + a.key);
          let containers = document.querySelectorAll(".module-container");
          containers.forEach(function(container) {
            if (invalid_modules.includes(container.id)) {
              if (!container.classList.contains(error_class)) {
                container.classList.add(error_class);
              }
            } else {
              if (container.classList.contains(error_class)) {
                container.classList.remove(error_class);
              }
            }
          });
        }
        return {
          validation_errors,
          has_errors
        };
      }
    };
    return createApp(options, input_data).use(createPinia());
  }
}
const _hoisted_1$9 = ["id", "name"];
const _sfc_main$c = {
  __name: "simple-text",
  props: /* @__PURE__ */ mergeModels({
    id: {
      type: String,
      default: null
    },
    tooltipEnabled: {
      type: Boolean,
      default: true
    }
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props) {
    const inputValue = useModel(__props, "modelValue");
    return (_ctx, _cache) => {
      const _component_tooltip = resolveComponent("tooltip");
      return openBlock(), createElementBlock("span", null, [
        withDirectives(createBaseVNode("input", {
          type: "text",
          id: __props.id,
          name: __props.id,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => inputValue.value = $event),
          class: "field-edit",
          autocomplete: "off"
        }, null, 8, _hoisted_1$9), [
          [vModelText, inputValue.value]
        ]),
        __props.tooltipEnabled ? (openBlock(), createBlock(_component_tooltip, {
          key: 0,
          "anchor-elem-id": __props.id
        }, {
          default: withCtx(() => [
            createTextVNode(toDisplayString(inputValue.value), 1)
          ]),
          _: 1
        }, 8, ["anchor-elem-id"])) : createCommentVNode("", true)
      ]);
    };
  }
};
const _hoisted_1$8 = ["id", "textContent"];
const _hoisted_2$5 = ["id", "textContent"];
const _sfc_main$b = {
  __name: "simple-textarea",
  props: /* @__PURE__ */ mergeModels({
    id: {
      type: String,
      default: null
    },
    disabled: {
      type: Boolean,
      default: false
    }
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props) {
    const inputValue = useModel(__props, "modelValue");
    function onInput(e) {
      inputValue.value = e.target.innerText;
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("span", null, [
        __props.disabled ? (openBlock(), createElementBlock("span", {
          key: 0,
          id: __props.id,
          class: "field-preview disabled",
          onInput,
          textContent: toDisplayString(inputValue.value)
        }, null, 40, _hoisted_1$8)) : (openBlock(), createElementBlock("span", {
          key: 1,
          id: __props.id,
          class: "field-preview",
          contenteditable: "",
          onInput,
          textContent: toDisplayString(inputValue.value)
        }, null, 40, _hoisted_2$5))
      ]);
    };
  }
};
const _sfc_main$a = {
  __name: "simple-url",
  props: /* @__PURE__ */ mergeModels({
    id: {
      type: String,
      default: null
    },
    dataRules: {
      type: String,
      default: ""
    }
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props) {
    const inputValue = useModel(__props, "modelValue");
    return (_ctx, _cache) => {
      const _component_simple_text = resolveComponent("simple-text");
      return openBlock(), createBlock(_component_simple_text, {
        modelValue: inputValue.value,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => inputValue.value = $event),
        id: __props.id,
        name: __props.id,
        "data-rules": __props.dataRules !== "" ? __props.dataRules + "|url" : "url"
      }, null, 8, ["modelValue", "id", "name", "data-rules"]);
    };
  }
};
const _sfc_main$9 = {
  __name: "simple-email",
  props: /* @__PURE__ */ mergeModels({
    id: {
      type: String,
      default: null
    },
    dataRules: {
      type: String,
      default: ""
    }
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props) {
    const inputValue = useModel(__props, "modelValue");
    return (_ctx, _cache) => {
      const _component_simple_text = resolveComponent("simple-text");
      return openBlock(), createBlock(_component_simple_text, {
        modelValue: inputValue.value,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => inputValue.value = $event),
        id: __props.id,
        name: __props.id,
        "data-rules": __props.dataRules !== "" ? __props.dataRules + "|email" : "email"
      }, null, 8, ["modelValue", "id", "name", "data-rules"]);
    };
  }
};
const _hoisted_1$7 = ["onClick", "rate"];
const _hoisted_2$4 = ["id"];
const _sfc_main$8 = {
  __name: "rating",
  props: /* @__PURE__ */ mergeModels({
    id: {
      type: String,
      default: null
    },
    ratingType: String,
    legend: {
      type: Array,
      default: () => null
    }
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props) {
    const props = __props;
    const ratingOptions = ref(null);
    const list = computed(() => {
      return buildOptionList();
    });
    const inputValue = useModel(__props, "modelValue");
    function buildOptionList() {
      let list2 = [];
      let ratingType = props.ratingType;
      if (ratingType.includes("WithNA")) {
        list2.push({ "value": "-99", "label": "N/A" });
        ratingType = ratingType.replace("WithNA", "");
      }
      ratingType = ratingType.replace("Minus", "-");
      let [min2, max2] = ratingType.split("to");
      for (let i = min2; i <= max2; i++) {
        list2.push({ "value": i, "label": i });
      }
      return list2;
    }
    function setActive(value) {
      let applyClass = __applyClass(value, inputValue.value);
      return applyClass ? "active" : "";
    }
    function __applyClass(localValue, globalValue) {
      if (localValue !== "-99" && parseFloat(localValue) <= parseFloat(globalValue)) {
        return true;
      } else if (localValue === "-99" && globalValue === "-99") {
        return true;
      }
      return false;
    }
    function setHover(evt) {
      let hoverValue = evt.target.getAttribute("rate");
      let ratingItems = ratingOptions.value.querySelectorAll(".rating");
      for (let item of ratingItems.values()) {
        let value = item.getAttribute("rate");
        let applyClass = __applyClass(value, hoverValue);
        if (applyClass && evt.type === "mouseover") {
          item.classList.add("hover");
        } else {
          item.classList.remove("hover");
        }
      }
    }
    function updateRating(value) {
      if (inputValue.value !== null && value.toString() === inputValue.value.toString()) {
        value = null;
      }
      inputValue.value = value;
      let ratingItems = ratingOptions.value.querySelectorAll(".rating");
      for (let item of ratingItems.values()) {
        item.classList.remove("hover");
      }
    }
    function tooltipLabel(index) {
      if (props.legend != null) {
        if (props.legend.hasOwnProperty(index)) {
          return props.legend[index].charAt(0).toUpperCase() + props.legend[index].slice(1);
        }
      }
      return "";
    }
    return (_ctx, _cache) => {
      const _component_tooltip = resolveComponent("tooltip");
      return openBlock(), createElementBlock("div", null, [
        createBaseVNode("span", {
          ref_key: "ratingOptions",
          ref: ratingOptions,
          class: "rating-container"
        }, [
          (openBlock(true), createElementBlock(Fragment, null, renderList(list.value, (item, index) => {
            return openBlock(), createElementBlock("span", null, [
              createBaseVNode("span", {
                class: normalizeClass(["rating field-edit", [item["value"] === "-99" ? "ratingNa" : "ratingNum", setActive(item["value"])]]),
                onClick: ($event) => updateRating(item["value"]),
                onMouseover: setHover,
                onMouseout: setHover,
                rate: item["value"]
              }, toDisplayString(item["label"]), 43, _hoisted_1$7),
              createVNode(_component_tooltip, null, {
                default: withCtx(() => [
                  createTextVNode(toDisplayString(tooltipLabel(index)), 1)
                ]),
                _: 2
              }, 1024)
            ]);
          }), 256))
        ], 512),
        withDirectives(createBaseVNode("input", {
          type: "hidden",
          id: __props.id,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => inputValue.value = $event)
        }, null, 8, _hoisted_2$4), [
          [vModelText, inputValue.value]
        ])
      ]);
    };
  }
};
function useList(component_data) {
  const sortBy = ref(component_data.sortBy || null);
  const sortDir = ref(component_data.sortDir || "asc");
  function sortList(items) {
    return sortBy !== null ? sorter(items) : items;
  }
  function sorter(data) {
    return data.sort(function(a, b) {
      let dir = sortDir.value === "asc" ? 1 : -1;
      let text_a = getAttribute(a, sortBy.value || "");
      let text_b = getAttribute(b, sortBy.value || "");
      if (typeof text_a !== "undefined" && typeof text_b !== "undefined") {
        if (text_a.toString().toLowerCase() > text_b.toString().toLowerCase()) {
          return dir;
        }
        if (text_a.toString().toLowerCase() < text_b.toString().toLowerCase()) {
          return -1 * dir;
        }
      }
      return 0;
    });
  }
  function filterByAttribute2(items, filter_value, filter_on) {
    filter_value = filter_value === "" || filter_value === "null" ? null : filter_value;
    if (filter_value !== null) {
      items = items.filter((item) => {
        let value = getAttribute(item, filter_on);
        if (value.toString().toLowerCase() === filter_value.toString().toLowerCase()) {
          return true;
        }
      });
    }
    return items;
  }
  function getAttribute(item, attribute) {
    let value = null;
    if (attribute.includes(".")) {
      let path = attribute.split(".");
      value = item;
      for (let i = 0; i < path.length; ++i) {
        value = value.hasOwnProperty(path[i]) ? value[path[i]] : "";
      }
    } else {
      value = item[attribute];
    }
    value = value === null ? "" : value;
    return value;
  }
  return {
    sortList,
    filterByAttribute: filterByAttribute2
  };
}
var E = Object.defineProperty, M = Object.defineProperties;
var x = Object.getOwnPropertyDescriptors;
var V = Object.getOwnPropertySymbols;
var I = Object.prototype.hasOwnProperty, N = Object.prototype.propertyIsEnumerable;
var C = (e, t, s) => t in e ? E(e, t, { enumerable: true, configurable: true, writable: true, value: s }) : e[t] = s, f = (e, t) => {
  for (var s in t || (t = {}))
    I.call(t, s) && C(e, s, t[s]);
  if (V)
    for (var s of V(t))
      N.call(t, s) && C(e, s, t[s]);
  return e;
}, m = (e, t) => M(e, x(t));
const U = {
  props: {
    autoscroll: {
      type: Boolean,
      default: true
    }
  },
  watch: {
    typeAheadPointer() {
      this.autoscroll && this.maybeAdjustScroll();
    },
    open(e) {
      this.autoscroll && e && this.$nextTick(() => this.maybeAdjustScroll());
    }
  },
  methods: {
    maybeAdjustScroll() {
      var t;
      const e = ((t = this.$refs.dropdownMenu) == null ? void 0 : t.children[this.typeAheadPointer]) || false;
      if (e) {
        const s = this.getDropdownViewport(), { top: n, bottom: l, height: i } = e.getBoundingClientRect();
        if (n < s.top)
          return this.$refs.dropdownMenu.scrollTop = e.offsetTop;
        if (l > s.bottom)
          return this.$refs.dropdownMenu.scrollTop = e.offsetTop - (s.height - i);
      }
    },
    getDropdownViewport() {
      return this.$refs.dropdownMenu ? this.$refs.dropdownMenu.getBoundingClientRect() : {
        height: 0,
        top: 0,
        bottom: 0
      };
    }
  }
}, q = {
  data() {
    return {
      typeAheadPointer: -1
    };
  },
  watch: {
    filteredOptions() {
      for (let e = 0; e < this.filteredOptions.length; e++)
        if (this.selectable(this.filteredOptions[e])) {
          this.typeAheadPointer = e;
          break;
        }
    },
    open(e) {
      e && this.typeAheadToLastSelected();
    },
    selectedValue() {
      this.open && this.typeAheadToLastSelected();
    }
  },
  methods: {
    typeAheadUp() {
      for (let e = this.typeAheadPointer - 1; e >= 0; e--)
        if (this.selectable(this.filteredOptions[e])) {
          this.typeAheadPointer = e;
          break;
        }
    },
    typeAheadDown() {
      for (let e = this.typeAheadPointer + 1; e < this.filteredOptions.length; e++)
        if (this.selectable(this.filteredOptions[e])) {
          this.typeAheadPointer = e;
          break;
        }
    },
    typeAheadSelect() {
      const e = this.filteredOptions[this.typeAheadPointer];
      e && this.selectable(e) && this.select(e);
    },
    typeAheadToLastSelected() {
      this.typeAheadPointer = this.selectedValue.length !== 0 ? this.filteredOptions.indexOf(this.selectedValue[this.selectedValue.length - 1]) : -1;
    }
  }
}, J = {
  props: {
    loading: {
      type: Boolean,
      default: false
    }
  },
  data() {
    return {
      mutableLoading: false
    };
  },
  watch: {
    search() {
      this.$emit("search", this.search, this.toggleLoading);
    },
    loading(e) {
      this.mutableLoading = e;
    }
  },
  methods: {
    toggleLoading(e = null) {
      return e == null ? this.mutableLoading = !this.mutableLoading : this.mutableLoading = e;
    }
  }
}, S = (e, t) => {
  const s = e.__vccOpts || e;
  for (const [n, l] of t)
    s[n] = l;
  return s;
}, H = {}, X = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "10",
  height: "10"
}, Y = /* @__PURE__ */ createBaseVNode("path", { d: "M6.895455 5l2.842897-2.842898c.348864-.348863.348864-.914488 0-1.263636L9.106534.261648c-.348864-.348864-.914489-.348864-1.263636 0L5 3.104545 2.157102.261648c-.348863-.348864-.914488-.348864-1.263636 0L.261648.893466c-.348864.348864-.348864.914489 0 1.263636L3.104545 5 .261648 7.842898c-.348864.348863-.348864.914488 0 1.263636l.631818.631818c.348864.348864.914773.348864 1.263636 0L5 6.895455l2.842898 2.842897c.348863.348864.914772.348864 1.263636 0l.631818-.631818c.348864-.348864.348864-.914489 0-1.263636L6.895455 5z" }, null, -1), Q = [
  Y
];
function G(e, t) {
  return openBlock(), createElementBlock("svg", X, Q);
}
const W = /* @__PURE__ */ S(H, [["render", G]]), Z = {}, ee = {
  xmlns: "http://www.w3.org/2000/svg",
  width: "14",
  height: "10"
}, te = /* @__PURE__ */ createBaseVNode("path", { d: "M9.211364 7.59931l4.48338-4.867229c.407008-.441854.407008-1.158247 0-1.60046l-.73712-.80023c-.407008-.441854-1.066904-.441854-1.474243 0L7 5.198617 2.51662.33139c-.407008-.441853-1.066904-.441853-1.474243 0l-.737121.80023c-.407008.441854-.407008 1.158248 0 1.600461l4.48338 4.867228L7 10l2.211364-2.40069z" }, null, -1), se = [
  te
];
function ie(e, t) {
  return openBlock(), createElementBlock("svg", ee, se);
}
const oe = /* @__PURE__ */ S(Z, [["render", ie]]), T = {
  Deselect: W,
  OpenIndicator: oe
}, ne = {
  mounted(e, { instance: t }) {
    if (t.appendToBody) {
      const {
        height: s,
        top: n,
        left: l,
        width: i
      } = t.$refs.toggle.getBoundingClientRect();
      let y = window.scrollX || window.pageXOffset, o = window.scrollY || window.pageYOffset;
      e.unbindPosition = t.calculatePosition(e, t, {
        width: i + "px",
        left: y + l + "px",
        top: o + n + s + "px"
      }), document.body.appendChild(e);
    }
  },
  unmounted(e, { instance: t }) {
    t.appendToBody && (e.unbindPosition && typeof e.unbindPosition == "function" && e.unbindPosition(), e.parentNode && e.parentNode.removeChild(e));
  }
};
function le(e) {
  const t = {};
  return Object.keys(e).sort().forEach((s) => {
    t[s] = e[s];
  }), JSON.stringify(t);
}
let ae = 0;
function re() {
  return ++ae;
}
const de = {
  components: f({}, T),
  directives: { appendToBody: ne },
  mixins: [U, q, J],
  compatConfig: {
    MODE: 3
  },
  emits: [
    "open",
    "close",
    "update:modelValue",
    "search",
    "search:compositionstart",
    "search:compositionend",
    "search:keydown",
    "search:blur",
    "search:focus",
    "search:input",
    "option:created",
    "option:selecting",
    "option:selected",
    "option:deselecting",
    "option:deselected"
  ],
  props: {
    modelValue: {},
    components: {
      type: Object,
      default: () => ({})
    },
    options: {
      type: Array,
      default() {
        return [];
      }
    },
    disabled: {
      type: Boolean,
      default: false
    },
    clearable: {
      type: Boolean,
      default: true
    },
    deselectFromDropdown: {
      type: Boolean,
      default: false
    },
    searchable: {
      type: Boolean,
      default: true
    },
    multiple: {
      type: Boolean,
      default: false
    },
    placeholder: {
      type: String,
      default: ""
    },
    transition: {
      type: String,
      default: "vs__fade"
    },
    clearSearchOnSelect: {
      type: Boolean,
      default: true
    },
    closeOnSelect: {
      type: Boolean,
      default: true
    },
    label: {
      type: String,
      default: "label"
    },
    autocomplete: {
      type: String,
      default: "off"
    },
    reduce: {
      type: Function,
      default: (e) => e
    },
    selectable: {
      type: Function,
      default: (e) => true
    },
    getOptionLabel: {
      type: Function,
      default(e) {
        return typeof e == "object" ? e.hasOwnProperty(this.label) ? e[this.label] : console.warn(`[vue-select warn]: Label key "option.${this.label}" does not exist in options object ${JSON.stringify(e)}.
https://vue-select.org/api/props.html#getoptionlabel`) : e;
      }
    },
    getOptionKey: {
      type: Function,
      default(e) {
        if (typeof e != "object")
          return e;
        try {
          return e.hasOwnProperty("id") ? e.id : le(e);
        } catch (t) {
          return console.warn(`[vue-select warn]: Could not stringify this option to generate unique key. Please provide'getOptionKey' prop to return a unique key for each option.
https://vue-select.org/api/props.html#getoptionkey`, e, t);
        }
      }
    },
    onTab: {
      type: Function,
      default: function() {
        this.selectOnTab && !this.isComposing && this.typeAheadSelect();
      }
    },
    taggable: {
      type: Boolean,
      default: false
    },
    tabindex: {
      type: Number,
      default: null
    },
    pushTags: {
      type: Boolean,
      default: false
    },
    filterable: {
      type: Boolean,
      default: true
    },
    filterBy: {
      type: Function,
      default(e, t, s) {
        return (t || "").toLocaleLowerCase().indexOf(s.toLocaleLowerCase()) > -1;
      }
    },
    filter: {
      type: Function,
      default(e, t) {
        return e.filter((s) => {
          let n = this.getOptionLabel(s);
          return typeof n == "number" && (n = n.toString()), this.filterBy(s, n, t);
        });
      }
    },
    createOption: {
      type: Function,
      default(e) {
        return typeof this.optionList[0] == "object" ? { [this.label]: e } : e;
      }
    },
    resetOnOptionsChange: {
      default: false,
      validator: (e) => ["function", "boolean"].includes(typeof e)
    },
    clearSearchOnBlur: {
      type: Function,
      default: function({ clearSearchOnSelect: e, multiple: t }) {
        return e && !t;
      }
    },
    noDrop: {
      type: Boolean,
      default: false
    },
    inputId: {
      type: String
    },
    dir: {
      type: String,
      default: "auto"
    },
    selectOnTab: {
      type: Boolean,
      default: false
    },
    selectOnKeyCodes: {
      type: Array,
      default: () => [13]
    },
    searchInputQuerySelector: {
      type: String,
      default: "[type=search]"
    },
    mapKeydown: {
      type: Function,
      default: (e, t) => e
    },
    appendToBody: {
      type: Boolean,
      default: false
    },
    calculatePosition: {
      type: Function,
      default(e, t, { width: s, top: n, left: l }) {
        e.style.top = n, e.style.left = l, e.style.width = s;
      }
    },
    dropdownShouldOpen: {
      type: Function,
      default({ noDrop: e, open: t, mutableLoading: s }) {
        return e ? false : t && !s;
      }
    },
    uid: {
      type: [String, Number],
      default: () => re()
    }
  },
  data() {
    return {
      search: "",
      open: false,
      isComposing: false,
      pushedTags: [],
      _value: [],
      deselectButtons: []
    };
  },
  computed: {
    isReducingValues() {
      return this.$props.reduce !== this.$options.props.reduce.default;
    },
    isTrackingValues() {
      return typeof this.modelValue == "undefined" || this.isReducingValues;
    },
    selectedValue() {
      let e = this.modelValue;
      return this.isTrackingValues && (e = this.$data._value), e != null && e !== "" ? [].concat(e) : [];
    },
    optionList() {
      return this.options.concat(this.pushTags ? this.pushedTags : []);
    },
    searchEl() {
      return this.$slots.search ? this.$refs.selectedOptions.querySelector(this.searchInputQuerySelector) : this.$refs.search;
    },
    scope() {
      const e = {
        search: this.search,
        loading: this.loading,
        searching: this.searching,
        filteredOptions: this.filteredOptions
      };
      return {
        search: {
          attributes: f({
            disabled: this.disabled,
            placeholder: this.searchPlaceholder,
            tabindex: this.tabindex,
            readonly: !this.searchable,
            id: this.inputId,
            "aria-autocomplete": "list",
            "aria-labelledby": `vs${this.uid}__combobox`,
            "aria-controls": `vs${this.uid}__listbox`,
            ref: "search",
            type: "search",
            autocomplete: this.autocomplete,
            value: this.search
          }, this.dropdownOpen && this.filteredOptions[this.typeAheadPointer] ? {
            "aria-activedescendant": `vs${this.uid}__option-${this.typeAheadPointer}`
          } : {}),
          events: {
            compositionstart: () => this.isComposing = true,
            compositionend: () => this.isComposing = false,
            keydown: this.onSearchKeyDown,
            blur: this.onSearchBlur,
            focus: this.onSearchFocus,
            input: (t) => this.search = t.target.value
          }
        },
        spinner: {
          loading: this.mutableLoading
        },
        noOptions: {
          search: this.search,
          loading: this.mutableLoading,
          searching: this.searching
        },
        openIndicator: {
          attributes: {
            ref: "openIndicator",
            role: "presentation",
            class: "vs__open-indicator"
          }
        },
        listHeader: e,
        listFooter: e,
        header: m(f({}, e), { deselect: this.deselect }),
        footer: m(f({}, e), { deselect: this.deselect })
      };
    },
    childComponents() {
      return f(f({}, T), this.components);
    },
    stateClasses() {
      return {
        "vs--open": this.dropdownOpen,
        "vs--single": !this.multiple,
        "vs--multiple": this.multiple,
        "vs--searching": this.searching && !this.noDrop,
        "vs--searchable": this.searchable && !this.noDrop,
        "vs--unsearchable": !this.searchable,
        "vs--loading": this.mutableLoading,
        "vs--disabled": this.disabled
      };
    },
    searching() {
      return !!this.search;
    },
    dropdownOpen() {
      return this.dropdownShouldOpen(this);
    },
    searchPlaceholder() {
      return this.isValueEmpty && this.placeholder ? this.placeholder : void 0;
    },
    filteredOptions() {
      const e = [].concat(this.optionList);
      if (!this.filterable && !this.taggable)
        return e;
      const t = this.search.length ? this.filter(e, this.search, this) : e;
      if (this.taggable && this.search.length) {
        const s = this.createOption(this.search);
        this.optionExists(s) || t.unshift(s);
      }
      return t;
    },
    isValueEmpty() {
      return this.selectedValue.length === 0;
    },
    showClearButton() {
      return !this.multiple && this.clearable && !this.open && !this.isValueEmpty;
    }
  },
  watch: {
    options(e, t) {
      const s = () => typeof this.resetOnOptionsChange == "function" ? this.resetOnOptionsChange(e, t, this.selectedValue) : this.resetOnOptionsChange;
      !this.taggable && s() && this.clearSelection(), this.modelValue && this.isTrackingValues && this.setInternalValueFromOptions(this.modelValue);
    },
    modelValue: {
      immediate: true,
      handler(e) {
        this.isTrackingValues && this.setInternalValueFromOptions(e);
      }
    },
    multiple() {
      this.clearSelection();
    },
    open(e) {
      this.$emit(e ? "open" : "close");
    }
  },
  created() {
    this.mutableLoading = this.loading;
  },
  methods: {
    setInternalValueFromOptions(e) {
      Array.isArray(e) ? this.$data._value = e.map((t) => this.findOptionFromReducedValue(t)) : this.$data._value = this.findOptionFromReducedValue(e);
    },
    select(e) {
      this.$emit("option:selecting", e), this.isOptionSelected(e) ? this.deselectFromDropdown && (this.clearable || this.multiple && this.selectedValue.length > 1) && this.deselect(e) : (this.taggable && !this.optionExists(e) && (this.$emit("option:created", e), this.pushTag(e)), this.multiple && (e = this.selectedValue.concat(e)), this.updateValue(e), this.$emit("option:selected", e)), this.onAfterSelect(e);
    },
    deselect(e) {
      this.$emit("option:deselecting", e), this.updateValue(this.selectedValue.filter((t) => !this.optionComparator(t, e))), this.$emit("option:deselected", e);
    },
    clearSelection() {
      this.updateValue(this.multiple ? [] : null);
    },
    onAfterSelect(e) {
      this.closeOnSelect && (this.open = !this.open, this.searchEl.blur()), this.clearSearchOnSelect && (this.search = "");
    },
    updateValue(e) {
      typeof this.modelValue == "undefined" && (this.$data._value = e), e !== null && (Array.isArray(e) ? e = e.map((t) => this.reduce(t)) : e = this.reduce(e)), this.$emit("update:modelValue", e);
    },
    toggleDropdown(e) {
      const t = e.target !== this.searchEl;
      t && e.preventDefault();
      const s = [
        ...this.deselectButtons || [],
        this.$refs.clearButton
      ];
      if (this.searchEl === void 0 || s.filter(Boolean).some((n) => n.contains(e.target) || n === e.target)) {
        e.preventDefault();
        return;
      }
      this.open && t ? this.searchEl.blur() : this.disabled || (this.open = true, this.searchEl.focus());
    },
    isOptionSelected(e) {
      return this.selectedValue.some((t) => this.optionComparator(t, e));
    },
    isOptionDeselectable(e) {
      return this.isOptionSelected(e) && this.deselectFromDropdown;
    },
    optionComparator(e, t) {
      return this.getOptionKey(e) === this.getOptionKey(t);
    },
    findOptionFromReducedValue(e) {
      const t = (n) => JSON.stringify(this.reduce(n)) === JSON.stringify(e), s = [...this.options, ...this.pushedTags].filter(t);
      return s.length === 1 ? s[0] : s.find((n) => this.optionComparator(n, this.$data._value)) || e;
    },
    closeSearchOptions() {
      this.open = false, this.$emit("search:blur");
    },
    maybeDeleteValue() {
      if (!this.searchEl.value.length && this.selectedValue && this.selectedValue.length && this.clearable) {
        let e = null;
        this.multiple && (e = [
          ...this.selectedValue.slice(0, this.selectedValue.length - 1)
        ]), this.updateValue(e);
      }
    },
    optionExists(e) {
      return this.optionList.some((t) => this.optionComparator(t, e));
    },
    normalizeOptionForSlot(e) {
      return typeof e == "object" ? e : { [this.label]: e };
    },
    pushTag(e) {
      this.pushedTags.push(e);
    },
    onEscape() {
      this.search.length ? this.search = "" : this.searchEl.blur();
    },
    onSearchBlur() {
      if (this.mousedown && !this.searching)
        this.mousedown = false;
      else {
        const { clearSearchOnSelect: e, multiple: t } = this;
        this.clearSearchOnBlur({ clearSearchOnSelect: e, multiple: t }) && (this.search = ""), this.closeSearchOptions();
        return;
      }
      if (this.search.length === 0 && this.options.length === 0) {
        this.closeSearchOptions();
        return;
      }
    },
    onSearchFocus() {
      this.open = true, this.$emit("search:focus");
    },
    onMousedown() {
      this.mousedown = true;
    },
    onMouseUp() {
      this.mousedown = false;
    },
    onSearchKeyDown(e) {
      const t = (l) => (l.preventDefault(), !this.isComposing && this.typeAheadSelect()), s = {
        8: (l) => this.maybeDeleteValue(),
        9: (l) => this.onTab(),
        27: (l) => this.onEscape(),
        38: (l) => (l.preventDefault(), this.typeAheadUp()),
        40: (l) => (l.preventDefault(), this.typeAheadDown())
      };
      this.selectOnKeyCodes.forEach((l) => s[l] = t);
      const n = this.mapKeydown(s, this);
      if (typeof n[e.keyCode] == "function")
        return n[e.keyCode](e);
    }
  }
}, he = ["dir"], ce = ["id", "aria-expanded", "aria-owns"], ue = {
  ref: "selectedOptions",
  class: "vs__selected-options"
}, pe = ["disabled", "title", "aria-label", "onClick"], fe = {
  ref: "actions",
  class: "vs__actions"
}, ge = ["disabled"], ye = { class: "vs__spinner" }, me = ["id"], be = ["id", "aria-selected", "onMouseover", "onClick"], _e = {
  key: 0,
  class: "vs__no-options"
}, Oe = /* @__PURE__ */ createTextVNode(" Sorry, no matching options. "), we = ["id"];
function ve(e, t, s, n, l, i) {
  const y = resolveDirective("append-to-body");
  return openBlock(), createElementBlock("div", {
    dir: s.dir,
    class: normalizeClass(["v-select", i.stateClasses])
  }, [
    renderSlot(e.$slots, "header", normalizeProps(guardReactiveProps(i.scope.header))),
    createBaseVNode("div", {
      id: `vs${s.uid}__combobox`,
      ref: "toggle",
      class: "vs__dropdown-toggle",
      role: "combobox",
      "aria-expanded": i.dropdownOpen.toString(),
      "aria-owns": `vs${s.uid}__listbox`,
      "aria-label": "Search for option",
      onMousedown: t[1] || (t[1] = (o) => i.toggleDropdown(o))
    }, [
      createBaseVNode("div", ue, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(i.selectedValue, (o, p2) => renderSlot(e.$slots, "selected-option-container", {
          option: i.normalizeOptionForSlot(o),
          deselect: i.deselect,
          multiple: s.multiple,
          disabled: s.disabled
        }, () => [
          (openBlock(), createElementBlock("span", {
            key: s.getOptionKey(o),
            class: "vs__selected"
          }, [
            renderSlot(e.$slots, "selected-option", normalizeProps(guardReactiveProps(i.normalizeOptionForSlot(o))), () => [
              createTextVNode(toDisplayString(s.getOptionLabel(o)), 1)
            ]),
            s.multiple ? (openBlock(), createElementBlock("button", {
              key: 0,
              ref_for: true,
              ref: (g) => l.deselectButtons[p2] = g,
              disabled: s.disabled,
              type: "button",
              class: "vs__deselect",
              title: `Deselect ${s.getOptionLabel(o)}`,
              "aria-label": `Deselect ${s.getOptionLabel(o)}`,
              onClick: (g) => i.deselect(o)
            }, [
              (openBlock(), createBlock(resolveDynamicComponent(i.childComponents.Deselect)))
            ], 8, pe)) : createCommentVNode("", true)
          ]))
        ])), 256)),
        renderSlot(e.$slots, "search", normalizeProps(guardReactiveProps(i.scope.search)), () => [
          createBaseVNode("input", mergeProps({ class: "vs__search" }, i.scope.search.attributes, toHandlers(i.scope.search.events)), null, 16)
        ])
      ], 512),
      createBaseVNode("div", fe, [
        withDirectives(createBaseVNode("button", {
          ref: "clearButton",
          disabled: s.disabled,
          type: "button",
          class: "vs__clear",
          title: "Clear Selected",
          "aria-label": "Clear Selected",
          onClick: t[0] || (t[0] = (...o) => i.clearSelection && i.clearSelection(...o))
        }, [
          (openBlock(), createBlock(resolveDynamicComponent(i.childComponents.Deselect)))
        ], 8, ge), [
          [vShow, i.showClearButton]
        ]),
        renderSlot(e.$slots, "open-indicator", normalizeProps(guardReactiveProps(i.scope.openIndicator)), () => [
          s.noDrop ? createCommentVNode("", true) : (openBlock(), createBlock(resolveDynamicComponent(i.childComponents.OpenIndicator), normalizeProps(mergeProps({ key: 0 }, i.scope.openIndicator.attributes)), null, 16))
        ]),
        renderSlot(e.$slots, "spinner", normalizeProps(guardReactiveProps(i.scope.spinner)), () => [
          withDirectives(createBaseVNode("div", ye, "Loading...", 512), [
            [vShow, e.mutableLoading]
          ])
        ])
      ], 512)
    ], 40, ce),
    createVNode(Transition, { name: s.transition }, {
      default: withCtx(() => [
        i.dropdownOpen ? withDirectives((openBlock(), createElementBlock("ul", {
          id: `vs${s.uid}__listbox`,
          ref: "dropdownMenu",
          key: `vs${s.uid}__listbox`,
          class: "vs__dropdown-menu",
          role: "listbox",
          tabindex: "-1",
          onMousedown: t[2] || (t[2] = withModifiers((...o) => i.onMousedown && i.onMousedown(...o), ["prevent"])),
          onMouseup: t[3] || (t[3] = (...o) => i.onMouseUp && i.onMouseUp(...o))
        }, [
          renderSlot(e.$slots, "list-header", normalizeProps(guardReactiveProps(i.scope.listHeader))),
          (openBlock(true), createElementBlock(Fragment, null, renderList(i.filteredOptions, (o, p2) => (openBlock(), createElementBlock("li", {
            id: `vs${s.uid}__option-${p2}`,
            key: s.getOptionKey(o),
            role: "option",
            class: normalizeClass(["vs__dropdown-option", {
              "vs__dropdown-option--deselect": i.isOptionDeselectable(o) && p2 === e.typeAheadPointer,
              "vs__dropdown-option--selected": i.isOptionSelected(o),
              "vs__dropdown-option--highlight": p2 === e.typeAheadPointer,
              "vs__dropdown-option--disabled": !s.selectable(o)
            }]),
            "aria-selected": p2 === e.typeAheadPointer ? true : null,
            onMouseover: (g) => s.selectable(o) ? e.typeAheadPointer = p2 : null,
            onClick: withModifiers((g) => s.selectable(o) ? i.select(o) : null, ["prevent", "stop"])
          }, [
            renderSlot(e.$slots, "option", normalizeProps(guardReactiveProps(i.normalizeOptionForSlot(o))), () => [
              createTextVNode(toDisplayString(s.getOptionLabel(o)), 1)
            ])
          ], 42, be))), 128)),
          i.filteredOptions.length === 0 ? (openBlock(), createElementBlock("li", _e, [
            renderSlot(e.$slots, "no-options", normalizeProps(guardReactiveProps(i.scope.noOptions)), () => [
              Oe
            ])
          ])) : createCommentVNode("", true),
          renderSlot(e.$slots, "list-footer", normalizeProps(guardReactiveProps(i.scope.listFooter)))
        ], 40, me)), [
          [y]
        ]) : (openBlock(), createElementBlock("ul", {
          key: 1,
          id: `vs${s.uid}__listbox`,
          role: "listbox",
          style: { display: "none", visibility: "hidden" }
        }, null, 8, we))
      ]),
      _: 3
    }, 8, ["name"]),
    renderSlot(e.$slots, "footer", normalizeProps(guardReactiveProps(i.scope.footer)))
  ], 10, he);
}
const Ce = /* @__PURE__ */ S(de, [["render", ve]]);
const _hoisted_1$6 = ["id"];
const __default__ = {
  components: {
    "v-select": Ce
  }
};
const _sfc_main$7 = /* @__PURE__ */ Object.assign(__default__, {
  __name: "dropdown",
  props: /* @__PURE__ */ mergeModels({
    id: {
      type: String,
      default: null
    },
    dataValues: {
      type: String,
      default: "{}"
    },
    taggable: {
      type: Boolean,
      default: false
    },
    multiple: {
      type: Boolean,
      default: false
    }
  }, {
    "modelValue": {},
    "modelModifiers": {},
    "selectedValue": {},
    "selectedValueModifiers": {}
  }),
  emits: ["update:modelValue", "update:selectedValue"],
  setup(__props) {
    const { sortList } = useList({});
    const props = __props;
    const inputValue = useModel(__props, "modelValue");
    let selectedValue = useModel(__props, "selectedValue");
    const selectElem = ref(null);
    let list = ref([]);
    onBeforeMount(() => {
      list = initializeOptions();
      selectedValue.value = initializeSelectedValue();
    });
    onMounted(() => {
      selectElem.value.onSearchBlurOriginal = selectElem.value.onSearchBlur;
      selectElem.value.onSearchBlur = () => {
        if (props.taggable && selectElem.value.search !== "") {
          let searchValue = {
            label: selectElem.value.search,
            code: selectElem.value.search
          };
          selectElem.value.select(searchValue);
        }
        selectElem.value.onSearchBlurOriginal();
      };
    });
    function initializeOptions() {
      let option_list = JSON.parse(props.dataValues);
      let list2 = [];
      for (let key in option_list) {
        if (key !== "" && key !== "null" && option_list.hasOwnProperty(key)) {
          list2.push(getPair(key));
        }
      }
      if (inputValue !== null && !(inputValue.value in option_list) && !props.multiple) {
        list2.push(getPair(inputValue.value));
      }
      list2 = sortList(list2);
      return list2;
    }
    function initializeSelectedValue() {
      let value = inputValue.value;
      if (value !== null) {
        if (props.multiple) {
          try {
            value = JSON.parse(value);
          } catch (e) {
            value = value.split(",");
          }
          return value.map(function(item) {
            return getPair(item);
          });
        } else {
          return getPair(value);
        }
      }
      return null;
    }
    function getPair(item) {
      let option_list = JSON.parse(props.dataValues);
      return {
        label: option_list[item] ?? item,
        code: item
      };
    }
    function onUpdateSelected() {
      if (props.multiple) {
        inputValue.value = JSON.stringify(selectedValue.value.map(function(item) {
          return item.code;
        }));
      } else {
        inputValue.value = selectedValue.value !== null ? selectedValue.value.code : null;
      }
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock(Fragment, null, [
        createVNode(unref(Ce), {
          taggable: __props.taggable,
          "push-tags": __props.taggable,
          multiple: __props.multiple,
          ref_key: "selectElem",
          ref: selectElem,
          modelValue: unref(selectedValue),
          "onUpdate:modelValue": [
            _cache[0] || (_cache[0] = ($event) => isRef(selectedValue) ? selectedValue.value = $event : selectedValue = $event),
            onUpdateSelected
          ],
          options: unref(list)
        }, null, 8, ["taggable", "push-tags", "multiple", "modelValue", "options"]),
        withDirectives(createBaseVNode("input", {
          type: "hidden",
          id: __props.id,
          "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => inputValue.value = $event)
        }, null, 8, _hoisted_1$6), [
          [vModelText, inputValue.value]
        ])
      ], 64);
    };
  }
});
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getDefaultExportFromCjs(x2) {
  return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
}
var airDatepicker = { exports: {} };
(function(module, exports) {
  !function(e, t) {
    module.exports = t();
  }(commonjsGlobal, function() {
    return function() {
      var e = { d: function(t2, i2) {
        for (var s2 in i2) e.o(i2, s2) && !e.o(t2, s2) && Object.defineProperty(t2, s2, { enumerable: true, get: i2[s2] });
      }, o: function(e2, t2) {
        return Object.prototype.hasOwnProperty.call(e2, t2);
      } }, t = {};
      e.d(t, { default: function() {
        return R;
      } });
      var i = { days: "days", months: "months", years: "years", day: "day", month: "month", year: "year", eventChangeViewDate: "changeViewDate", eventChangeCurrentView: "changeCurrentView", eventChangeFocusDate: "changeFocusDate", eventChangeSelectedDate: "changeSelectedDate", eventChangeTime: "changeTime", eventChangeLastSelectedDate: "changeLastSelectedDate", actionSelectDate: "selectDate", actionUnselectDate: "unselectDate", cssClassWeekend: "-weekend-" }, s = { classes: "", inline: false, locale: { days: ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота"], daysShort: ["Вос", "Пон", "Вто", "Сре", "Чет", "Пят", "Суб"], daysMin: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"], months: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"], monthsShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"], today: "Сегодня", clear: "Очистить", dateFormat: "dd.MM.yyyy", timeFormat: "HH:mm", firstDay: 1 }, startDate: /* @__PURE__ */ new Date(), firstDay: "", weekends: [6, 0], dateFormat: "", altField: "", altFieldDateFormat: "T", toggleSelected: true, keyboardNav: true, selectedDates: false, container: "", isMobile: false, visible: false, position: "bottom left", offset: 12, view: i.days, minView: i.days, showOtherMonths: true, selectOtherMonths: true, moveToOtherMonthsOnSelect: true, showOtherYears: true, selectOtherYears: true, moveToOtherYearsOnSelect: true, minDate: "", maxDate: "", disableNavWhenOutOfRange: true, multipleDates: false, multipleDatesSeparator: ", ", range: false, dynamicRange: true, buttons: false, monthsField: "monthsShort", showEvent: "focus", autoClose: false, fixedHeight: false, prevHtml: '<svg><path d="M 17,12 l -5,5 l 5,5"></path></svg>', nextHtml: '<svg><path d="M 14,12 l 5,5 l -5,5"></path></svg>', navTitles: { days: "MMMM, <i>yyyy</i>", months: "yyyy", years: "yyyy1 - yyyy2" }, timepicker: false, onlyTimepicker: false, dateTimeSeparator: " ", timeFormat: "", minHours: 0, maxHours: 24, minMinutes: 0, maxMinutes: 59, hoursStep: 1, minutesStep: 1, onSelect: false, onChangeViewDate: false, onChangeView: false, onRenderCell: false, onShow: false, onHide: false, onClickDayName: false };
      function a(e2) {
        let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : document;
        return "string" == typeof e2 ? t2.querySelector(e2) : e2;
      }
      function n() {
        let { tagName: e2 = "div", className: t2 = "", innerHtml: i2 = "", id: s2 = "", attrs: a2 = {} } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, n2 = document.createElement(e2);
        return t2 && n2.classList.add(...t2.split(" ")), s2 && (n2.id = s2), i2 && (n2.innerHTML = i2), a2 && r(n2, a2), n2;
      }
      function r(e2, t2) {
        for (let [i2, s2] of Object.entries(t2)) void 0 !== s2 && e2.setAttribute(i2, s2);
        return e2;
      }
      function o(e2) {
        return new Date(e2.getFullYear(), e2.getMonth() + 1, 0).getDate();
      }
      function h2(e2) {
        let t2 = e2.getHours(), { hours: i2, dayPeriod: s2 } = l(t2);
        return { year: e2.getFullYear(), month: e2.getMonth(), fullMonth: e2.getMonth() + 1 < 10 ? "0" + (e2.getMonth() + 1) : e2.getMonth() + 1, date: e2.getDate(), fullDate: e2.getDate() < 10 ? "0" + e2.getDate() : e2.getDate(), day: e2.getDay(), hours: t2, fullHours: d(t2), hours12: i2, dayPeriod: s2, fullHours12: d(i2), minutes: e2.getMinutes(), fullMinutes: e2.getMinutes() < 10 ? "0" + e2.getMinutes() : e2.getMinutes() };
      }
      function l(e2) {
        return { dayPeriod: e2 > 11 ? "pm" : "am", hours: e2 % 12 == 0 ? 12 : e2 % 12 };
      }
      function d(e2) {
        return e2 < 10 ? "0" + e2 : e2;
      }
      function c(e2) {
        let t2 = 10 * Math.floor(e2.getFullYear() / 10);
        return [t2, t2 + 9];
      }
      function u() {
        let e2 = [];
        for (var t2 = arguments.length, i2 = new Array(t2), s2 = 0; s2 < t2; s2++) i2[s2] = arguments[s2];
        return i2.forEach((t3) => {
          if ("object" == typeof t3) for (let i3 in t3) t3[i3] && e2.push(i3);
          else t3 && e2.push(t3);
        }), e2.join(" ");
      }
      function p2(e2, t2) {
        let s2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : i.days;
        if (!e2 || !t2) return false;
        let a2 = h2(e2), n2 = h2(t2);
        return { [i.days]: a2.date === n2.date && a2.month === n2.month && a2.year === n2.year, [i.months]: a2.month === n2.month && a2.year === n2.year, [i.years]: a2.year === n2.year }[s2];
      }
      function m2(e2, t2, i2) {
        let s2 = g(e2, false).getTime(), a2 = g(t2, false).getTime();
        return i2 ? s2 >= a2 : s2 > a2;
      }
      function v(e2, t2) {
        return !m2(e2, t2, true);
      }
      function g(e2) {
        let t2 = !(arguments.length > 1 && void 0 !== arguments[1]) || arguments[1], i2 = new Date(e2.getTime());
        return "boolean" != typeof t2 || t2 || function(e3) {
          e3.setHours(0, 0, 0, 0);
        }(i2), i2;
      }
      function D(e2, t2, i2) {
        e2.length ? e2.forEach((e3) => {
          e3.addEventListener(t2, i2);
        }) : e2.addEventListener(t2, i2);
      }
      function y(e2, t2) {
        return !(!e2 || e2 === document || e2 instanceof DocumentFragment) && (e2.matches(t2) ? e2 : y(e2.parentNode, t2));
      }
      function f2(e2, t2, i2) {
        return e2 > i2 ? i2 : e2 < t2 ? t2 : e2;
      }
      function w(e2) {
        for (var t2 = arguments.length, i2 = new Array(t2 > 1 ? t2 - 1 : 0), s2 = 1; s2 < t2; s2++) i2[s2 - 1] = arguments[s2];
        return i2.filter((e3) => e3).forEach((t3) => {
          for (let [i3, s3] of Object.entries(t3)) if (void 0 !== s3 && "[object Object]" === s3.toString()) {
            let t4 = void 0 !== e2[i3] ? e2[i3].toString() : void 0, a2 = s3.toString(), n2 = Array.isArray(s3) ? [] : {};
            e2[i3] = e2[i3] ? t4 !== a2 ? n2 : e2[i3] : n2, w(e2[i3], s3);
          } else e2[i3] = s3;
        }), e2;
      }
      function b(e2) {
        let t2 = e2;
        return e2 instanceof Date || ("string" == typeof e2 && /^\d{4}-\d{2}-\d{2}$/.test(e2) && (e2 += "T00:00:00"), t2 = new Date(e2)), isNaN(t2.getTime()) && (console.log(`Unable to convert value "${e2}" to Date object`), t2 = false), t2;
      }
      function k(e2) {
        let t2 = "\\s|\\.|-|/|\\\\|,|\\$|\\!|\\?|:|;";
        return new RegExp("(^|>|" + t2 + ")(" + e2 + ")($|<|" + t2 + ")", "g");
      }
      function $(e2, t2, i2) {
        return (t2 = function(e3) {
          var t3 = function(e4, t4) {
            if ("object" != typeof e4 || null === e4) return e4;
            var i3 = e4[Symbol.toPrimitive];
            if (void 0 !== i3) {
              var s2 = i3.call(e4, "string");
              if ("object" != typeof s2) return s2;
              throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return String(e4);
          }(e3);
          return "symbol" == typeof t3 ? t3 : String(t3);
        }(t2)) in e2 ? Object.defineProperty(e2, t2, { value: i2, enumerable: true, configurable: true, writable: true }) : e2[t2] = i2, e2;
      }
      class C2 {
        constructor() {
          let { type: e2, date: t2, dp: i2, opts: s2, body: a2 } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
          $(this, "focus", () => {
            this.$cell.classList.add("-focus-"), this.focused = true;
          }), $(this, "removeFocus", () => {
            this.$cell.classList.remove("-focus-"), this.focused = false;
          }), $(this, "select", () => {
            this.$cell.classList.add("-selected-"), this.selected = true;
          }), $(this, "removeSelect", () => {
            this.$cell.classList.remove("-selected-", "-range-from-", "-range-to-"), this.selected = false;
          }), $(this, "onChangeSelectedDate", () => {
            this.isDisabled || (this._handleSelectedStatus(), this.opts.range && this._handleRangeStatus());
          }), $(this, "onChangeFocusDate", (e3) => {
            if (!e3) return void (this.focused && this.removeFocus());
            let t3 = p2(e3, this.date, this.type);
            t3 ? this.focus() : !t3 && this.focused && this.removeFocus(), this.opts.range && this._handleRangeStatus();
          }), $(this, "render", () => (this.$cell.innerHTML = this._getHtml(), this._handleClasses(), this.$cell)), this.type = e2, this.singleType = this.type.slice(0, -1), this.date = t2, this.dp = i2, this.opts = s2, this.body = a2, this.customData = false, this.init();
        }
        init() {
          var e2;
          let { onRenderCell: t2 } = this.opts;
          t2 && (this.customData = t2({ date: this.date, cellType: this.singleType, datepicker: this.dp })), this._createElement(), this._bindDatepickerEvents(), null !== (e2 = this.customData) && void 0 !== e2 && e2.disabled && this.dp.disableDate(this.date);
        }
        _bindDatepickerEvents() {
          this.dp.on(i.eventChangeSelectedDate, this.onChangeSelectedDate), this.dp.on(i.eventChangeFocusDate, this.onChangeFocusDate);
        }
        unbindDatepickerEvents() {
          this.dp.off(i.eventChangeSelectedDate, this.onChangeSelectedDate), this.dp.off(i.eventChangeFocusDate, this.onChangeFocusDate);
        }
        _createElement() {
          var e2;
          let { year: t2, month: i2, date: s2 } = h2(this.date), a2 = (null === (e2 = this.customData) || void 0 === e2 ? void 0 : e2.attrs) || {};
          this.$cell = n({ attrs: { "data-year": t2, "data-month": i2, "data-date": s2, ...a2 } }), this.$cell.adpCell = this;
        }
        _getClassName() {
          var e2;
          let t2 = /* @__PURE__ */ new Date(), { selectOtherMonths: s2, selectOtherYears: a2 } = this.opts, { minDate: n2, maxDate: r2, isDateDisabled: o2 } = this.dp, { day: l2 } = h2(this.date), d2 = this._isOutOfMinMaxRange(), c2 = o2(this.date), m3 = u("air-datepicker-cell", `-${this.singleType}-`, { "-current-": p2(t2, this.date, this.type), "-min-date-": n2 && p2(n2, this.date, this.type), "-max-date-": r2 && p2(r2, this.date, this.type) }), v2 = "";
          switch (this.type) {
            case i.days:
              v2 = u({ "-weekend-": this.dp.isWeekend(l2), "-other-month-": this.isOtherMonth, "-disabled-": this.isOtherMonth && !s2 || d2 || c2 });
              break;
            case i.months:
              v2 = u({ "-disabled-": d2 });
              break;
            case i.years:
              v2 = u({ "-other-decade-": this.isOtherDecade, "-disabled-": d2 || this.isOtherDecade && !a2 });
          }
          return u(m3, v2, null === (e2 = this.customData) || void 0 === e2 ? void 0 : e2.classes).split(" ");
        }
        _getHtml() {
          var e2;
          let { year: t2, month: s2, date: a2 } = h2(this.date), { showOtherMonths: n2, showOtherYears: r2 } = this.opts;
          if (null !== (e2 = this.customData) && void 0 !== e2 && e2.html) return this.customData.html;
          switch (this.type) {
            case i.days:
              return !n2 && this.isOtherMonth ? "" : a2;
            case i.months:
              return this.dp.locale[this.opts.monthsField][s2];
            case i.years:
              return !r2 && this.isOtherDecade ? "" : t2;
          }
        }
        _isOutOfMinMaxRange() {
          let { minDate: e2, maxDate: t2 } = this.dp, { type: s2, date: a2 } = this, { month: n2, year: r2, date: o2 } = h2(a2), l2 = s2 === i.days, d2 = s2 === i.years, c2 = !!e2 && new Date(r2, d2 ? e2.getMonth() : n2, l2 ? o2 : e2.getDate()), u2 = !!t2 && new Date(r2, d2 ? t2.getMonth() : n2, l2 ? o2 : t2.getDate());
          return e2 && t2 ? v(c2, e2) || m2(u2, t2) : e2 ? v(c2, e2) : t2 ? m2(u2, t2) : void 0;
        }
        destroy() {
          this.unbindDatepickerEvents();
        }
        _handleRangeStatus() {
          const { selectedDates: e2, focusDate: t2, rangeDateTo: i2, rangeDateFrom: s2 } = this.dp, a2 = e2.length;
          if (!a2) return;
          let n2 = s2, r2 = i2;
          if (1 === a2 && t2) {
            const i3 = m2(t2, e2[0]);
            n2 = i3 ? e2[0] : t2, r2 = i3 ? t2 : e2[0];
          }
          let o2 = u({ "-in-range-": n2 && r2 && (h3 = this.date, l2 = n2, d2 = r2, m2(h3, l2) && v(h3, d2)), "-range-from-": n2 && p2(this.date, n2, this.type), "-range-to-": r2 && p2(this.date, r2, this.type) });
          var h3, l2, d2;
          this.$cell.classList.remove("-range-from-", "-range-to-", "-in-range-"), o2 && this.$cell.classList.add(...o2.split(" "));
        }
        _handleSelectedStatus() {
          let e2 = this.dp._checkIfDateIsSelected(this.date, this.type);
          e2 ? this.select() : !e2 && this.selected && this.removeSelect();
        }
        _handleInitialFocusStatus() {
          p2(this.dp.focusDate, this.date, this.type) && this.focus();
        }
        _handleClasses() {
          this.$cell.setAttribute("class", ""), this._handleInitialFocusStatus(), this.dp.hasSelectedDates && (this._handleSelectedStatus(), this.dp.opts.range && this._handleRangeStatus()), this.$cell.classList.add(...this._getClassName());
        }
        get isDisabled() {
          return this.$cell.matches(".-disabled-");
        }
        get isOtherMonth() {
          return this.dp.isOtherMonth(this.date);
        }
        get isOtherDecade() {
          return this.dp.isOtherDecade(this.date);
        }
      }
      function _(e2, t2, i2) {
        return (t2 = function(e3) {
          var t3 = function(e4, t4) {
            if ("object" != typeof e4 || null === e4) return e4;
            var i3 = e4[Symbol.toPrimitive];
            if (void 0 !== i3) {
              var s2 = i3.call(e4, "string");
              if ("object" != typeof s2) return s2;
              throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return String(e4);
          }(e3);
          return "symbol" == typeof t3 ? t3 : String(t3);
        }(t2)) in e2 ? Object.defineProperty(e2, t2, { value: i2, enumerable: true, configurable: true, writable: true }) : e2[t2] = i2, e2;
      }
      let M2 = { [i.days]: `<div class="air-datepicker-body--day-names"></div><div class="air-datepicker-body--cells -${i.days}-"></div>`, [i.months]: `<div class="air-datepicker-body--cells -${i.months}-"></div>`, [i.years]: `<div class="air-datepicker-body--cells -${i.years}-"></div>` };
      const S2 = ".air-datepicker-cell";
      class T2 {
        constructor(e2) {
          let { dp: t2, type: s2, opts: a2 } = e2;
          _(this, "handleClick", (e3) => {
            let t3 = e3.target.closest(S2).adpCell;
            if (t3.isDisabled) return;
            if (!this.dp.isMinViewReached) return void this.dp.down();
            let i2 = this.dp._checkIfDateIsSelected(t3.date, t3.type);
            i2 ? this.dp._handleAlreadySelectedDates(i2, t3.date) : this.dp.selectDate(t3.date);
          }), _(this, "handleDayNameClick", (e3) => {
            let t3 = e3.target.getAttribute("data-day-index");
            this.opts.onClickDayName({ dayIndex: Number(t3), datepicker: this.dp });
          }), _(this, "onChangeCurrentView", (e3) => {
            e3 !== this.type ? this.hide() : (this.show(), this.render());
          }), _(this, "onMouseOverCell", (e3) => {
            let t3 = y(e3.target, S2);
            this.dp.setFocusDate(!!t3 && t3.adpCell.date);
          }), _(this, "onMouseOutCell", () => {
            this.dp.setFocusDate(false);
          }), _(this, "onClickBody", (e3) => {
            let { onClickDayName: t3 } = this.opts, i2 = e3.target;
            i2.closest(S2) && this.handleClick(e3), t3 && i2.closest(".air-datepicker-body--day-name") && this.handleDayNameClick(e3);
          }), _(this, "onMouseDown", (e3) => {
            this.pressed = true;
            let t3 = y(e3.target, S2), i2 = t3 && t3.adpCell;
            p2(i2.date, this.dp.rangeDateFrom) && (this.rangeFromFocused = true), p2(i2.date, this.dp.rangeDateTo) && (this.rangeToFocused = true);
          }), _(this, "onMouseMove", (e3) => {
            if (!this.pressed || !this.dp.isMinViewReached) return;
            e3.preventDefault();
            let t3 = y(e3.target, S2), i2 = t3 && t3.adpCell, { selectedDates: s3, rangeDateTo: a3, rangeDateFrom: n2 } = this.dp;
            if (!i2 || i2.isDisabled) return;
            let { date: r2 } = i2;
            if (2 === s3.length) {
              if (this.rangeFromFocused && !m2(r2, a3)) {
                let { hours: e4, minutes: t4 } = h2(n2);
                r2.setHours(e4), r2.setMinutes(t4), this.dp.rangeDateFrom = r2, this.dp.replaceDate(n2, r2);
              }
              if (this.rangeToFocused && !v(r2, n2)) {
                let { hours: e4, minutes: t4 } = h2(a3);
                r2.setHours(e4), r2.setMinutes(t4), this.dp.rangeDateTo = r2, this.dp.replaceDate(a3, r2);
              }
            }
          }), _(this, "onMouseUp", () => {
            this.pressed = false, this.rangeFromFocused = false, this.rangeToFocused = false;
          }), _(this, "onChangeViewDate", (e3, t3) => {
            if (!this.isVisible) return;
            let s3 = c(e3), a3 = c(t3);
            switch (this.dp.currentView) {
              case i.days:
                if (p2(e3, t3, i.months)) return;
                break;
              case i.months:
                if (p2(e3, t3, i.years)) return;
                break;
              case i.years:
                if (s3[0] === a3[0] && s3[1] === a3[1]) return;
            }
            this.render();
          }), _(this, "render", () => {
            this.destroyCells(), this._generateCells(), this.cells.forEach((e3) => {
              this.$cells.appendChild(e3.render());
            });
          }), this.dp = t2, this.type = s2, this.opts = a2, this.cells = [], this.$el = "", this.pressed = false, this.isVisible = true, this.init();
        }
        init() {
          this._buildBaseHtml(), this.type === i.days && this.renderDayNames(), this.render(), this._bindEvents(), this._bindDatepickerEvents();
        }
        _bindEvents() {
          let { range: e2, dynamicRange: t2 } = this.opts;
          D(this.$el, "mouseover", this.onMouseOverCell), D(this.$el, "mouseout", this.onMouseOutCell), D(this.$el, "click", this.onClickBody), e2 && t2 && (D(this.$el, "mousedown", this.onMouseDown), D(this.$el, "mousemove", this.onMouseMove), D(window.document, "mouseup", this.onMouseUp));
        }
        _bindDatepickerEvents() {
          this.dp.on(i.eventChangeViewDate, this.onChangeViewDate), this.dp.on(i.eventChangeCurrentView, this.onChangeCurrentView);
        }
        _buildBaseHtml() {
          this.$el = n({ className: `air-datepicker-body -${this.type}-`, innerHtml: M2[this.type] }), this.$names = a(".air-datepicker-body--day-names", this.$el), this.$cells = a(".air-datepicker-body--cells", this.$el);
        }
        _getDayNamesHtml() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.dp.locale.firstDay, t2 = "", s2 = this.dp.isWeekend, { onClickDayName: a2 } = this.opts, n2 = e2, r2 = 0;
          for (; r2 < 7; ) {
            let e3 = n2 % 7;
            t2 += `<div class="${u("air-datepicker-body--day-name", { [i.cssClassWeekend]: s2(e3), "-clickable-": !!a2 })}" data-day-index='${e3}'>${this.dp.locale.daysMin[e3]}</div>`, r2++, n2++;
          }
          return t2;
        }
        renderDayNames() {
          this.$names.innerHTML = this._getDayNamesHtml();
        }
        _generateCell(e2) {
          let { type: t2, dp: i2, opts: s2 } = this;
          return new C2({ type: t2, dp: i2, opts: s2, date: e2, body: this });
        }
        _generateCells() {
          T2.getDatesFunction(this.type)(this.dp, (e2) => {
            this.cells.push(this._generateCell(e2));
          });
        }
        show() {
          this.isVisible = true, this.$el.classList.remove("-hidden-");
        }
        hide() {
          this.isVisible = false, this.$el.classList.add("-hidden-");
        }
        destroyCells() {
          this.cells.forEach((e2) => e2.destroy()), this.cells = [], this.$cells.innerHTML = "";
        }
        destroy() {
          this.destroyCells(), this.dp.off(i.eventChangeViewDate, this.onChangeViewDate), this.dp.off(i.eventChangeCurrentView, this.onChangeCurrentView);
        }
        static getDaysDates(e2, t2) {
          let { viewDate: i2, opts: { fixedHeight: s2 }, locale: { firstDay: a2 } } = e2, n2 = o(i2), { year: r2, month: l2 } = h2(i2), d2 = new Date(r2, l2, 1), c2 = new Date(r2, l2, n2), u2 = d2.getDay() - a2, p3 = 6 - c2.getDay() + a2;
          u2 = u2 < 0 ? u2 + 7 : u2, p3 = p3 > 6 ? p3 - 7 : p3;
          let m3 = function(e3, t3) {
            let { year: i3, month: s3, date: a3 } = h2(e3);
            return new Date(i3, s3, a3 - t3);
          }(d2, u2), v2 = n2 + u2 + p3, g2 = m3.getDate(), { year: D2, month: y2 } = h2(m3), f3 = 0;
          s2 && (v2 = 42);
          const w2 = [];
          for (; f3 < v2; ) {
            let e3 = new Date(D2, y2, g2 + f3);
            t2 && t2(e3), w2.push(e3), f3++;
          }
          return w2;
        }
        static getMonthsDates(e2, t2) {
          let { year: i2 } = e2.parsedViewDate, s2 = 0, a2 = [];
          for (; s2 < 12; ) {
            const e3 = new Date(i2, s2);
            a2.push(e3), t2 && t2(e3), s2++;
          }
          return a2;
        }
        static getYearsDates(e2, t2) {
          let i2 = c(e2.viewDate), s2 = i2[0] - 1, a2 = i2[1] + 1, n2 = s2, r2 = [];
          for (; n2 <= a2; ) {
            const e3 = new Date(n2, 0);
            r2.push(e3), t2 && t2(e3), n2++;
          }
          return r2;
        }
        static getDatesFunction() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : i.days;
          return { [i.days]: T2.getDaysDates, [i.months]: T2.getMonthsDates, [i.years]: T2.getYearsDates }[e2];
        }
      }
      function F(e2, t2, i2) {
        return (t2 = function(e3) {
          var t3 = function(e4, t4) {
            if ("object" != typeof e4 || null === e4) return e4;
            var i3 = e4[Symbol.toPrimitive];
            if (void 0 !== i3) {
              var s2 = i3.call(e4, "string");
              if ("object" != typeof s2) return s2;
              throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return String(e4);
          }(e3);
          return "symbol" == typeof t3 ? t3 : String(t3);
        }(t2)) in e2 ? Object.defineProperty(e2, t2, { value: i2, enumerable: true, configurable: true, writable: true }) : e2[t2] = i2, e2;
      }
      class V2 {
        constructor(e2) {
          let { dp: t2, opts: i2 } = e2;
          F(this, "onClickNav", (e3) => {
            let t3 = y(e3.target, ".air-datepicker-nav--action");
            if (!t3) return;
            let i3 = t3.dataset.action;
            this.dp[i3]();
          }), F(this, "onChangeViewDate", () => {
            this.render(), this._resetNavStatus(), this.handleNavStatus();
          }), F(this, "onChangeCurrentView", () => {
            this.render(), this._resetNavStatus(), this.handleNavStatus();
          }), F(this, "onClickNavTitle", () => {
            this.dp.isFinalView || this.dp.up();
          }), F(this, "update", () => {
            let { prevHtml: e3, nextHtml: t3 } = this.opts;
            this.$prev.innerHTML = e3, this.$next.innerHTML = t3, this._resetNavStatus(), this.render(), this.handleNavStatus();
          }), F(this, "renderDelay", () => {
            setTimeout(this.render);
          }), F(this, "render", () => {
            this.$title.innerHTML = this._getTitle(), function(e3, t3) {
              for (let i3 in t3) t3[i3] ? e3.classList.add(i3) : e3.classList.remove(i3);
            }(this.$title, { "-disabled-": this.dp.isFinalView });
          }), this.dp = t2, this.opts = i2, this.init();
        }
        init() {
          this._createElement(), this._buildBaseHtml(), this._defineDOM(), this.render(), this.handleNavStatus(), this._bindEvents(), this._bindDatepickerEvents();
        }
        _defineDOM() {
          this.$title = a(".air-datepicker-nav--title", this.$el), this.$prev = a('[data-action="prev"]', this.$el), this.$next = a('[data-action="next"]', this.$el);
        }
        _bindEvents() {
          this.$el.addEventListener("click", this.onClickNav), this.$title.addEventListener("click", this.onClickNavTitle);
        }
        _bindDatepickerEvents() {
          this.dp.on(i.eventChangeViewDate, this.onChangeViewDate), this.dp.on(i.eventChangeCurrentView, this.onChangeCurrentView), this.isNavIsFunction && (this.dp.on(i.eventChangeSelectedDate, this.renderDelay), this.dp.opts.timepicker && this.dp.on(i.eventChangeTime, this.render));
        }
        destroy() {
          this.dp.off(i.eventChangeViewDate, this.onChangeViewDate), this.dp.off(i.eventChangeCurrentView, this.onChangeCurrentView), this.isNavIsFunction && (this.dp.off(i.eventChangeSelectedDate, this.renderDelay), this.dp.opts.timepicker && this.dp.off(i.eventChangeTime, this.render));
        }
        _createElement() {
          this.$el = n({ tagName: "nav", className: "air-datepicker-nav" });
        }
        _getTitle() {
          let { dp: e2, opts: t2 } = this, i2 = t2.navTitles[e2.currentView];
          return "function" == typeof i2 ? i2(e2) : e2.formatDate(e2.viewDate, i2);
        }
        handleNavStatus() {
          let { disableNavWhenOutOfRange: e2 } = this.opts, { minDate: t2, maxDate: s2 } = this.dp;
          if (!t2 && !s2 || !e2) return;
          let { year: a2, month: n2 } = this.dp.parsedViewDate, r2 = !!t2 && h2(t2), o2 = !!s2 && h2(s2);
          switch (this.dp.currentView) {
            case i.days:
              t2 && r2.month >= n2 && r2.year >= a2 && this._disableNav("prev"), s2 && o2.month <= n2 && o2.year <= a2 && this._disableNav("next");
              break;
            case i.months:
              t2 && r2.year >= a2 && this._disableNav("prev"), s2 && o2.year <= a2 && this._disableNav("next");
              break;
            case i.years: {
              let e3 = c(this.dp.viewDate);
              t2 && r2.year >= e3[0] && this._disableNav("prev"), s2 && o2.year <= e3[1] && this._disableNav("next");
              break;
            }
          }
        }
        _disableNav(e2) {
          a('[data-action="' + e2 + '"]', this.$el).classList.add("-disabled-");
        }
        _resetNavStatus() {
          !function(e2) {
            for (var t2 = arguments.length, i2 = new Array(t2 > 1 ? t2 - 1 : 0), s2 = 1; s2 < t2; s2++) i2[s2 - 1] = arguments[s2];
            e2.length ? e2.forEach((e3) => {
              e3.classList.remove(...i2);
            }) : e2.classList.remove(...i2);
          }(this.$el.querySelectorAll(".air-datepicker-nav--action"), "-disabled-");
        }
        _buildBaseHtml() {
          let { prevHtml: e2, nextHtml: t2 } = this.opts;
          this.$el.innerHTML = `<div class="air-datepicker-nav--action" data-action="prev">${e2}</div><div class="air-datepicker-nav--title"></div><div class="air-datepicker-nav--action" data-action="next">${t2}</div>`;
        }
        get isNavIsFunction() {
          let { navTitles: e2 } = this.opts;
          return Object.keys(e2).find((t2) => "function" == typeof e2[t2]);
        }
      }
      var x2 = { today: { content: (e2) => e2.locale.today, onClick: (e2) => e2.setViewDate(/* @__PURE__ */ new Date()) }, clear: { content: (e2) => e2.locale.clear, onClick: (e2) => e2.clear() } };
      class H2 {
        constructor(e2) {
          let { dp: t2, opts: i2 } = e2;
          this.dp = t2, this.opts = i2, this.init();
        }
        init() {
          this.createElement(), this.render();
        }
        createElement() {
          this.$el = n({ className: "air-datepicker-buttons" });
        }
        destroy() {
          this.$el.parentNode.removeChild(this.$el);
        }
        clearHtml() {
          return this.$el.innerHTML = "", this;
        }
        generateButtons() {
          let { buttons: e2 } = this.opts;
          Array.isArray(e2) || (e2 = [e2]), e2.forEach((e3) => {
            let t2 = e3;
            "string" == typeof e3 && x2[e3] && (t2 = x2[e3]);
            let i2 = this.createButton(t2);
            t2.onClick && this.attachEventToButton(i2, t2.onClick), this.$el.appendChild(i2);
          });
        }
        attachEventToButton(e2, t2) {
          e2.addEventListener("click", () => {
            t2(this.dp);
          });
        }
        createButton(e2) {
          let { content: t2, className: i2, tagName: s2 = "button", attrs: a2 = {} } = e2;
          return n({ tagName: s2, innerHtml: `<span tabindex='-1'>${"function" == typeof t2 ? t2(this.dp) : t2}</span>`, className: u("air-datepicker-button", i2), attrs: a2 });
        }
        render() {
          this.generateButtons();
        }
      }
      function E2(e2, t2, i2) {
        return (t2 = function(e3) {
          var t3 = function(e4, t4) {
            if ("object" != typeof e4 || null === e4) return e4;
            var i3 = e4[Symbol.toPrimitive];
            if (void 0 !== i3) {
              var s2 = i3.call(e4, "string");
              if ("object" != typeof s2) return s2;
              throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return String(e4);
          }(e3);
          return "symbol" == typeof t3 ? t3 : String(t3);
        }(t2)) in e2 ? Object.defineProperty(e2, t2, { value: i2, enumerable: true, configurable: true, writable: true }) : e2[t2] = i2, e2;
      }
      class L {
        constructor() {
          let { opts: e2, dp: t2 } = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
          E2(this, "toggleTimepickerIsActive", (e3) => {
            this.dp.timepickerIsActive = e3;
          }), E2(this, "onChangeSelectedDate", (e3) => {
            let { date: t3, updateTime: i2 = false } = e3;
            t3 && (this.setMinMaxTime(t3), this.setCurrentTime(!!i2 && t3), this.addTimeToDate(t3));
          }), E2(this, "onChangeLastSelectedDate", (e3) => {
            e3 && (this.setTime(e3), this.render());
          }), E2(this, "onChangeInputRange", (e3) => {
            let t3 = e3.target;
            this[t3.getAttribute("name")] = t3.value, this.updateText(), this.dp.trigger(i.eventChangeTime, { hours: this.hours, minutes: this.minutes });
          }), E2(this, "onMouseEnterLeave", (e3) => {
            let t3 = e3.target.getAttribute("name"), i2 = this.$minutesText;
            "hours" === t3 && (i2 = this.$hoursText), i2.classList.toggle("-focus-");
          }), E2(this, "onFocus", () => {
            this.toggleTimepickerIsActive(true);
          }), E2(this, "onBlur", () => {
            this.toggleTimepickerIsActive(false);
          }), this.opts = e2, this.dp = t2;
          let { timeFormat: s2 } = this.dp.locale;
          s2 && (s2.match(k("h")) || s2.match(k("hh"))) && (this.ampm = true), this.init();
        }
        init() {
          this.setTime(this.dp.lastSelectedDate || this.dp.viewDate), this.createElement(), this.buildHtml(), this.defineDOM(), this.render(), this.bindDatepickerEvents(), this.bindDOMEvents();
        }
        bindDatepickerEvents() {
          this.dp.on(i.eventChangeSelectedDate, this.onChangeSelectedDate), this.dp.on(i.eventChangeLastSelectedDate, this.onChangeLastSelectedDate);
        }
        bindDOMEvents() {
          let e2 = "input";
          navigator.userAgent.match(/trident/gi) && (e2 = "change"), D(this.$ranges, e2, this.onChangeInputRange), D(this.$ranges, "mouseenter", this.onMouseEnterLeave), D(this.$ranges, "mouseleave", this.onMouseEnterLeave), D(this.$ranges, "focus", this.onFocus), D(this.$ranges, "mousedown", this.onFocus), D(this.$ranges, "blur", this.onBlur);
        }
        createElement() {
          this.$el = n({ className: u("air-datepicker-time", { "-am-pm-": this.dp.ampm }) });
        }
        destroy() {
          this.dp.off(i.eventChangeSelectedDate, this.onChangeSelectedDate), this.dp.off(i.eventChangeLastSelectedDate, this.onChangeLastSelectedDate), this.$el.parentNode.removeChild(this.$el);
        }
        buildHtml() {
          let { ampm: e2, hours: t2, displayHours: i2, minutes: s2, minHours: a2, minMinutes: n2, maxHours: r2, maxMinutes: o2, dayPeriod: h3, opts: { hoursStep: l2, minutesStep: c2 } } = this;
          this.$el.innerHTML = `<div class="air-datepicker-time--current">   <span class="air-datepicker-time--current-hours">${d(i2)}</span>   <span class="air-datepicker-time--current-colon">:</span>   <span class="air-datepicker-time--current-minutes">${d(s2)}</span>   ` + (e2 ? `<span class='air-datepicker-time--current-ampm'>${h3}</span>` : "") + `</div><div class="air-datepicker-time--sliders">   <div class="air-datepicker-time--row">      <input type="range" name="hours" value="${t2}" min="${a2}" max="${r2}" step="${l2}"/>   </div>   <div class="air-datepicker-time--row">      <input type="range" name="minutes" value="${s2}" min="${n2}" max="${o2}" step="${c2}"/>   </div></div>`;
        }
        defineDOM() {
          let e2 = (e3) => a(e3, this.$el);
          this.$ranges = this.$el.querySelectorAll('[type="range"]'), this.$hours = e2('[name="hours"]'), this.$minutes = e2('[name="minutes"]'), this.$hoursText = e2(".air-datepicker-time--current-hours"), this.$minutesText = e2(".air-datepicker-time--current-minutes"), this.$ampm = e2(".air-datepicker-time--current-ampm");
        }
        setTime(e2) {
          this.setMinMaxTime(e2), this.setCurrentTime(e2);
        }
        addTimeToDate(e2) {
          e2 && (e2.setHours(this.hours), e2.setMinutes(this.minutes));
        }
        setMinMaxTime(e2) {
          if (this.setMinMaxTimeFromOptions(), e2) {
            let { minDate: t2, maxDate: i2 } = this.dp;
            t2 && p2(e2, t2) && this.setMinTimeFromMinDate(t2), i2 && p2(e2, i2) && this.setMaxTimeFromMaxDate(i2);
          }
        }
        setCurrentTime(e2) {
          let { hours: t2, minutes: i2 } = e2 ? h2(e2) : this;
          this.hours = f2(t2, this.minHours, this.maxHours), this.minutes = f2(i2, this.minMinutes, this.maxMinutes);
        }
        setMinMaxTimeFromOptions() {
          let { minHours: e2, minMinutes: t2, maxHours: i2, maxMinutes: s2 } = this.opts;
          this.minHours = f2(e2, 0, 23), this.minMinutes = f2(t2, 0, 59), this.maxHours = f2(i2, 0, 23), this.maxMinutes = f2(s2, 0, 59);
        }
        setMinTimeFromMinDate(e2) {
          let { lastSelectedDate: t2 } = this.dp;
          this.minHours = e2.getHours(), t2 && t2.getHours() > e2.getHours() ? this.minMinutes = this.opts.minMinutes : this.minMinutes = e2.getMinutes();
        }
        setMaxTimeFromMaxDate(e2) {
          let { lastSelectedDate: t2 } = this.dp;
          this.maxHours = e2.getHours(), t2 && t2.getHours() < e2.getHours() ? this.maxMinutes = this.opts.maxMinutes : this.maxMinutes = e2.getMinutes();
        }
        updateSliders() {
          r(this.$hours, { min: this.minHours, max: this.maxHours }).value = this.hours, r(this.$minutes, { min: this.minMinutes, max: this.maxMinutes }).value = this.minutes;
        }
        updateText() {
          this.$hoursText.innerHTML = d(this.displayHours), this.$minutesText.innerHTML = d(this.minutes), this.ampm && (this.$ampm.innerHTML = this.dayPeriod);
        }
        set hours(e2) {
          this._hours = e2;
          let { hours: t2, dayPeriod: i2 } = l(e2);
          this.displayHours = this.ampm ? t2 : e2, this.dayPeriod = i2;
        }
        get hours() {
          return this._hours;
        }
        render() {
          this.updateSliders(), this.updateText();
        }
      }
      function O(e2, t2, i2) {
        return (t2 = function(e3) {
          var t3 = function(e4, t4) {
            if ("object" != typeof e4 || null === e4) return e4;
            var i3 = e4[Symbol.toPrimitive];
            if (void 0 !== i3) {
              var s2 = i3.call(e4, "string");
              if ("object" != typeof s2) return s2;
              throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return String(e4);
          }(e3);
          return "symbol" == typeof t3 ? t3 : String(t3);
        }(t2)) in e2 ? Object.defineProperty(e2, t2, { value: i2, enumerable: true, configurable: true, writable: true }) : e2[t2] = i2, e2;
      }
      class A {
        constructor(e2) {
          let { dp: t2, opts: i2 } = e2;
          O(this, "pressedKeys", /* @__PURE__ */ new Set()), O(this, "hotKeys", /* @__PURE__ */ new Map([[[["Control", "ArrowRight"], ["Control", "ArrowUp"]], (e3) => e3.month++], [[["Control", "ArrowLeft"], ["Control", "ArrowDown"]], (e3) => e3.month--], [[["Shift", "ArrowRight"], ["Shift", "ArrowUp"]], (e3) => e3.year++], [[["Shift", "ArrowLeft"], ["Shift", "ArrowDown"]], (e3) => e3.year--], [[["Alt", "ArrowRight"], ["Alt", "ArrowUp"]], (e3) => e3.year += 10], [[["Alt", "ArrowLeft"], ["Alt", "ArrowDown"]], (e3) => e3.year -= 10], [["Control", "Shift", "ArrowUp"], (e3, t3) => t3.up()]])), O(this, "handleHotKey", (e3) => {
            let t3 = this.hotKeys.get(e3), i3 = h2(this.getInitialFocusDate());
            t3(i3, this.dp);
            let { year: s2, month: a2, date: n2 } = i3, r2 = o(new Date(s2, a2));
            r2 < n2 && (n2 = r2);
            let l2 = this.dp.getClampedDate(new Date(s2, a2, n2));
            this.dp.setFocusDate(l2, { viewDateTransition: true });
          }), O(this, "isHotKeyPressed", () => {
            let e3 = false, t3 = this.pressedKeys.size, i3 = (e4) => this.pressedKeys.has(e4);
            for (let [s2] of this.hotKeys) {
              if (e3) break;
              if (Array.isArray(s2[0])) s2.forEach((a2) => {
                e3 || t3 !== a2.length || (e3 = a2.every(i3) && s2);
              });
              else {
                if (t3 !== s2.length) continue;
                e3 = s2.every(i3) && s2;
              }
            }
            return e3;
          }), O(this, "isArrow", (e3) => e3 >= 37 && e3 <= 40), O(this, "onKeyDown", (e3) => {
            let { key: t3, which: i3 } = e3, { dp: s2, dp: { focusDate: a2 }, opts: n2 } = this;
            this.registerKey(t3);
            let r2 = this.isHotKeyPressed();
            if (r2) return e3.preventDefault(), void this.handleHotKey(r2);
            if (this.isArrow(i3)) return e3.preventDefault(), void this.focusNextCell(t3);
            if ("Enter" === t3) {
              if (s2.currentView !== n2.minView) return void s2.down();
              if (a2) {
                let e4 = s2._checkIfDateIsSelected(a2);
                return void (e4 ? s2._handleAlreadySelectedDates(e4, a2) : s2.selectDate(a2));
              }
            }
            "Escape" === t3 && this.dp.hide();
          }), O(this, "onKeyUp", (e3) => {
            this.removeKey(e3.key);
          }), this.dp = t2, this.opts = i2, this.init();
        }
        init() {
          this.bindKeyboardEvents();
        }
        bindKeyboardEvents() {
          let { $el: e2 } = this.dp;
          e2.addEventListener("keydown", this.onKeyDown), e2.addEventListener("keyup", this.onKeyUp);
        }
        destroy() {
          let { $el: e2 } = this.dp;
          e2.removeEventListener("keydown", this.onKeyDown), e2.removeEventListener("keyup", this.onKeyUp), this.hotKeys = null, this.pressedKeys = null;
        }
        getInitialFocusDate() {
          let { focusDate: e2, currentView: t2, selectedDates: s2, parsedViewDate: { year: a2, month: n2 } } = this.dp, r2 = e2 || s2[s2.length - 1];
          if (!r2) switch (t2) {
            case i.days:
              r2 = new Date(a2, n2, (/* @__PURE__ */ new Date()).getDate());
              break;
            case i.months:
              r2 = new Date(a2, n2, 1);
              break;
            case i.years:
              r2 = new Date(a2, 0, 1);
          }
          return r2;
        }
        focusNextCell(e2) {
          let t2 = this.getInitialFocusDate(), { currentView: s2 } = this.dp, { days: a2, months: n2, years: r2 } = i, o2 = h2(t2), l2 = o2.year, d2 = o2.month, c2 = o2.date;
          switch (e2) {
            case "ArrowLeft":
              s2 === a2 && (c2 -= 1), s2 === n2 && (d2 -= 1), s2 === r2 && (l2 -= 1);
              break;
            case "ArrowUp":
              s2 === a2 && (c2 -= 7), s2 === n2 && (d2 -= 3), s2 === r2 && (l2 -= 4);
              break;
            case "ArrowRight":
              s2 === a2 && (c2 += 1), s2 === n2 && (d2 += 1), s2 === r2 && (l2 += 1);
              break;
            case "ArrowDown":
              s2 === a2 && (c2 += 7), s2 === n2 && (d2 += 3), s2 === r2 && (l2 += 4);
          }
          let u2 = this.dp.getClampedDate(new Date(l2, d2, c2));
          this.dp.setFocusDate(u2, { viewDateTransition: true });
        }
        registerKey(e2) {
          this.pressedKeys.add(e2);
        }
        removeKey(e2) {
          this.pressedKeys.delete(e2);
        }
      }
      let N2 = { on(e2, t2) {
        this.__events || (this.__events = {}), this.__events[e2] ? this.__events[e2].push(t2) : this.__events[e2] = [t2];
      }, off(e2, t2) {
        this.__events && this.__events[e2] && (this.__events[e2] = this.__events[e2].filter((e3) => e3 !== t2));
      }, removeAllEvents() {
        this.__events = {};
      }, trigger(e2) {
        for (var t2 = arguments.length, i2 = new Array(t2 > 1 ? t2 - 1 : 0), s2 = 1; s2 < t2; s2++) i2[s2 - 1] = arguments[s2];
        this.__events && this.__events[e2] && this.__events[e2].forEach((e3) => {
          e3(...i2);
        });
      } };
      function I2(e2, t2, i2) {
        return (t2 = function(e3) {
          var t3 = function(e4, t4) {
            if ("object" != typeof e4 || null === e4) return e4;
            var i3 = e4[Symbol.toPrimitive];
            if (void 0 !== i3) {
              var s2 = i3.call(e4, "string");
              if ("object" != typeof s2) return s2;
              throw new TypeError("@@toPrimitive must return a primitive value.");
            }
            return String(e4);
          }(e3);
          return "symbol" == typeof t3 ? t3 : String(t3);
        }(t2)) in e2 ? Object.defineProperty(e2, t2, { value: i2, enumerable: true, configurable: true, writable: true }) : e2[t2] = i2, e2;
      }
      let P = "", j = "", B = false;
      class R {
        static buildGlobalContainer(e2) {
          B = true, P = n({ className: e2, id: e2 }), a("body").appendChild(P);
        }
        constructor(e2, t2) {
          var r2 = this;
          if (I2(this, "viewIndexes", [i.days, i.months, i.years]), I2(this, "next", () => {
            let { year: e3, month: t3 } = this.parsedViewDate;
            switch (this.currentView) {
              case i.days:
                this.setViewDate(new Date(e3, t3 + 1, 1));
                break;
              case i.months:
                this.setViewDate(new Date(e3 + 1, t3, 1));
                break;
              case i.years:
                this.setViewDate(new Date(e3 + 10, 0, 1));
            }
          }), I2(this, "prev", () => {
            let { year: e3, month: t3 } = this.parsedViewDate;
            switch (this.currentView) {
              case i.days:
                this.setViewDate(new Date(e3, t3 - 1, 1));
                break;
              case i.months:
                this.setViewDate(new Date(e3 - 1, t3, 1));
                break;
              case i.years:
                this.setViewDate(new Date(e3 - 10, 0, 1));
            }
          }), I2(this, "_finishHide", () => {
            this.hideAnimation = false, this._destroyComponents(), this.$container.removeChild(this.$datepicker);
          }), I2(this, "setPosition", function(e3) {
            let t3 = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            if ("function" == typeof (e3 = e3 || r2.opts.position)) return void (r2.customHide = e3({ $datepicker: r2.$datepicker, $target: r2.$el, $pointer: r2.$pointer, isViewChange: t3, done: r2._finishHide }));
            let i2, s2, { isMobile: a2 } = r2.opts, n2 = r2.$el.getBoundingClientRect(), o3 = r2.$el.getBoundingClientRect(), h3 = r2.$datepicker.offsetParent, l3 = r2.$el.offsetParent, d2 = r2.$datepicker.getBoundingClientRect(), c2 = e3.split(" "), u2 = window.scrollY, p3 = window.scrollX, m3 = r2.opts.offset, v2 = c2[0], g2 = c2[1];
            if (a2) r2.$datepicker.style.cssText = "left: 50%; top: 50%";
            else {
              if (h3 === l3 && h3 !== document.body && (o3 = { top: r2.$el.offsetTop, left: r2.$el.offsetLeft, width: n2.width, height: r2.$el.offsetHeight }, u2 = 0, p3 = 0), h3 !== l3 && h3 !== document.body) {
                let e4 = h3.getBoundingClientRect();
                o3 = { top: n2.top - e4.top, left: n2.left - e4.left, width: n2.width, height: n2.height }, u2 = 0, p3 = 0;
              }
              switch (v2) {
                case "top":
                  i2 = o3.top - d2.height - m3;
                  break;
                case "right":
                  s2 = o3.left + o3.width + m3;
                  break;
                case "bottom":
                  i2 = o3.top + o3.height + m3;
                  break;
                case "left":
                  s2 = o3.left - d2.width - m3;
              }
              switch (g2) {
                case "top":
                  i2 = o3.top;
                  break;
                case "right":
                  s2 = o3.left + o3.width - d2.width;
                  break;
                case "bottom":
                  i2 = o3.top + o3.height - d2.height;
                  break;
                case "left":
                  s2 = o3.left;
                  break;
                case "center":
                  /left|right/.test(v2) ? i2 = o3.top + o3.height / 2 - d2.height / 2 : s2 = o3.left + o3.width / 2 - d2.width / 2;
              }
              r2.$datepicker.style.cssText = `left: ${s2 + p3}px; top: ${i2 + u2}px`;
            }
          }), I2(this, "_setInputValue", () => {
            let { opts: e3, $altField: t3, locale: { dateFormat: i2 } } = this, { altFieldDateFormat: s2, altField: a2 } = e3;
            a2 && t3 && (t3.value = this._getInputValue(s2)), this.$el.value = this._getInputValue(i2);
          }), I2(this, "_getInputValue", (e3) => {
            let { selectedDates: t3, opts: i2 } = this, { multipleDates: s2, multipleDatesSeparator: a2 } = i2;
            if (!t3.length) return "";
            let n2 = "function" == typeof e3, r3 = n2 ? e3(s2 ? t3 : t3[0]) : t3.map((t4) => this.formatDate(t4, e3));
            return r3 = n2 ? r3 : r3.join(a2), r3;
          }), I2(this, "_checkIfDateIsSelected", function(e3) {
            let t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : i.days, s2 = false;
            return r2.selectedDates.some((i2) => {
              let a2 = p2(e3, i2, t3);
              return s2 = a2 && i2, a2;
            }), s2;
          }), I2(this, "_scheduleCallAfterTransition", (e3) => {
            this._cancelScheduledCall(), e3 && e3(false), this._onTransitionEnd = () => {
              e3 && e3(true);
            }, this.$datepicker.addEventListener("transitionend", this._onTransitionEnd, { once: true });
          }), I2(this, "_cancelScheduledCall", () => {
            this.$datepicker.removeEventListener("transitionend", this._onTransitionEnd);
          }), I2(this, "setViewDate", (e3) => {
            if (!((e3 = b(e3)) instanceof Date)) return;
            if (p2(e3, this.viewDate)) return;
            let t3 = this.viewDate;
            this.viewDate = e3;
            let { onChangeViewDate: s2 } = this.opts;
            if (s2) {
              let { month: e4, year: t4 } = this.parsedViewDate;
              s2({ month: e4, year: t4, decade: this.curDecade });
            }
            this.trigger(i.eventChangeViewDate, e3, t3);
          }), I2(this, "setFocusDate", function(e3) {
            let t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            (!e3 || (e3 = b(e3)) instanceof Date) && (r2.focusDate = e3, r2.trigger(i.eventChangeFocusDate, e3, t3));
          }), I2(this, "setCurrentView", function(e3) {
            let t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            if (r2.viewIndexes.includes(e3)) {
              if (r2.currentView = e3, r2.elIsInput && r2.visible && r2.setPosition(void 0, true), r2.trigger(i.eventChangeCurrentView, e3), !r2.views[e3]) {
                let t4 = r2.views[e3] = new T2({ dp: r2, opts: r2.opts, type: e3 });
                r2.shouldUpdateDOM && r2.$content.appendChild(t4.$el);
              }
              r2.opts.onChangeView && !t3.silent && r2.opts.onChangeView(e3);
            }
          }), I2(this, "_updateLastSelectedDate", (e3) => {
            this.lastSelectedDate = e3, this.trigger(i.eventChangeLastSelectedDate, e3);
          }), I2(this, "destroy", () => {
            if (this.isDestroyed) return;
            let { showEvent: e3, isMobile: t3 } = this.opts, i2 = this.$datepicker.parentNode;
            i2 && i2.removeChild(this.$datepicker), this.$el.removeEventListener(e3, this._onFocus), this.$el.removeEventListener("blur", this._onBlur), window.removeEventListener("resize", this._onResize), t3 && this._removeMobileAttributes(), this.keyboardNav && this.keyboardNav.destroy(), this.views = null, this.nav = null, this.$datepicker = null, this.opts = {}, this.$customContainer = null, this.viewDate = null, this.focusDate = null, this.selectedDates = [], this.rangeDateFrom = null, this.rangeDateTo = null, this.isDestroyed = true;
          }), I2(this, "update", function() {
            let e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, t3 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, s2 = w({}, r2.opts), { silent: a2 } = t3;
            w(r2.opts, e3);
            let { timepicker: n2, buttons: o3, range: h3, selectedDates: l3, isMobile: d2 } = r2.opts, c2 = r2.visible || r2.treatAsInline;
            r2._createMinMaxDates(), r2._limitViewDateByMaxMinDates(), r2._handleLocale(), l3 && (r2.selectedDates = [], r2.selectDate(l3, { silent: a2 })), e3.view && r2.setCurrentView(e3.view, { silent: a2 }), r2._setInputValue(), s2.range && !h3 ? (r2.rangeDateTo = false, r2.rangeDateFrom = false) : !s2.range && h3 && r2.selectedDates.length && (r2.rangeDateFrom = r2.selectedDates[0], r2.rangeDateTo = r2.selectedDates[1]), s2.timepicker && !n2 ? (c2 && r2.timepicker.destroy(), r2.timepicker = false, r2.$timepicker.parentNode.removeChild(r2.$timepicker)) : !s2.timepicker && n2 && r2._addTimepicker(), !s2.buttons && o3 ? r2._addButtons() : s2.buttons && !o3 ? (r2.buttons.destroy(), r2.$buttons.parentNode.removeChild(r2.$buttons)) : c2 && s2.buttons && o3 && r2.buttons.clearHtml().render(), !s2.isMobile && d2 ? (r2.treatAsInline || j || r2._createMobileOverlay(), r2._addMobileAttributes(), r2.visible && r2._showMobileOverlay()) : s2.isMobile && !d2 && (r2._removeMobileAttributes(), r2.visible && (j.classList.remove("-active-"), "function" != typeof r2.opts.position && r2.setPosition())), c2 && (r2.nav.update(), r2.views[r2.currentView].render(), r2.currentView === i.days && r2.views[r2.currentView].renderDayNames());
          }), I2(this, "disableDate", (e3, t3) => {
            (Array.isArray(e3) ? e3 : [e3]).forEach((e4) => {
              let i2 = b(e4);
              if (!i2) return;
              let s2 = t3 ? "delete" : "add";
              this.disabledDates[s2](this.formatDate(i2, "yyyy-MM-dd"));
              let a2 = this.getCell(i2, this.currentViewSingular);
              a2 && a2.adpCell.render();
            }, []);
          }), I2(this, "enableDate", (e3) => {
            this.disableDate(e3, true);
          }), I2(this, "isDateDisabled", (e3) => {
            let t3 = b(e3);
            return this.disabledDates.has(this.formatDate(t3, "yyyy-MM-dd"));
          }), I2(this, "isOtherMonth", (e3) => {
            let { month: t3 } = h2(e3);
            return t3 !== this.parsedViewDate.month;
          }), I2(this, "isOtherYear", (e3) => {
            let { year: t3 } = h2(e3);
            return t3 !== this.parsedViewDate.year;
          }), I2(this, "isOtherDecade", (e3) => {
            let { year: t3 } = h2(e3), [i2, s2] = c(this.viewDate);
            return t3 < i2 || t3 > s2;
          }), I2(this, "_onChangeSelectedDate", (e3) => {
            let { silent: t3 } = e3;
            setTimeout(() => {
              this._setInputValue(), this.opts.onSelect && !t3 && this._triggerOnSelect();
            });
          }), I2(this, "_onChangeFocusedDate", function(e3) {
            let { viewDateTransition: t3 } = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            if (!e3) return;
            let i2 = false;
            t3 && (i2 = r2.isOtherMonth(e3) || r2.isOtherYear(e3) || r2.isOtherDecade(e3)), i2 && r2.setViewDate(e3), r2.opts.onFocus && r2.opts.onFocus({ datepicker: r2, date: e3 });
          }), I2(this, "_onChangeTime", (e3) => {
            let { hours: t3, minutes: i2 } = e3, s2 = /* @__PURE__ */ new Date(), { lastSelectedDate: a2, opts: { onSelect: n2 } } = this, r3 = a2;
            a2 || (r3 = s2);
            let o3 = this.getCell(r3, this.currentViewSingular), h3 = o3 && o3.adpCell;
            h3 && h3.isDisabled || (r3.setHours(t3), r3.setMinutes(i2), a2 ? (this._setInputValue(), n2 && this._triggerOnSelect()) : this.selectDate(r3));
          }), I2(this, "_onFocus", (e3) => {
            this.visible || this.show();
          }), I2(this, "_onBlur", (e3) => {
            this.inFocus || !this.visible || this.opts.isMobile || this.hide();
          }), I2(this, "_onMouseDown", (e3) => {
            this.inFocus = true;
          }), I2(this, "_onMouseUp", (e3) => {
            this.inFocus = false, this.$el.focus();
          }), I2(this, "_onResize", () => {
            this.visible && "function" != typeof this.opts.position && this.setPosition();
          }), I2(this, "_onClickOverlay", () => {
            this.visible && this.hide();
          }), I2(this, "getViewDates", function() {
            let e3 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : i.days;
            return T2.getDatesFunction(e3)(r2);
          }), I2(this, "isWeekend", (e3) => this.opts.weekends.includes(e3)), I2(this, "getClampedDate", (e3) => {
            let { minDate: t3, maxDate: i2 } = this, s2 = e3;
            return i2 && m2(e3, i2) ? s2 = i2 : t3 && v(e3, t3) && (s2 = t3), s2;
          }), this.$el = a(e2), !this.$el) return;
          this.$datepicker = n({ className: "air-datepicker" }), this.opts = w({}, s, t2), this.$customContainer = !!this.opts.container && a(this.opts.container), this.$altField = a(this.opts.altField || false);
          let { view: o2, startDate: l2 } = this.opts;
          l2 || (this.opts.startDate = /* @__PURE__ */ new Date()), "INPUT" === this.$el.nodeName && (this.elIsInput = true), this.inited = false, this.visible = false, this.viewDate = b(this.opts.startDate), this.focusDate = false, this.initialReadonly = this.$el.getAttribute("readonly"), this.customHide = false, this.currentView = o2, this.selectedDates = [], this.disabledDates = /* @__PURE__ */ new Set(), this.isDestroyed = false, this.views = {}, this.keys = [], this.rangeDateFrom = "", this.rangeDateTo = "", this.timepickerIsActive = false, this.treatAsInline = this.opts.inline || !this.elIsInput, this.init();
        }
        init() {
          let { opts: e2, treatAsInline: t2, opts: { inline: i2, isMobile: s2, selectedDates: n2, keyboardNav: r2, onlyTimepicker: o2 } } = this, h3 = a("body");
          (!B || B && P && !h3.contains(P)) && !i2 && this.elIsInput && !this.$customContainer && R.buildGlobalContainer(R.defaultGlobalContainerId), !s2 || j || t2 || this._createMobileOverlay(), this._handleLocale(), this._bindSubEvents(), this._createMinMaxDates(), this._limitViewDateByMaxMinDates(), this.elIsInput && (i2 || this._bindEvents(), r2 && !o2 && (this.keyboardNav = new A({ dp: this, opts: e2 }))), n2 && this.selectDate(n2, { silent: true }), this.opts.visible && !t2 && this.show(), s2 && !t2 && this.$el.setAttribute("readonly", true), t2 && this._createComponents();
        }
        _createMobileOverlay() {
          j = n({ className: "air-datepicker-overlay" }), P.appendChild(j);
        }
        _createComponents() {
          let { opts: e2, treatAsInline: t2, opts: { inline: i2, buttons: s2, timepicker: a2, position: n2, classes: r2, onlyTimepicker: o2, isMobile: h3 } } = this;
          this._buildBaseHtml(), this.elIsInput && (i2 || this._setPositionClasses(n2)), !i2 && this.elIsInput || this.$datepicker.classList.add("-inline-"), r2 && this.$datepicker.classList.add(...r2.split(" ")), o2 && this.$datepicker.classList.add("-only-timepicker-"), h3 && !t2 && this._addMobileAttributes(), this.views[this.currentView] = new T2({ dp: this, type: this.currentView, opts: e2 }), this.nav = new V2({ dp: this, opts: e2 }), a2 && this._addTimepicker(), s2 && this._addButtons(), this.$content.appendChild(this.views[this.currentView].$el), this.$nav.appendChild(this.nav.$el);
        }
        _destroyComponents() {
          for (let e2 in this.views) this.views[e2].destroy();
          this.views = {}, this.nav.destroy(), this.timepicker && this.timepicker.destroy();
        }
        _addMobileAttributes() {
          j.addEventListener("click", this._onClickOverlay), this.$datepicker.classList.add("-is-mobile-"), this.$el.setAttribute("readonly", true);
        }
        _removeMobileAttributes() {
          j.removeEventListener("click", this._onClickOverlay), this.$datepicker.classList.remove("-is-mobile-"), this.initialReadonly || "" === this.initialReadonly || this.$el.removeAttribute("readonly");
        }
        _createMinMaxDates() {
          let { minDate: e2, maxDate: t2 } = this.opts;
          this.minDate = !!e2 && b(e2), this.maxDate = !!t2 && b(t2);
        }
        _addTimepicker() {
          this.$timepicker = n({ className: "air-datepicker--time" }), this.$datepicker.appendChild(this.$timepicker), this.timepicker = new L({ dp: this, opts: this.opts }), this.$timepicker.appendChild(this.timepicker.$el);
        }
        _addButtons() {
          this.$buttons = n({ className: "air-datepicker--buttons" }), this.$datepicker.appendChild(this.$buttons), this.buttons = new H2({ dp: this, opts: this.opts }), this.$buttons.appendChild(this.buttons.$el);
        }
        _bindSubEvents() {
          this.on(i.eventChangeSelectedDate, this._onChangeSelectedDate), this.on(i.eventChangeFocusDate, this._onChangeFocusedDate), this.on(i.eventChangeTime, this._onChangeTime);
        }
        _buildBaseHtml() {
          let { inline: e2 } = this.opts;
          var t2, i2;
          this.elIsInput ? e2 ? (t2 = this.$datepicker, (i2 = this.$el).parentNode.insertBefore(t2, i2.nextSibling)) : this.$container.appendChild(this.$datepicker) : this.$el.appendChild(this.$datepicker), this.$datepicker.innerHTML = '<i class="air-datepicker--pointer"></i><div class="air-datepicker--navigation"></div><div class="air-datepicker--content"></div>', this.$content = a(".air-datepicker--content", this.$datepicker), this.$pointer = a(".air-datepicker--pointer", this.$datepicker), this.$nav = a(".air-datepicker--navigation", this.$datepicker);
        }
        _handleLocale() {
          let { locale: e2, dateFormat: t2, firstDay: i2, timepicker: s2, onlyTimepicker: a2, timeFormat: n2, dateTimeSeparator: r2 } = this.opts;
          var o2;
          this.locale = (o2 = e2, JSON.parse(JSON.stringify(o2))), t2 && (this.locale.dateFormat = t2), void 0 !== n2 && "" !== n2 && (this.locale.timeFormat = n2);
          let { timeFormat: h3 } = this.locale;
          if ("" !== i2 && (this.locale.firstDay = i2), s2 && "function" != typeof t2) {
            let e3 = h3 ? r2 : "";
            this.locale.dateFormat = [this.locale.dateFormat, h3 || ""].join(e3);
          }
          a2 && "function" != typeof t2 && (this.locale.dateFormat = this.locale.timeFormat);
        }
        _setPositionClasses(e2) {
          if ("function" == typeof e2) return void this.$datepicker.classList.add("-custom-position-");
          let t2 = (e2 = e2.split(" "))[0], i2 = `air-datepicker -${t2}-${e2[1]}- -from-${t2}-`;
          this.$datepicker.classList.add(...i2.split(" "));
        }
        _bindEvents() {
          this.$el.addEventListener(this.opts.showEvent, this._onFocus), this.$el.addEventListener("blur", this._onBlur), this.$datepicker.addEventListener("mousedown", this._onMouseDown), this.$datepicker.addEventListener("mouseup", this._onMouseUp), window.addEventListener("resize", this._onResize);
        }
        _limitViewDateByMaxMinDates() {
          let { viewDate: e2, minDate: t2, maxDate: i2 } = this;
          i2 && m2(e2, i2) && this.setViewDate(i2), t2 && v(e2, t2) && this.setViewDate(t2);
        }
        formatDate() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : this.viewDate, t2 = arguments.length > 1 ? arguments[1] : void 0;
          if (e2 = b(e2), !(e2 instanceof Date)) return;
          let i2 = t2, s2 = this.locale, a2 = h2(e2), n2 = a2.dayPeriod, r2 = c(e2), o2 = R.replacer, l2 = { T: e2.getTime(), m: a2.minutes, mm: a2.fullMinutes, h: a2.hours12, hh: a2.fullHours12, H: a2.hours, HH: a2.fullHours, aa: n2, AA: n2.toUpperCase(), E: s2.daysShort[a2.day], EEEE: s2.days[a2.day], d: a2.date, dd: a2.fullDate, M: a2.month + 1, MM: a2.fullMonth, MMM: s2.monthsShort[a2.month], MMMM: s2.months[a2.month], yy: a2.year.toString().slice(-2), yyyy: a2.year, yyyy1: r2[0], yyyy2: r2[1] };
          for (let [e3, t3] of Object.entries(l2)) i2 = o2(i2, k(e3), t3);
          return i2;
        }
        down(e2) {
          this._handleUpDownActions(e2, "down");
        }
        up(e2) {
          this._handleUpDownActions(e2, "up");
        }
        selectDate(e2) {
          let t2, s2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, { currentView: a2, parsedViewDate: n2, selectedDates: r2 } = this, { updateTime: o2 } = s2, { moveToOtherMonthsOnSelect: h3, moveToOtherYearsOnSelect: l2, multipleDates: d2, range: c2, autoClose: u2, onBeforeSelect: p3 } = this.opts, v2 = r2.length;
          if (Array.isArray(e2)) return e2.forEach((e3) => {
            this.selectDate(e3, s2);
          }), new Promise((e3) => {
            setTimeout(e3);
          });
          if ((e2 = b(e2)) instanceof Date) {
            if (p3 && !p3({ date: e2, datepicker: this })) return Promise.resolve();
            if (a2 === i.days && e2.getMonth() !== n2.month && h3 && (t2 = new Date(e2.getFullYear(), e2.getMonth(), 1)), a2 === i.years && e2.getFullYear() !== n2.year && l2 && (t2 = new Date(e2.getFullYear(), 0, 1)), t2 && this.setViewDate(t2), d2 && !c2) {
              if (v2 === d2) return;
              this._checkIfDateIsSelected(e2) || r2.push(e2);
            } else if (c2) switch (v2) {
              case 1:
                r2.push(e2), this.rangeDateTo || (this.rangeDateTo = e2), m2(this.rangeDateFrom, this.rangeDateTo) && (this.rangeDateTo = this.rangeDateFrom, this.rangeDateFrom = e2), this.selectedDates = [this.rangeDateFrom, this.rangeDateTo];
                break;
              case 2:
                this.selectedDates = [e2], this.rangeDateFrom = e2, this.rangeDateTo = "";
                break;
              default:
                this.selectedDates = [e2], this.rangeDateFrom = e2;
            }
            else this.selectedDates = [e2];
            return this.trigger(i.eventChangeSelectedDate, { action: i.actionSelectDate, silent: null == s2 ? void 0 : s2.silent, date: e2, updateTime: o2 }), this._updateLastSelectedDate(e2), u2 && !this.timepickerIsActive && this.visible && (d2 || c2 ? c2 && 1 === v2 && this.hide() : this.hide()), new Promise((e3) => {
              setTimeout(e3);
            });
          }
        }
        unselectDate(e2) {
          let t2 = this.selectedDates, s2 = this;
          if ((e2 = b(e2)) instanceof Date) return t2.some((a2, n2) => {
            if (p2(a2, e2)) return t2.splice(n2, 1), s2.selectedDates.length ? (s2.rangeDateTo = "", s2.rangeDateFrom = t2[0], s2._updateLastSelectedDate(s2.selectedDates[s2.selectedDates.length - 1])) : (s2.rangeDateFrom = "", s2.rangeDateTo = "", s2._updateLastSelectedDate(false)), this.trigger(i.eventChangeSelectedDate, { action: i.actionUnselectDate, date: e2 }), true;
          });
        }
        replaceDate(e2, t2) {
          let s2 = this.selectedDates.find((t3) => p2(t3, e2, this.currentView)), a2 = this.selectedDates.indexOf(s2);
          a2 < 0 || p2(this.selectedDates[a2], t2, this.currentView) || (this.selectedDates[a2] = t2, this.trigger(i.eventChangeSelectedDate, { action: i.actionSelectDate, date: t2, updateTime: true }), this._updateLastSelectedDate(t2));
        }
        clear() {
          let e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
          return this.selectedDates = [], this.rangeDateFrom = false, this.rangeDateTo = false, this.lastSelectedDate = false, this.trigger(i.eventChangeSelectedDate, { action: i.actionUnselectDate, silent: e2.silent }), new Promise((e3) => {
            setTimeout(e3);
          });
        }
        show() {
          let { onShow: e2, isMobile: t2 } = this.opts;
          this._cancelScheduledCall(), this.visible || this.hideAnimation || this._createComponents(), this.setPosition(this.opts.position), this.$datepicker.classList.add("-active-"), this.visible = true, e2 && this._scheduleCallAfterTransition(e2), t2 && this._showMobileOverlay();
        }
        hide() {
          let { onHide: e2, isMobile: t2 } = this.opts, i2 = this._hasTransition();
          this.visible = false, this.hideAnimation = true, this.$datepicker.classList.remove("-active-"), this.customHide && this.customHide(), this.elIsInput && this.$el.blur(), this._scheduleCallAfterTransition((t3) => {
            !this.customHide && (t3 && i2 || !t3 && !i2) && this._finishHide(), e2 && e2(t3);
          }), t2 && j.classList.remove("-active-");
        }
        _triggerOnSelect() {
          let e2 = [], t2 = [], { selectedDates: i2, locale: s2, opts: { onSelect: a2, multipleDates: n2, range: r2 } } = this, o2 = n2 || r2, h3 = "function" == typeof s2.dateFormat;
          i2.length && (e2 = i2.map(g), t2 = h3 ? n2 ? s2.dateFormat(e2) : e2.map((e3) => s2.dateFormat(e3)) : e2.map((e3) => this.formatDate(e3, s2.dateFormat))), a2({ date: o2 ? e2 : e2[0], formattedDate: o2 ? t2 : t2[0], datepicker: this });
        }
        _handleAlreadySelectedDates(e2, t2) {
          let { selectedDates: i2, rangeDateFrom: s2, rangeDateTo: a2 } = this, { range: n2, toggleSelected: r2 } = this.opts, o2 = i2.length, h3 = "function" == typeof r2 ? r2({ datepicker: this, date: t2 }) : r2, l2 = Boolean(n2 && 1 === o2 && e2), d2 = l2 ? g(t2) : t2;
          n2 && !h3 && (2 !== o2 && this.selectDate(d2), 2 === o2 && p2(s2, a2)) || (h3 ? this.unselectDate(d2) : this._updateLastSelectedDate(l2 ? d2 : e2));
        }
        _handleUpDownActions(e2, t2) {
          if (!((e2 = b(e2 || this.focusDate || this.viewDate)) instanceof Date)) return;
          let i2 = "up" === t2 ? this.viewIndex + 1 : this.viewIndex - 1;
          i2 > 2 && (i2 = 2), i2 < 0 && (i2 = 0), this.setViewDate(new Date(e2.getFullYear(), e2.getMonth(), 1)), this.setCurrentView(this.viewIndexes[i2]);
        }
        getCell(e2) {
          let t2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : i.day;
          if (!((e2 = b(e2)) instanceof Date)) return;
          let { year: s2, month: a2, date: n2 } = h2(e2), r2 = `[data-year="${s2}"]`, o2 = `[data-month="${a2}"]`, l2 = { [i.day]: `${r2}${o2}[data-date="${n2}"]`, [i.month]: `${r2}${o2}`, [i.year]: `${r2}` };
          return this.views[this.currentView] ? this.views[this.currentView].$el.querySelector(l2[t2]) : void 0;
        }
        _showMobileOverlay() {
          j.classList.add("-active-");
        }
        _hasTransition() {
          return window.getComputedStyle(this.$datepicker).getPropertyValue("transition-duration").split(", ").reduce((e2, t2) => parseFloat(t2) + e2, 0) > 0;
        }
        get shouldUpdateDOM() {
          return this.visible || this.treatAsInline;
        }
        get parsedViewDate() {
          return h2(this.viewDate);
        }
        get currentViewSingular() {
          return this.currentView.slice(0, -1);
        }
        get curDecade() {
          return c(this.viewDate);
        }
        get viewIndex() {
          return this.viewIndexes.indexOf(this.currentView);
        }
        get isFinalView() {
          return this.currentView === i.years;
        }
        get hasSelectedDates() {
          return this.selectedDates.length > 0;
        }
        get isMinViewReached() {
          return this.currentView === this.opts.minView || this.currentView === i.days;
        }
        get $container() {
          return this.$customContainer || P;
        }
        static replacer(e2, t2, i2) {
          return e2.replace(t2, function(e3, t3, s2, a2) {
            return t3 + i2 + a2;
          });
        }
      }
      var K;
      return I2(R, "defaults", s), I2(R, "version", "3.5.3"), I2(R, "defaultGlobalContainerId", "air-datepicker-global-container"), K = R.prototype, Object.assign(K, N2), t.default;
    }();
  });
})(airDatepicker);
var airDatepickerExports = airDatepicker.exports;
const AirDatepicker = /* @__PURE__ */ getDefaultExportFromCjs(airDatepickerExports);
var en = {};
Object.defineProperty(en, "__esModule", {
  value: true
});
var default_1$3 = en.default = void 0;
var _default$3 = {
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  daysShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  daysMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  monthsShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  today: "Today",
  clear: "Clear",
  dateFormat: "MM/dd/yyyy",
  timeFormat: "hh:mm aa",
  firstDay: 0
};
default_1$3 = en.default = _default$3;
var fr = {};
Object.defineProperty(fr, "__esModule", {
  value: true
});
var default_1$2 = fr.default = void 0;
var _default$2 = {
  days: ["Dimanche", "Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi", "Samedi"],
  daysShort: ["Dim", "Lun", "Mar", "Mer", "Jeu", "Ven", "Sam"],
  daysMin: ["Di", "Lu", "Ma", "Me", "Je", "Ve", "Sa"],
  months: ["Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre"],
  monthsShort: ["Jan", "Fév", "Mars", "Avr", "Mai", "Juin", "Juil", "Août", "Sep", "Oct", "Nov", "Dec"],
  today: "Aujourd'hui",
  clear: "Effacer",
  dateFormat: "dd/MM/yyyy",
  timeFormat: "HH:mm",
  firstDay: 1
};
default_1$2 = fr.default = _default$2;
var es = {};
Object.defineProperty(es, "__esModule", {
  value: true
});
var default_1$1 = es.default = void 0;
var _default$1 = {
  days: ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado"],
  daysShort: ["Dom", "Lun", "Mar", "Mie", "Jue", "Vie", "Sab"],
  daysMin: ["Do", "Lu", "Ma", "Mi", "Ju", "Vi", "Sa"],
  months: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"],
  monthsShort: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
  today: "Hoy",
  clear: "Limpiar",
  dateFormat: "dd/MM/yyyy",
  timeFormat: "hh:mm aa",
  firstDay: 1
};
default_1$1 = es.default = _default$1;
var pt = {};
Object.defineProperty(pt, "__esModule", {
  value: true
});
var default_1 = pt.default = void 0;
var _default = {
  days: ["Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sábado"],
  daysShort: ["Dom", "Seg", "Ter", "Qua", "Qui", "Sex", "Sab"],
  daysMin: ["Do", "Se", "Te", "Qa", "Qi", "Sx", "Sa"],
  months: ["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"],
  monthsShort: ["Jan", "Fev", "Mar", "Abr", "Mai", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"],
  today: "Hoje",
  clear: "Limpar",
  dateFormat: "dd/MM/yyyy",
  timeFormat: "HH:mm",
  firstDay: 1
};
default_1 = pt.default = _default;
const _hoisted_1$5 = ["id", "name"];
const _sfc_main$6 = {
  __name: "simple-date",
  props: /* @__PURE__ */ mergeModels({
    id: {
      type: String,
      default: null
    },
    dateType: {
      type: String,
      default: "day"
    },
    startDate: {
      type: String,
      default: null
    },
    endDate: {
      type: String,
      default: null
    }
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props) {
    const AirDatepicker_locale = {
      "en": default_1$3,
      "fr": default_1$2,
      "sp": default_1$1,
      "pt": default_1
    };
    const props = __props;
    const inputValue = useModel(__props, "modelValue");
    onMounted(() => {
      let options = {
        locale: AirDatepicker_locale[window.ModularForms.Mixins.Locale.getLocale()],
        autoClose: true,
        toggleSelected: false,
        onSelect({ date, formattedDate, datepicker }) {
          inputValue.value = formattedDate;
        },
        buttons: ["clear"]
      };
      if (props.startDate !== null) {
        options.minDate = props.startDate;
      }
      if (props.endDate !== null) {
        options.maxDate = props.endDate;
      }
      if (props.dateType === "day") {
        options.dateFormat = "yyyy-MM-dd";
        if (inputValue.value !== null) {
          options.selectedDates = [inputValue.value];
        }
      } else if (props.dateType === "year") {
        options.dateFormat = "yyyy";
        options.view = "years";
        options.minView = "years";
        if (inputValue.value !== null) {
          options.selectedDates = [inputValue.value + "-01-01"];
        }
      }
      new AirDatepicker("#" + props.id, options);
    });
    return (_ctx, _cache) => {
      return withDirectives((openBlock(), createElementBlock("input", {
        type: "text",
        id: __props.id,
        name: __props.id,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => inputValue.value = $event),
        class: "field-edit field-date",
        readonly: ""
      }, null, 8, _hoisted_1$5)), [
        [vModelText, inputValue.value]
      ]);
    };
  }
};
const simpleDate = /* @__PURE__ */ _export_sfc(_sfc_main$6, [["__scopeId", "data-v-b21a1291"]]);
const AutoNumericEnum = {};
AutoNumericEnum.allowedTagList = [
  "b",
  "caption",
  "cite",
  "code",
  "const",
  "dd",
  "del",
  "div",
  "dfn",
  "dt",
  "em",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "input",
  "ins",
  "kdb",
  "label",
  "li",
  "option",
  "output",
  "p",
  "q",
  "s",
  "sample",
  "span",
  "strong",
  "td",
  "th",
  "u"
];
Object.freeze(AutoNumericEnum.allowedTagList);
Object.defineProperty(AutoNumericEnum, "allowedTagList", { configurable: false, writable: false });
AutoNumericEnum.fromCharCodeKeyCode = {
  0: "LaunchCalculator",
  8: "Backspace",
  9: "Tab",
  13: "Enter",
  16: "Shift",
  17: "Ctrl",
  18: "Alt",
  19: "Pause",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  45: "Insert",
  46: "Delete",
  48: "0",
  49: "1",
  50: "2",
  51: "3",
  52: "4",
  53: "5",
  54: "6",
  55: "7",
  56: "8",
  57: "9",
  // 65: 'a',
  // 66: 'b',
  // 67: 'c',
  // 68: 'd',
  // 69: 'e',
  // 70: 'f',
  // 71: 'g',
  // 72: 'h',
  // 73: 'i',
  // 74: 'j',
  // 75: 'k',
  // 76: 'l',
  // 77: 'm',
  // 78: 'n',
  // 79: 'o',
  // 80: 'p',
  // 81: 'q',
  // 82: 'r',
  // 83: 's',
  // 84: 't',
  // 85: 'u',
  // 86: 'v',
  // 87: 'w',
  // 88: 'x',
  // 89: 'y',
  // 90: 'z',
  91: "OS",
  // Note: Firefox and Chrome reports 'OS' instead of 'OSLeft'
  92: "OSRight",
  93: "ContextMenu",
  96: "0",
  97: "1",
  98: "2",
  99: "3",
  100: "4",
  101: "5",
  102: "6",
  103: "7",
  104: "8",
  105: "9",
  106: "*",
  107: "+",
  109: "-",
  // The 'NumpadSubtract' code
  110: ".",
  111: "/",
  112: "F1",
  113: "F2",
  114: "F3",
  115: "F4",
  116: "F5",
  117: "F6",
  118: "F7",
  119: "F8",
  120: "F9",
  121: "F10",
  122: "F11",
  123: "F12",
  144: "NumLock",
  145: "ScrollLock",
  173: "-",
  // The 'Minus' sign on Firefox. This is only needed when using the Selenium bot though.
  182: "MyComputer",
  183: "MyCalculator",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  // The 'Minus' sign on all other browsers
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'",
  224: "Meta",
  225: "AltGraph"
};
Object.freeze(AutoNumericEnum.fromCharCodeKeyCode);
Object.defineProperty(AutoNumericEnum, "fromCharCodeKeyCode", { configurable: false, writable: false });
AutoNumericEnum.keyName = {
  // Special values
  Unidentified: "Unidentified",
  AndroidDefault: "AndroidDefault",
  // Modifier keys
  Alt: "Alt",
  AltGr: "AltGraph",
  CapsLock: "CapsLock",
  // Under Chrome, e.key is empty for CapsLock
  Ctrl: "Control",
  Fn: "Fn",
  FnLock: "FnLock",
  Hyper: "Hyper",
  // 'OS' under Firefox
  Meta: "Meta",
  OSLeft: "OS",
  OSRight: "OS",
  Command: "OS",
  NumLock: "NumLock",
  ScrollLock: "ScrollLock",
  Shift: "Shift",
  Super: "Super",
  // 'OS' under Firefox
  Symbol: "Symbol",
  SymbolLock: "SymbolLock",
  // Whitespace keys
  Enter: "Enter",
  Tab: "Tab",
  Space: " ",
  // 'Spacebar' for Firefox <37, and IE9
  // Navigation keys
  LeftArrow: "ArrowLeft",
  // 'Left' for Firefox <=36, and IE9
  UpArrow: "ArrowUp",
  // 'Up' for Firefox <=36, and IE9
  RightArrow: "ArrowRight",
  // 'Right' for Firefox <=36, and IE9
  DownArrow: "ArrowDown",
  // 'Down' for Firefox <=36, and IE9
  End: "End",
  Home: "Home",
  PageUp: "PageUp",
  PageDown: "PageDown",
  // Editing keys
  Backspace: "Backspace",
  Clear: "Clear",
  Copy: "Copy",
  CrSel: "CrSel",
  // 'Crsel' for Firefox <=36, and IE9
  Cut: "Cut",
  Delete: "Delete",
  // 'Del' for Firefox <=36, and IE9
  EraseEof: "EraseEof",
  ExSel: "ExSel",
  // 'Exsel' for Firefox <=36, and IE9
  Insert: "Insert",
  Paste: "Paste",
  Redo: "Redo",
  Undo: "Undo",
  // UI keys
  Accept: "Accept",
  Again: "Again",
  Attn: "Attn",
  // 'Unidentified' for Firefox, Chrome, and IE9 ('KanaMode' when using the Japanese keyboard layout)
  Cancel: "Cancel",
  ContextMenu: "ContextMenu",
  // 'Apps' for Firefox <=36, and IE9
  Esc: "Escape",
  // 'Esc' for Firefox <=36, and IE9
  Execute: "Execute",
  Find: "Find",
  Finish: "Finish",
  // 'Unidentified' for Firefox, Chrome, and IE9 ('Katakana' when using the Japanese keyboard layout)
  Help: "Help",
  Pause: "Pause",
  Play: "Play",
  Props: "Props",
  Select: "Select",
  ZoomIn: "ZoomIn",
  ZoomOut: "ZoomOut",
  // Device keys
  BrightnessDown: "BrightnessDown",
  BrightnessUp: "BrightnessUp",
  Eject: "Eject",
  LogOff: "LogOff",
  Power: "Power",
  PowerOff: "PowerOff",
  PrintScreen: "PrintScreen",
  Hibernate: "Hibernate",
  // 'Unidentified' for Firefox <=37
  Standby: "Standby",
  // 'Unidentified' for Firefox <=36, and IE9
  WakeUp: "WakeUp",
  // IME and composition keys
  Compose: "Compose",
  Dead: "Dead",
  // Function keys
  F1: "F1",
  F2: "F2",
  F3: "F3",
  F4: "F4",
  F5: "F5",
  F6: "F6",
  F7: "F7",
  F8: "F8",
  F9: "F9",
  F10: "F10",
  F11: "F11",
  F12: "F12",
  // Document keys
  Print: "Print",
  // 'Normal' keys
  num0: "0",
  num1: "1",
  num2: "2",
  num3: "3",
  num4: "4",
  num5: "5",
  num6: "6",
  num7: "7",
  num8: "8",
  num9: "9",
  a: "a",
  b: "b",
  c: "c",
  d: "d",
  e: "e",
  f: "f",
  g: "g",
  h: "h",
  i: "i",
  j: "j",
  k: "k",
  l: "l",
  m: "m",
  n: "n",
  o: "o",
  p: "p",
  q: "q",
  r: "r",
  s: "s",
  t: "t",
  u: "u",
  v: "v",
  w: "w",
  x: "x",
  y: "y",
  z: "z",
  A: "A",
  B: "B",
  C: "C",
  D: "D",
  E: "E",
  F: "F",
  G: "G",
  H: "H",
  I: "I",
  J: "J",
  K: "K",
  L: "L",
  M: "M",
  N: "N",
  O: "O",
  P: "P",
  Q: "Q",
  R: "R",
  S: "S",
  T: "T",
  U: "U",
  V: "V",
  W: "W",
  X: "X",
  Y: "Y",
  Z: "Z",
  Semicolon: ";",
  Equal: "=",
  Comma: ",",
  Hyphen: "-",
  Minus: "-",
  Plus: "+",
  Dot: ".",
  Slash: "/",
  Backquote: "`",
  LeftParenthesis: "(",
  RightParenthesis: ")",
  LeftBracket: "[",
  RightBracket: "]",
  Backslash: "\\",
  Quote: "'",
  // Numeric keypad keys
  numpad0: "0",
  numpad1: "1",
  numpad2: "2",
  numpad3: "3",
  numpad4: "4",
  numpad5: "5",
  numpad6: "6",
  numpad7: "7",
  numpad8: "8",
  numpad9: "9",
  NumpadDot: ".",
  NumpadDotAlt: ",",
  // Modern browsers automatically adapt the character sent by this key to the decimal character of the current language
  NumpadMultiply: "*",
  NumpadPlus: "+",
  NumpadMinus: "-",
  NumpadSubtract: "-",
  NumpadSlash: "/",
  NumpadDotObsoleteBrowsers: "Decimal",
  NumpadMultiplyObsoleteBrowsers: "Multiply",
  NumpadPlusObsoleteBrowsers: "Add",
  NumpadMinusObsoleteBrowsers: "Subtract",
  NumpadSlashObsoleteBrowsers: "Divide",
  // Special arrays for quicker tests
  _allFnKeys: ["F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10", "F11", "F12"],
  _someNonPrintableKeys: ["Tab", "Enter", "Shift", "ShiftLeft", "ShiftRight", "Control", "ControlLeft", "ControlRight", "Alt", "AltLeft", "AltRight", "Pause", "CapsLock", "Escape"],
  _directionKeys: ["PageUp", "PageDown", "End", "Home", "ArrowDown", "ArrowLeft", "ArrowRight", "ArrowUp"]
};
Object.freeze(AutoNumericEnum.keyName._allFnKeys);
Object.freeze(AutoNumericEnum.keyName._someNonPrintableKeys);
Object.freeze(AutoNumericEnum.keyName._directionKeys);
Object.freeze(AutoNumericEnum.keyName);
Object.defineProperty(AutoNumericEnum, "keyName", { configurable: false, writable: false });
Object.freeze(AutoNumericEnum);
class AutoNumericHelper {
  /**
   * Return `true` if the `value` is null
   *
   * @static
   * @param {*} value The value to test
   * @returns {boolean} Return `true` if the `value` is null, FALSE otherwise
   */
  static isNull(value) {
    return value === null;
  }
  /**
   * Return `true` if the `value` is undefined
   *
   * @static
   * @param {*} value The value to test
   * @returns {boolean} Return `true` if the `value` is undefined, FALSE otherwise
   */
  static isUndefined(value) {
    return value === void 0;
  }
  /**
   * Return `true` if the `value` is undefined, null or empty
   *
   * @param {*} value
   * @returns {boolean}
   */
  static isUndefinedOrNullOrEmpty(value) {
    return value === null || value === void 0 || "" === value;
  }
  /**
   * Return `true` if the given parameter is a String
   *
   * @param {*} str
   * @returns {boolean}
   */
  static isString(str) {
    return typeof str === "string" || str instanceof String;
  }
  /**
   * Return `true` if the `value` is an empty string ''
   *
   * @static
   * @param {*} value The value to test
   * @returns {boolean} Return `true` if the `value` is an empty string '', FALSE otherwise
   */
  static isEmptyString(value) {
    return value === "";
  }
  /**
   * Return `true` if the parameter is a boolean
   *
   * @static
   * @param {*} value
   * @returns {boolean}
   */
  static isBoolean(value) {
    return typeof value === "boolean";
  }
  /**
   * Return `true` if the parameter is a string 'true' or 'false'
   *
   * This function accepts any cases for those strings.
   * @param {string} value
   * @returns {boolean}
   */
  static isTrueOrFalseString(value) {
    const lowercaseValue = String(value).toLowerCase();
    return lowercaseValue === "true" || lowercaseValue === "false";
  }
  /**
   * Return `true` if the parameter is an object
   *
   * @param {*} reference
   * @returns {boolean}
   */
  static isObject(reference) {
    return typeof reference === "object" && reference !== null && !Array.isArray(reference);
  }
  /**
   * Return `true` if the given object is empty
   * cf. http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object and http://jsperf.com/empty-object-test
   *
   * @param {object} obj
   * @returns {boolean}
   */
  static isEmptyObj(obj) {
    for (const prop in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, prop)) {
        return false;
      }
    }
    return true;
  }
  /**
   * Return `true` if the parameter is a real number (and not a numeric string).
   *
   * @param {*} n
   * @returns {boolean}
   */
  static isNumberStrict(n) {
    return typeof n === "number";
  }
  /**
   * Return `true` if the parameter is a number (or a number written as a string).
   *
   * @param {*} n
   * @returns {boolean}
   */
  static isNumber(n) {
    return !this.isArray(n) && !isNaN(parseFloat(n)) && isFinite(n);
  }
  /**
   * Return `true` if the given character is a number (0 to 9)
   *
   * @param {char} char
   * @returns {boolean}
   */
  static isDigit(char) {
    return /\d/.test(char);
  }
  /**
   * Return `true` if the parameter is a number (or a number written as a string).
   * This version also accepts Arabic and Persian numbers.
   *
   * @param {*} n
   * @returns {boolean}
   */
  static isNumberOrArabic(n) {
    const latinConvertedNumber = this.arabicToLatinNumbers(n, false, true, true);
    return this.isNumber(latinConvertedNumber);
  }
  /**
   * Return `true` if the parameter is an integer (and not a float).
   *
   * @param {*} n
   * @returns {boolean}
   */
  static isInt(n) {
    return typeof n === "number" && parseFloat(n) === parseInt(n, 10) && !isNaN(n);
  }
  /**
   * Return `true` if the parameter is a function.
   *
   * @param {function} func
   * @returns {boolean}
   */
  static isFunction(func) {
    return typeof func === "function";
  }
  /**
   * Return `true` is the string `str` contains the string `needle`
   * Note: this function does not coerce the parameters types
   *
   * @param {string} str
   * @param {string} needle
   * @returns {boolean}
   */
  static contains(str, needle) {
    if (!this.isString(str) || !this.isString(needle) || str === "" || needle === "") {
      return false;
    }
    return str.indexOf(needle) !== -1;
  }
  /**
   * Return `true` if the `needle` is in the array
   *
   * @param {*} needle
   * @param {Array} array
   * @returns {boolean}
   */
  static isInArray(needle, array) {
    if (!this.isArray(array) || array === [] || this.isUndefined(needle)) {
      return false;
    }
    return array.indexOf(needle) !== -1;
  }
  /**
   * Return `true` if the parameter is an Array
   * //TODO Replace this by the default `Array.isArray()` function?
   *
   * @param {*} arr
   * @throws Error
   * @returns {*|boolean}
   */
  static isArray(arr) {
    if (Object.prototype.toString.call([]) === "[object Array]") {
      return Array.isArray(arr) || typeof arr === "object" && Object.prototype.toString.call(arr) === "[object Array]";
    } else {
      throw new Error("toString message changed for Object Array");
    }
  }
  /**
   * Return `true` if the parameter is a DOM element
   * cf. http://stackoverflow.com/a/4754104/2834898
   *
   * @param {*} obj
   * @returns {boolean}
   */
  static isElement(obj) {
    if (typeof Element === "undefined") {
      return false;
    }
    return obj instanceof Element;
  }
  /**
   * Return `true` in the given DOM element is an <input>.
   *
   * @param {HTMLElement|HTMLInputElement} domElement
   * @returns {boolean}
   * @private
   */
  static isInputElement(domElement) {
    return this.isElement(domElement) && domElement.tagName.toLowerCase() === "input";
  }
  /**
   * Return `true` if the parameter is a string that represents a float number, and that number has a decimal part
   *
   * @param {string} str
   * @returns {boolean}
   */
  // static hasDecimals(str) {
  //     const [, decimalPart] = str.split('.');
  //     return !isUndefined(decimalPart);
  // }
  /**
   * Return the number of decimal places if the parameter is a string that represents a float number, and that number has a decimal part.
   *
   * @param {string} str
   * @returns {int}
   */
  static decimalPlaces(str) {
    const [, decimalPart] = str.split(".");
    if (!this.isUndefined(decimalPart)) {
      return decimalPart.length;
    }
    return 0;
  }
  /**
   * Return the index of the first non-zero decimal place in the given value.
   * The index starts after the decimal point, if any, and begins at '1'.
   * If no decimal places are found in the value, this function returns `0`.
   *
   * @example
   * indexFirstNonZeroDecimalPlace('0.00') -> 0
   * indexFirstNonZeroDecimalPlace('1.00') -> 0
   * indexFirstNonZeroDecimalPlace('0.12') -> 1
   * indexFirstNonZeroDecimalPlace('0.1234') -> 1
   * indexFirstNonZeroDecimalPlace('0.01234') -> 2
   * indexFirstNonZeroDecimalPlace('0.001234') -> 3
   * indexFirstNonZeroDecimalPlace('0.0001234') -> 4
   *
   * @param {number} value
   * @returns {Number|number}
   */
  static indexFirstNonZeroDecimalPlace(value) {
    const [, decimalPart] = String(Math.abs(value)).split(".");
    if (this.isUndefined(decimalPart)) {
      return 0;
    }
    let result = decimalPart.lastIndexOf("0");
    if (result === -1) {
      result = 0;
    } else {
      result += 2;
    }
    return result;
  }
  /**
   * Return the code for the key used to generate the given event.
   *
   * @param {Event} event
   * @returns {string|Number}
   */
  static keyCodeNumber(event) {
    return typeof event.which === "undefined" ? event.keyCode : event.which;
  }
  /**
   * Return the character from the event key code.
   * If the KeyboardEvent does not represent a printable character, then the key name is used (ie. 'Meta', 'Shift', 'F1', etc.)
   * @example character(50) => '2'
   *
   * @param {KeyboardEvent} event
   * @returns {string}
   */
  static character(event) {
    let result;
    if (event.key === "Unidentified" || event.key === void 0 || this.isSeleniumBot()) {
      const keyCode = this.keyCodeNumber(event);
      if (keyCode === 229) {
        return AutoNumericEnum.keyName.AndroidDefault;
      }
      const potentialResult = AutoNumericEnum.fromCharCodeKeyCode[keyCode];
      if (!AutoNumericHelper.isUndefinedOrNullOrEmpty(potentialResult)) {
        result = potentialResult;
      } else {
        result = String.fromCharCode(keyCode);
      }
    } else {
      switch (event.key) {
        case "Add":
          result = AutoNumericEnum.keyName.NumpadPlus;
          break;
        case "Apps":
          result = AutoNumericEnum.keyName.ContextMenu;
          break;
        case "Crsel":
          result = AutoNumericEnum.keyName.CrSel;
          break;
        case "Decimal":
          if (event.char) {
            result = event.char;
          } else {
            result = AutoNumericEnum.keyName.NumpadDot;
          }
          break;
        case "Del":
          result = AutoNumericEnum.keyName.Delete;
          break;
        case "Divide":
          result = AutoNumericEnum.keyName.NumpadSlash;
          break;
        case "Down":
          result = AutoNumericEnum.keyName.DownArrow;
          break;
        case "Esc":
          result = AutoNumericEnum.keyName.Esc;
          break;
        case "Exsel":
          result = AutoNumericEnum.keyName.ExSel;
          break;
        case "Left":
          result = AutoNumericEnum.keyName.LeftArrow;
          break;
        case "Meta":
        case "Super":
          result = AutoNumericEnum.keyName.OSLeft;
          break;
        case "Multiply":
          result = AutoNumericEnum.keyName.NumpadMultiply;
          break;
        case "Right":
          result = AutoNumericEnum.keyName.RightArrow;
          break;
        case "Spacebar":
          result = AutoNumericEnum.keyName.Space;
          break;
        case "Subtract":
          result = AutoNumericEnum.keyName.NumpadMinus;
          break;
        case "Up":
          result = AutoNumericEnum.keyName.UpArrow;
          break;
        default:
          result = event.key;
      }
    }
    return result;
  }
  /**
   * Return an object containing the name and version of the current browser.
   * @example `browserVersion()` => { name: 'Firefox', version: '42' }
   * Based on http://stackoverflow.com/a/38080051/2834898
   *
   * @returns {{ name: string, version: string }}
   */
  static browser() {
    const ua = navigator.userAgent;
    let tem;
    let M2 = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    if (/trident/i.test(M2[1])) {
      tem = /\brv[ :]+(\d+)/g.exec(ua) || [];
      return { name: "ie", version: tem[1] || "" };
    }
    if (M2[1] === "Chrome") {
      tem = ua.match(/\b(OPR|Edge)\/(\d+)/);
      if (tem !== null) {
        return { name: tem[1].replace("OPR", "opera"), version: tem[2] };
      }
    }
    M2 = M2[2] ? [M2[1], M2[2]] : [navigator.appName, navigator.appVersion, "-?"];
    if ((tem = ua.match(/version\/(\d+)/i)) !== null) {
      M2.splice(1, 1, tem[1]);
    }
    return { name: M2[0].toLowerCase(), version: M2[1] };
  }
  /**
   * Check if the browser is controlled by Selenium.
   * Note: This only works within the geckodriver.
   * cf. http://stackoverflow.com/questions/33225947/can-a-website-detect-when-you-are-using-selenium-with-chromedriver
   *
   * @returns {boolean}
   */
  static isSeleniumBot() {
    return window.navigator.webdriver === true;
  }
  /**
   * Return `true` if the given number is negative, or if the given string contains a negative sign :
   * - everywhere in the string (by default), or
   * - on the first character only if the `checkEverywhere` parameter is set to `false`.
   *
   * Note: `-0` is not a negative number since it's equal to `0`.
   *
   * @param {number|string} numberOrNumericString A Number, or a number represented by a string
   * @param {string} negativeSignCharacter The single character that represent the negative sign
   * @param {boolean} checkEverywhere If TRUE, then the negative sign is search everywhere in the numeric string (this is needed for instance if the string is '1234.56-')
   * @returns {boolean}
   */
  static isNegative(numberOrNumericString, negativeSignCharacter = "-", checkEverywhere = true) {
    if (numberOrNumericString === negativeSignCharacter) {
      return true;
    }
    if (numberOrNumericString === "") {
      return false;
    }
    if (AutoNumericHelper.isNumber(numberOrNumericString)) {
      return numberOrNumericString < 0;
    }
    if (checkEverywhere) {
      return this.contains(numberOrNumericString, negativeSignCharacter);
    }
    return this.isNegativeStrict(numberOrNumericString, negativeSignCharacter);
  }
  /**
   * Return `true` if the given string contains a negative sign on the first character (on the far left).
   *
   * @example isNegativeStrict('1234.56')     => false
   * @example isNegativeStrict('1234.56-')    => false
   * @example isNegativeStrict('-1234.56')    => true
   * @example isNegativeStrict('-1,234.56 €') => true
   *
   * @param {string} numericString
   * @param {string} negativeSignCharacter The single character that represent the negative sign
   * @returns {boolean}
   */
  static isNegativeStrict(numericString, negativeSignCharacter = "-") {
    return numericString.charAt(0) === negativeSignCharacter;
  }
  /**
   * Return `true` if the very first character is the opening bracket, and if the rest of the `valueString` also has the closing bracket.
   *
   * @param {string} valueString
   * @param {string} leftBracket
   * @param {string} rightBracket
   * @returns {boolean}
   */
  static isNegativeWithBrackets(valueString, leftBracket, rightBracket) {
    return valueString.charAt(0) === leftBracket && this.contains(valueString, rightBracket);
  }
  /**
   * Return `true` if the formatted or unformatted numeric string represent the value 0 (ie. '0,00 €'), or is empty (' €').
   * This works since we test if there are any numbers from 1 to 9 in the string. If there is none, then the number is zero (or the string is empty).
   *
   * @param {string} numericString
   * @returns {boolean}
   */
  static isZeroOrHasNoValue(numericString) {
    return !/[1-9]/g.test(numericString);
  }
  /**
   * Return the negative version of the value (represented as a string) given as a parameter.
   * The numeric string is a valid Javascript number when typecast to a `Number`.
   *
   * @param {string} value
   * @returns {*}
   */
  static setRawNegativeSign(value) {
    if (!this.isNegativeStrict(value, "-")) {
      return `-${value}`;
    }
    return value;
  }
  /**
   * Replace the character at the position `index` in the string `string` by the character(s) `newCharacter`.
   *
   * @param {string} string
   * @param {int} index
   * @param {string} newCharacter
   * @returns {string}
   */
  static replaceCharAt(string, index, newCharacter) {
    return `${string.substr(0, index)}${newCharacter}${string.substr(index + newCharacter.length)}`;
  }
  /**
   * Return the value clamped to the nearest minimum/maximum value, as defined in the settings.
   *
   * @param {string|number} value
   * @param {object} settings
   * @returns {number}
   */
  static clampToRangeLimits(value, settings) {
    return Math.max(settings.minimumValue, Math.min(settings.maximumValue, value));
  }
  /**
   * Return the number of number or dot characters on the left side of the caret, in a formatted number.
   *
   * @param {string} formattedNumberString
   * @param {int} caretPosition This must be a positive integer
   * @param {string} decimalCharacter
   * @returns {number}
   */
  static countNumberCharactersOnTheCaretLeftSide(formattedNumberString, caretPosition, decimalCharacter) {
    const numberDotOrNegativeSign = new RegExp(`[0-9${decimalCharacter}-]`);
    let numberDotAndNegativeSignCount = 0;
    for (let i = 0; i < caretPosition; i++) {
      if (numberDotOrNegativeSign.test(formattedNumberString[i])) {
        numberDotAndNegativeSignCount++;
      }
    }
    return numberDotAndNegativeSignCount;
  }
  /**
   * Walk the `formattedNumberString` from left to right, one char by one, counting the `formattedNumberStringIndex`.
   * If the char is in the `rawNumberString` (starting at index 0), then `rawNumberStringIndex++`, and continue until
   * there is no more characters in `rawNumberString`) or that `rawNumberStringIndex === caretPositionInRawValue`.
   * When you stop, the `formattedNumberStringIndex` is the position where the caret should be set.
   *
   * @example
   * 1234567|89.01   : position 7 (rawNumberString)
   * 123.456.7|89,01 : position 9 (formattedNumberString)
   *
   * @param {string} rawNumberString
   * @param {int} caretPositionInRawValue
   * @param {string} formattedNumberString
   * @param {string} decimalCharacter
   * @returns {*}
   */
  static findCaretPositionInFormattedNumber(rawNumberString, caretPositionInRawValue, formattedNumberString, decimalCharacter) {
    const formattedNumberStringSize = formattedNumberString.length;
    const rawNumberStringSize = rawNumberString.length;
    let formattedNumberStringIndex;
    let rawNumberStringIndex = 0;
    for (formattedNumberStringIndex = 0; formattedNumberStringIndex < formattedNumberStringSize && rawNumberStringIndex < rawNumberStringSize && rawNumberStringIndex < caretPositionInRawValue; formattedNumberStringIndex++) {
      if (rawNumberString[rawNumberStringIndex] === formattedNumberString[formattedNumberStringIndex] || rawNumberString[rawNumberStringIndex] === "." && formattedNumberString[formattedNumberStringIndex] === decimalCharacter) {
        rawNumberStringIndex++;
      }
    }
    return formattedNumberStringIndex;
  }
  /**
   * Count the number of occurrence of the given character, in the given text.
   *
   * @param {string} character
   * @param {string} text
   * @returns {number}
   */
  static countCharInText(character, text) {
    let charCounter = 0;
    for (let i = 0; i < text.length; i++) {
      if (text[i] === character) {
        charCounter++;
      }
    }
    return charCounter;
  }
  /**
   * Return the index that can be used to set the caret position.
   * This takes into account that the position is starting at '0', not 1.
   *
   * @param {int} characterCount
   * @returns {number}
   */
  static convertCharacterCountToIndexPosition(characterCount) {
    return Math.max(characterCount, characterCount - 1);
  }
  /**
   * Cross browser routine for getting selected range/cursor position.
   * Note: this also works with edge cases like contenteditable-enabled elements, and hidden inputs.
   *
   * @param {HTMLInputElement|EventTarget} element
   * @returns {{}}
   */
  static getElementSelection(element) {
    const position = {};
    let isSelectionStartUndefined;
    try {
      isSelectionStartUndefined = this.isUndefined(element.selectionStart);
    } catch (error) {
      isSelectionStartUndefined = false;
    }
    try {
      if (isSelectionStartUndefined) {
        const selection = window.getSelection();
        const selectionInfo = selection.getRangeAt(0);
        position.start = selectionInfo.startOffset;
        position.end = selectionInfo.endOffset;
        position.length = position.end - position.start;
      } else {
        position.start = element.selectionStart;
        position.end = element.selectionEnd;
        position.length = position.end - position.start;
      }
    } catch (error) {
      position.start = 0;
      position.end = 0;
      position.length = 0;
    }
    return position;
  }
  /**
   * Cross browser routine for setting selected range/cursor position
   *
   * @param {HTMLInputElement|EventTarget} element
   * @param {int} start
   * @param {int|null} end
   */
  static setElementSelection(element, start, end = null) {
    if (this.isUndefinedOrNullOrEmpty(end)) {
      end = start;
    }
    if (this.isInputElement(element)) {
      element.setSelectionRange(start, end);
    } else if (!AutoNumericHelper.isNull(element.firstChild)) {
      const range2 = document.createRange();
      range2.setStart(element.firstChild, start);
      range2.setEnd(element.firstChild, end);
      const selection = window.getSelection();
      selection.removeAllRanges();
      selection.addRange(range2);
    }
  }
  /**
   * Function that throw error messages
   *
   * @param {string} message
   * @throws
   */
  static throwError(message) {
    throw new Error(message);
  }
  /**
   * Function that display a warning messages, according to the debug level.
   *
   * @param {string} message
   * @param {boolean} showWarning If FALSE, then the warning message is not displayed
   */
  static warning(message, showWarning = true) {
    if (showWarning) {
      console.warn(`Warning: ${message}`);
    }
  }
  /**
   * Return `true` if the given event is an instance of WheelEvent
   *
   * @static
   * @param {event} event The event to test
   * @returns {boolean} Return `true` if the event is an instance of WheelEvent, FALSE otherwise
  */
  static isWheelEvent(event) {
    return event instanceof WheelEvent;
  }
  /**
   * Return `true` if the given event is a wheelup event
   *
   * @param {WheelEvent} wheelEvent
   * @returns {boolean}
   */
  static isWheelUpEvent(wheelEvent) {
    if (!this.isWheelEvent(wheelEvent) || this.isUndefinedOrNullOrEmpty(wheelEvent.deltaY)) {
      this.throwError(`The event passed as a parameter is not a valid wheel event, '${wheelEvent.type}' given.`);
    }
    return wheelEvent.deltaY < 0;
  }
  /**
   * Return `true` if the given event is a wheeldown event
   *
   * @param {WheelEvent} wheelEvent
   * @returns {boolean}
   */
  static isWheelDownEvent(wheelEvent) {
    if (!this.isWheelEvent(wheelEvent) || this.isUndefinedOrNullOrEmpty(wheelEvent.deltaY)) {
      this.throwError(`The event passed as a parameter is not a valid wheel event, '${wheelEvent.type}' given.`);
    }
    return wheelEvent.deltaY > 0;
  }
  /**
   * Return `true` if the given event is an instance of WheelEvent and the deltaY value is equal to zero
   *
   * @param {WheelEvent} wheelEvent The event to test
   * @returns {boolean} Return `true` if the event is an instance of WheelEvent and the deltaY value is equal to zero, FALSE otherwise
   */
  static isWheelEventWithZeroDeltaY(wheelEvent) {
    return this.isWheelEvent(wheelEvent) && !this.isUndefinedOrNullOrEmpty(wheelEvent.deltaY) && wheelEvent.deltaY === 0;
  }
  /**
   * Return the given raw value truncated at the given number of decimal places `decimalPlaces`.
   * This function does not round the value.
   *
   * @example
   * forceDecimalPlaces(123.45678, 0) -> '123.45678'
   * forceDecimalPlaces(123.45678, 1) -> '123.4'
   * forceDecimalPlaces(123.45678, 2) -> '123.45'
   * forceDecimalPlaces(123.45678, 3) -> '123.456'
   *
   * @param {number} value
   * @param {int} decimalPlaces
   * @returns {number|string}
   */
  static forceDecimalPlaces(value, decimalPlaces) {
    const [integerPart, decimalPart] = String(value).split(".");
    if (!decimalPart) {
      return value;
    }
    return `${integerPart}.${decimalPart.substr(0, decimalPlaces)}`;
  }
  /**
   * Return the 'nearest rounded' value, according to the given step size.
   * @example roundToNearest(264789, 10000)) => 260000
   *
   * @param {number} value
   * @param {number} stepPlace
   * @returns {*}
   */
  static roundToNearest(value, stepPlace = 1e3) {
    if (0 === value) {
      return 0;
    }
    if (stepPlace === 0) {
      this.throwError("The `stepPlace` used to round is equal to `0`. This value must not be equal to zero.");
    }
    return Math.round(value / stepPlace) * stepPlace;
  }
  /**
   * Return the 'nearest rounded' value by automatically adding or subtracting the calculated offset to the initial value.
   * This is done without having to pass a step to this function, and based on the size of the given `value`.
   *
   * @example                    Calculated offset
   *           1 ->           1 (1)
   *          14 ->          10 (10)
   *         143 ->         140 (10)
   *       1.278 ->       1.300 (100)
   *      28.456 ->      28.500 (100)
   *     276.345 ->     276.000 (1.000)
   *   4.534.061 ->   4.530.000 (10.000)
   *  66.723.844 ->  66.700.000 (100.000)
   * 257.833.411 -> 258.000.000 (1.000.000)
   *
   *                           Initial   Added   Offset
   * 2 decimalPlacesRawValue : 1.12   -> 2.00   (1)
   * 3 decimalPlacesRawValue : 1.123  -> 2.000  (1)
   *
   * Special case when the `value` to round is between -1 and 1, excluded :
   * @example
   *     Number of             Initial   Result  Calculated
   *     decimal places        value     (add)   offset
   * 2 decimalPlacesRawValue : 0.12   -> 0.13    (0.01) : Math.pow(10, -2)
   * 2 decimalPlacesRawValue : 0.01   -> 0.02    (0.01)
   * 2 decimalPlacesRawValue : 0.00   -> 0.01    (0.01)
   *
   * 3 decimalPlacesRawValue : 0.123  -> 0.133   (0.01)  : Math.pow(10, -2)
   * 3 decimalPlacesRawValue : 0.012  -> 0.013   (0.001) : Math.pow(10, -3)
   * 3 decimalPlacesRawValue : 0.001  -> 0.001   (0.001)
   * 3 decimalPlacesRawValue : 0.000  -> 0.001   (0.001)
   *
   * 4 decimalPlacesRawValue : 0.4123 -> 0.4200  (0.01)   : Math.pow(10, -2)
   * 4 decimalPlacesRawValue : 0.0412 -> 0.0420  (0.001)  : Math.pow(10, -3)
   * 4 decimalPlacesRawValue : 0.0041 -> 0.0042  (0.0001) : Math.pow(10, -4)
   * 4 decimalPlacesRawValue : 0.0004 -> 0.0005  (0.0001)
   * 4 decimalPlacesRawValue : 0.0000 -> 0.0001  (0.0001)
   *
   * @param {number} value
   * @param {boolean} isAddition
   * @param {int} decimalPlacesRawValue The precision needed by the `rawValue`
   * @returns {*}
   */
  static modifyAndRoundToNearestAuto(value, isAddition, decimalPlacesRawValue) {
    value = Number(this.forceDecimalPlaces(value, decimalPlacesRawValue));
    const absValue = Math.abs(value);
    if (absValue >= 0 && absValue < 1) {
      const rawValueMinimumOffset = Math.pow(10, -decimalPlacesRawValue);
      if (value === 0) {
        return isAddition ? rawValueMinimumOffset : -rawValueMinimumOffset;
      }
      let offset2;
      const minimumOffsetFirstDecimalPlaceIndex = decimalPlacesRawValue;
      const indexFirstNonZeroDecimalPlace = this.indexFirstNonZeroDecimalPlace(value);
      if (indexFirstNonZeroDecimalPlace >= minimumOffsetFirstDecimalPlaceIndex - 1) {
        offset2 = rawValueMinimumOffset;
      } else {
        offset2 = Math.pow(10, -(indexFirstNonZeroDecimalPlace + 1));
      }
      let result;
      if (isAddition) {
        result = value + offset2;
      } else {
        result = value - offset2;
      }
      return this.roundToNearest(result, offset2);
    } else {
      value = parseInt(value, 10);
      const lengthValue = Math.abs(value).toString().length;
      let pow;
      switch (lengthValue) {
        case 1:
          pow = 0;
          break;
        case 2:
        case 3:
          pow = 1;
          break;
        case 4:
        case 5:
          pow = 2;
          break;
        default:
          pow = lengthValue - 3;
      }
      const offset2 = Math.pow(10, pow);
      let result;
      if (isAddition) {
        result = value + offset2;
      } else {
        result = value - offset2;
      }
      if (result <= 10 && result >= -10) {
        return result;
      }
      return this.roundToNearest(result, offset2);
    }
  }
  /**
   * Return the 'nearest rounded' value automatically by adding the calculated offset to the initial value.
   * This will limit the result to the given number of decimal places `decimalPlacesLimit`.
   *
   * @param {number} value
   * @param {int} decimalPlacesLimit
   * @returns {*}
   */
  static addAndRoundToNearestAuto(value, decimalPlacesLimit) {
    return this.modifyAndRoundToNearestAuto(value, true, decimalPlacesLimit);
  }
  /**
   * Return the 'nearest rounded' value automatically by subtracting the calculated offset to the initial value.
   * This will limit the result to the given number of decimal places `decimalPlacesLimit`.
   *
   * @param {number} value
   * @param {int} decimalPlacesLimit
   * @returns {*}
   */
  static subtractAndRoundToNearestAuto(value, decimalPlacesLimit) {
    return this.modifyAndRoundToNearestAuto(value, false, decimalPlacesLimit);
  }
  /**
   * Take an arabic number as a string and return a javascript number.
   * By default, this function does not try to convert the arabic decimal and thousand separator characters.
   * This returns `NaN` is the conversion is not possible.
   * Based on http://stackoverflow.com/a/17025392/2834898
   *
   * @param {string} arabicNumbers
   * @param {boolean} returnANumber If `true`, return a Number, otherwise return a String
   * @param {boolean} parseDecimalCharacter
   * @param {boolean} parseThousandSeparator
   * @returns {string|number|NaN}
   */
  static arabicToLatinNumbers(arabicNumbers, returnANumber = true, parseDecimalCharacter = false, parseThousandSeparator = false) {
    if (this.isNull(arabicNumbers)) {
      return arabicNumbers;
    }
    let result = arabicNumbers.toString();
    if (result === "") {
      return arabicNumbers;
    }
    if (result.match(/[٠١٢٣٤٥٦٧٨٩۴۵۶]/g) === null) {
      if (returnANumber) {
        result = Number(result);
      }
      return result;
    }
    if (parseDecimalCharacter) {
      result = result.replace(/٫/, ".");
    }
    if (parseThousandSeparator) {
      result = result.replace(/٬/g, "");
    }
    result = result.replace(/[٠١٢٣٤٥٦٧٨٩]/g, (d) => d.charCodeAt(0) - 1632).replace(/[۰۱۲۳۴۵۶۷۸۹]/g, (d) => d.charCodeAt(0) - 1776);
    const resultAsNumber = Number(result);
    if (isNaN(resultAsNumber)) {
      return resultAsNumber;
    }
    if (returnANumber) {
      result = resultAsNumber;
    }
    return result;
  }
  /**
   * Create a custom event and immediately sent it from the given element.
   * By default, if no element is given, the event is thrown from `document`.
   *
   * @param {string} eventName
   * @param {HTMLElement|HTMLDocument|EventTarget} element
   * @param {object} detail
   * @param {boolean} bubbles Set to `true` if the event must bubble up
   * @param {boolean} cancelable Set to `true` if the event must be cancelable
   */
  static triggerEvent(eventName, element = document, detail = null, bubbles = true, cancelable = true) {
    let event;
    if (window.CustomEvent) {
      event = new CustomEvent(eventName, { detail, bubbles, cancelable });
    } else {
      event = document.createEvent("CustomEvent");
      event.initCustomEvent(eventName, bubbles, cancelable, { detail });
    }
    element.dispatchEvent(event);
  }
  /**
   * Function to parse minimumValue, maximumValue & the input value to prepare for testing to determine if the value falls within the min / max range.
   * Return an object example: minimumValue: "999999999999999.99" returns the following "{s: -1, e: 12, c: Array[15]}".
   *
   * This function is adapted from Big.js https://github.com/MikeMcl/big.js/. Many thanks to Mike.
   *
   * @param {number|string} n A numeric value.
   * @returns {{}}
   */
  static parseStr(n) {
    const x2 = {};
    let e;
    let i;
    let nL;
    let j;
    if (n === 0 && 1 / n < 0) {
      n = "-0";
    }
    n = n.toString();
    if (this.isNegativeStrict(n, "-")) {
      n = n.slice(1);
      x2.s = -1;
    } else {
      x2.s = 1;
    }
    e = n.indexOf(".");
    if (e > -1) {
      n = n.replace(".", "");
    }
    if (e < 0) {
      e = n.length;
    }
    i = n.search(/[1-9]/i) === -1 ? n.length : n.search(/[1-9]/i);
    nL = n.length;
    if (i === nL) {
      x2.e = 0;
      x2.c = [0];
    } else {
      for (j = nL - 1; n.charAt(j) === "0"; j -= 1) {
        nL -= 1;
      }
      nL -= 1;
      x2.e = e - i - 1;
      x2.c = [];
      for (e = 0; i <= nL; i += 1) {
        x2.c[e] = +n.charAt(i);
        e += 1;
      }
    }
    return x2;
  }
  /**
   * Function to test if the input value falls with the Min / Max settings.
   * This uses the parsed strings for the above parseStr function.
   *
   * This function is adapted from Big.js https://github.com/MikeMcl/big.js/. Many thanks to Mike.
   *
   * @param {object} y Big number instance
   * @param {object} x Big number instance
   * @returns {*}
   */
  static testMinMax(y, x2) {
    const xc = x2.c;
    const yc = y.c;
    let i = x2.s;
    let j = y.s;
    let k = x2.e;
    let l = y.e;
    if (!xc[0] || !yc[0]) {
      let result2;
      if (!xc[0]) {
        result2 = !yc[0] ? 0 : -j;
      } else {
        result2 = i;
      }
      return result2;
    }
    if (i !== j) {
      return i;
    }
    const xNeg = i < 0;
    if (k !== l) {
      return k > l ^ xNeg ? 1 : -1;
    }
    i = -1;
    k = xc.length;
    l = yc.length;
    j = k < l ? k : l;
    for (i += 1; i < j; i += 1) {
      if (xc[i] !== yc[i]) {
        return xc[i] > yc[i] ^ xNeg ? 1 : -1;
      }
    }
    let result;
    if (k === l) {
      result = 0;
    } else {
      result = k > l ^ xNeg ? 1 : -1;
    }
    return result;
  }
  /**
   * Generate a random string.
   * cf. http://stackoverflow.com/a/8084248/2834898
   *
   * @param {Number} strLength Length of the generated string (in character count)
   * @returns {string}
   */
  static randomString(strLength = 5) {
    return Math.random().toString(36).substr(2, strLength);
  }
  /**
   * Return the DOM element when passed either a DOM element or a selector string.
   *
   * @param {HTMLElement|string} domElementOrSelector
   * @returns {HTMLElement}
   */
  static domElement(domElementOrSelector) {
    let domElement;
    if (AutoNumericHelper.isString(domElementOrSelector)) {
      domElement = document.querySelector(domElementOrSelector);
    } else {
      domElement = domElementOrSelector;
    }
    return domElement;
  }
  /**
   * Retrieve the current element value.
   *
   * @param {HTMLElement|HTMLInputElement|EventTarget} element
   * @returns {number|string|null}
   */
  static getElementValue(element) {
    if (element.tagName.toLowerCase() === "input") {
      return element.value;
    }
    return this.text(element);
  }
  /**
   * Modify the element value directly.
   *
   * @param {HTMLElement|HTMLInputElement} element
   * @param {number|string|null} value
   */
  static setElementValue(element, value = null) {
    if (element.tagName.toLowerCase() === "input") {
      element.value = value;
    } else {
      element.textContent = value;
    }
  }
  /**
   * Set the invalid state for the given element.
   * A custom message can be passed as the second argument.
   * Note: This does not work with contenteditable elements
   *
   * @param {HTMLElement|HTMLInputElement} element
   * @param {string|null} message
   * @throws Error
   */
  static setInvalidState(element, message = "Invalid") {
    if (message === "" || this.isNull(message)) this.throwError("Cannot set the invalid state with an empty message.");
    element.setCustomValidity(message);
  }
  /**
   * Set the valid state for the given element.
   * Note: This does not work with contenteditable elements
   *
   * @param {HTMLElement|HTMLInputElement} element
   */
  static setValidState(element) {
    element.setCustomValidity("");
  }
  /**
   * This clone the given object, and return it.
   * WARNING: This does not do a deep cloning.
   * cf. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Examples
   * //TODO Add a `deep` option to clone object with more than one depth
   *
   * @param {object} obj
   * @returns {object}
   */
  static cloneObject(obj) {
    return Object.assign({}, obj);
  }
  /**
   * Return a 'camelized' version of the given string.
   * By default, this assume that :
   * - the separators are hyphens '-',
   * - the 'data-' string should be removed, and
   * - that the very first word should not be capitalized.
   *
   * @example camelize('data-currency-symbol') => 'currencySymbol'
   *
   * @param {string} str Text to camelize
   * @param {string} separator Character that separate each word
   * @param {boolean} removeData If set to `true`, remove the `data-` part that you can find on some html attributes
   * @param {boolean} skipFirstWord If set to `true`, do not capitalize the very first word
   * @returns {string|null}
   */
  static camelize(str, separator = "-", removeData = true, skipFirstWord = true) {
    if (this.isNull(str)) {
      return null;
    }
    if (removeData) {
      str = str.replace(/^data-/, "");
    }
    const words = str.split(separator);
    let result = words.map((word) => `${word.charAt(0).toUpperCase()}${word.slice(1)}`);
    result = result.join("");
    if (skipFirstWord) {
      result = `${result.charAt(0).toLowerCase()}${result.slice(1)}`;
    }
    return result;
  }
  /**
   * Return the text component of the given DOM element.
   *
   * @param {Element} domElement
   * @returns {string}
   */
  static text(domElement) {
    const nodeType = domElement.nodeType;
    let result;
    if (nodeType === Node.ELEMENT_NODE || nodeType === Node.DOCUMENT_NODE || nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
      result = domElement.textContent;
    } else if (nodeType === Node.TEXT_NODE) {
      result = domElement.nodeValue;
    } else {
      result = "";
    }
    return result;
  }
  /**
   * Set the text content of the given DOM element.
   * @param {Element} domElement
   * @param {string} text
   */
  static setText(domElement, text) {
    const nodeType = domElement.nodeType;
    if (nodeType === Node.ELEMENT_NODE || nodeType === Node.DOCUMENT_NODE || nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
      domElement.textContent = text;
    }
  }
  /**
   * Filter out the given `arr` array with the elements found in `excludedElements`.
   * This returns a new array and does not modify the source.
   * cf. verification here : http://codepen.io/AnotherLinuxUser/pen/XpvrMg?editors=0012
   *
   * @param {Array} arr
   * @param {Array} excludedElements
   * @returns {*|Array.<T>}
   */
  static filterOut(arr, excludedElements) {
    return arr.filter((element) => !this.isInArray(element, excludedElements));
  }
  /**
   * Remove the trailing zeros in the decimal part of a number.
   *
   * @param {string} numericString
   * @returns {*}
   */
  static trimPaddedZerosFromDecimalPlaces(numericString) {
    numericString = String(numericString);
    if (numericString === "") {
      return "";
    }
    const [integerPart, decimalPart] = numericString.split(".");
    if (this.isUndefinedOrNullOrEmpty(decimalPart)) {
      return integerPart;
    }
    const trimmedDecimalPart = decimalPart.replace(/0+$/g, "");
    let result;
    if (trimmedDecimalPart === "") {
      result = integerPart;
    } else {
      result = `${integerPart}.${trimmedDecimalPart}`;
    }
    return result;
  }
  /**
   * Return the top-most hovered item by the mouse cursor.
   *
   * @returns {*}
   */
  static getHoveredElement() {
    const hoveredElements = [...document.querySelectorAll(":hover")];
    return hoveredElements[hoveredElements.length - 1];
  }
  /**
   * Return the given array trimmed to the given length.
   * @example arrayTrim([1, 2, 3, 4], 2) -> [1, 2]
   *
   * @param {Array} array
   * @param {Number} length
   * @returns {*}
   */
  static arrayTrim(array, length) {
    const arrLength = array.length;
    if (arrLength === 0 || length > arrLength) {
      return array;
    }
    if (length < 0) {
      return [];
    }
    array.length = parseInt(length, 10);
    return array;
  }
  /**
   * Merge all the given arrays by keeping only unique elements, and return an array with de-duplicated values.
   * cf. http://stackoverflow.com/a/27664971/2834898
   *
   * @param {...array} arrays
   * @returns {[*]}
   */
  static arrayUnique(...arrays) {
    return [...new Set([].concat(...arrays))];
  }
  /**
   * Merge all the given Maps by keeping only unique elements, and return a new Map with de-duplicated keys.
   *
   * @param {...Map} mapObjects
   * @returns {Map}
   */
  static mergeMaps(...mapObjects) {
    return new Map(mapObjects.reduce((as, b) => as.concat([...b]), []));
  }
  /**
   * Search the given `value` in the object `obj`, and return the very first key it finds
   *
   * @param {object} obj
   * @param {string|number} value
   * @returns {*|null}
   */
  static objectKeyLookup(obj, value) {
    const result = Object.entries(obj).find((array) => array[1] === value);
    let key = null;
    if (result !== void 0) {
      key = result[0];
    }
    return key;
  }
  /**
   * Insert the single character `char` in the string `str` at the given position `index`
   *
   * @param {string} str
   * @param {string} char
   * @param {int} index
   * @returns {string}
   */
  static insertAt(str, char, index) {
    str = String(str);
    if (index > str.length) {
      throw new Error(`The given index is out of the string range.`);
    }
    if (char.length !== 1) {
      throw new Error("The given string `char` should be only one character long.");
    }
    if (str === "" && index === 0) {
      return char;
    }
    return `${str.slice(0, index)}${char}${str.slice(index)}`;
  }
  /**
   * Convert the given scientific notation to the 'expanded' decimal notation
   *
   * @example scientificToDecimal('-123.4567e-6') returns '-0.0001234567'
   *
   * @param {number|string} val
   * @returns {number|string}
   */
  static scientificToDecimal(val) {
    const numericValue = Number(val);
    if (isNaN(numericValue)) {
      return NaN;
    }
    val = String(val);
    const isScientific = this.contains(val, "e") || this.contains(val, "E");
    if (!isScientific) {
      return val;
    }
    let [value, exponent] = val.split(/e/i);
    const isNegative = value < 0;
    if (isNegative) {
      value = value.replace("-", "");
    }
    const isNegativeExponent = +exponent < 0;
    if (isNegativeExponent) {
      exponent = exponent.replace("-", "");
    }
    const [int, float] = value.split(/\./);
    let result;
    if (isNegativeExponent) {
      if (int.length > exponent) {
        result = this.insertAt(int, ".", int.length - exponent);
      } else {
        result = `0.${"0".repeat(exponent - int.length)}${int}`;
      }
      result = `${result}${float ? float : ""}`;
    } else {
      if (float) {
        value = `${int}${float}`;
        if (exponent < float.length) {
          result = this.insertAt(value, ".", +exponent + int.length);
        } else {
          result = `${value}${"0".repeat(exponent - float.length)}`;
        }
      } else {
        value = value.replace(".", "");
        result = `${value}${"0".repeat(Number(exponent))}`;
      }
    }
    if (isNegative) {
      result = `-${result}`;
    }
    return result;
  }
}
class Evaluator {
  constructor(ast) {
    if (ast === null) {
      throw new Error(`Invalid AST`);
    }
  }
  evaluate(subtree) {
    if (subtree === void 0 || subtree === null) {
      throw new Error(`Invalid AST sub-tree`);
    }
    if (subtree.type === "number") {
      return subtree.value;
    } else if (subtree.type === "unaryMinus") {
      return -this.evaluate(subtree.left);
    } else {
      const left = this.evaluate(subtree.left);
      const right = this.evaluate(subtree.right);
      switch (subtree.type) {
        case "op_+":
          return Number(left) + Number(right);
        case "op_-":
          return left - right;
        case "op_*":
          return left * right;
        case "op_/":
          return left / right;
        default:
          throw new Error(`Invalid operator '${subtree.type}'`);
      }
    }
  }
}
class ASTNode {
  /*
  constructor() {
      // this.type = void(0);
      // this.value = 0;
      // this.left = null;
      // this.right = null;
  }
  */
  static createNode(type, left, right) {
    const node = new ASTNode();
    node.type = type;
    node.left = left;
    node.right = right;
    return node;
  }
  static createUnaryNode(left) {
    const node = new ASTNode();
    node.type = "unaryMinus";
    node.left = left;
    node.right = null;
    return node;
  }
  static createLeaf(value) {
    const node = new ASTNode();
    node.type = "number";
    node.value = value;
    return node;
  }
}
class Token {
  constructor(type, value, symbol) {
    this.type = type;
    this.value = value;
    this.symbol = symbol;
  }
}
class Lexer {
  constructor(text) {
    this.text = text;
    this.textLength = text.length;
    this.index = 0;
    this.token = new Token("Error", 0, 0);
  }
  /**
   * Ignore white spaces and increment the index count until a non-space character is found
   * @private
   */
  _skipSpaces() {
    while (this.text[this.index] === " " && this.index <= this.textLength) {
      this.index++;
    }
  }
  /**
   * Return the current index
   *
   * @returns {number}
   */
  getIndex() {
    return this.index;
  }
  /**
   * Return the next token object
   *
   * @param {string} decimalCharacter The decimal character to use in the float numbers
   * @returns {Token}
   */
  getNextToken(decimalCharacter = ".") {
    this._skipSpaces();
    if (this.textLength === this.index) {
      this.token.type = "EOT";
      return this.token;
    }
    if (AutoNumericHelper.isDigit(this.text[this.index])) {
      this.token.type = "num";
      this.token.value = this._getNumber(decimalCharacter);
      return this.token;
    }
    this.token.type = "Error";
    switch (this.text[this.index]) {
      case "+":
        this.token.type = "+";
        break;
      case "-":
        this.token.type = "-";
        break;
      case "*":
        this.token.type = "*";
        break;
      case "/":
        this.token.type = "/";
        break;
      case "(":
        this.token.type = "(";
        break;
      case ")":
        this.token.type = ")";
        break;
    }
    if (this.token.type !== "Error") {
      this.token.symbol = this.text[this.index];
      this.index++;
    } else {
      throw new Error(`Unexpected token '${this.token.symbol}' at position '${this.token.index}' in the token function`);
    }
    return this.token;
  }
  /**
   * Return the integer or float number starting from the `this.index` string index
   *
   * @param {string} decimalCharacter The decimal character to use in the float numbers
   *
   * @returns {string}
   * @private
   */
  _getNumber(decimalCharacter) {
    this._skipSpaces();
    const startIndex = this.index;
    while (this.index <= this.textLength && AutoNumericHelper.isDigit(this.text[this.index])) {
      this.index++;
    }
    if (this.text[this.index] === decimalCharacter) {
      this.index++;
    }
    while (this.index <= this.textLength && AutoNumericHelper.isDigit(this.text[this.index])) {
      this.index++;
    }
    if (this.index === startIndex) {
      throw new Error(`No number has been found while it was expected`);
    }
    return this.text.substring(startIndex, this.index).replace(decimalCharacter, ".");
  }
}
class Parser {
  /**
   * Parse the given string, and generate an abstract syntax tree (AST) from the math expression
   *
   * @param {string} text
   * @param {string} customDecimalCharacter The custom decimal character to use in floats
   * @returns {ASTNode}
   */
  constructor(text, customDecimalCharacter = ".") {
    this.text = text;
    this.decimalCharacter = customDecimalCharacter;
    this.lexer = new Lexer(text);
    this.token = this.lexer.getNextToken(this.decimalCharacter);
    return this._exp();
  }
  _exp() {
    const termNode = this._term();
    const exprNode = this._moreExp();
    return ASTNode.createNode("op_+", termNode, exprNode);
  }
  _moreExp() {
    let termNode;
    let exprNode;
    switch (this.token.type) {
      case "+":
        this.token = this.lexer.getNextToken(this.decimalCharacter);
        termNode = this._term();
        exprNode = this._moreExp();
        return ASTNode.createNode("op_+", exprNode, termNode);
      case "-":
        this.token = this.lexer.getNextToken(this.decimalCharacter);
        termNode = this._term();
        exprNode = this._moreExp();
        return ASTNode.createNode("op_-", exprNode, termNode);
    }
    return ASTNode.createLeaf(0);
  }
  _term() {
    const factorNode = this._factor();
    const termsNode = this._moreTerms();
    return ASTNode.createNode("op_*", factorNode, termsNode);
  }
  _moreTerms() {
    let factorNode;
    let termsNode;
    switch (this.token.type) {
      case "*":
        this.token = this.lexer.getNextToken(this.decimalCharacter);
        factorNode = this._factor();
        termsNode = this._moreTerms();
        return ASTNode.createNode("op_*", termsNode, factorNode);
      case "/":
        this.token = this.lexer.getNextToken(this.decimalCharacter);
        factorNode = this._factor();
        termsNode = this._moreTerms();
        return ASTNode.createNode("op_/", termsNode, factorNode);
    }
    return ASTNode.createLeaf(1);
  }
  _factor() {
    let expression;
    let factor;
    let value;
    switch (this.token.type) {
      case "num":
        value = this.token.value;
        this.token = this.lexer.getNextToken(this.decimalCharacter);
        return ASTNode.createLeaf(value);
      case "-":
        this.token = this.lexer.getNextToken(this.decimalCharacter);
        factor = this._factor();
        return ASTNode.createUnaryNode(factor);
      case "(":
        this.token = this.lexer.getNextToken(this.decimalCharacter);
        expression = this._exp();
        this._match(")");
        return expression;
      default: {
        throw new Error(`Unexpected token '${this.token.symbol}' with type '${this.token.type}' at position '${this.token.index}' in the factor function`);
      }
    }
  }
  _match(expected) {
    const index = this.lexer.getIndex() - 1;
    if (this.text[index] === expected) {
      this.token = this.lexer.getNextToken(this.decimalCharacter);
    } else {
      throw new Error(`Unexpected token '${this.token.symbol}' at position '${index}' in the match function`);
    }
  }
}
/**
 *               AutoNumeric.js
 *
 * @version      4.10.5
 * @date         2024-02-06 UTC 20:14
 *
 * @authors      2016-2024 Alexandre Bonneau <alexandre.bonneau@linuxfr.eu>
 *               2009-2016 Bob Knothe <bob.knothe@gmail.com>
 * @contributors Sokolov Yura and others, cf. AUTHORS
 * @copyright    Alexandre Bonneau & Robert J. Knothe
 * @since        2009-08-09
 *
 * @summary      AutoNumeric is a standalone Javascript library
 *               that provides live *as-you-type* formatting for
 *               international numbers and currencies.
 *
 * @link         http://autonumeric.org
 * @docs         https://docs.autonumeric.org
 *
 *               Note : Some functions are borrowed from big.js
 * @see          https://github.com/MikeMcl/big.js/
 *
 * Please report any bugs to https://github.com/autoNumeric/autoNumeric
 *
 * @license      Released under the MIT License
 * @link         http://www.opensource.org/licenses/mit-license.php
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sub license, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
const _AutoNumeric = class _AutoNumeric {
  /**
   * Return the autoNumeric version number (for debugging purpose)
   *
   * @returns {string}
   */
  static version() {
    return "4.10.5";
  }
  /**
   * Initialize the AutoNumeric object onto the given DOM element, and attach the settings and related event listeners to it.
   * The options passed as a parameter is an object that contains the settings (i.e. {digitGroupSeparator: ".", decimalCharacter: ",", currencySymbol: '€ '})
   *
   * @example
   * anElement = new AutoNumeric(domElement); // With the default options
   * anElement = new AutoNumeric(domElement, { options }); // With one option object
   * anElement = new AutoNumeric(domElement, 'euroPos'); // With a named pre-defined string
   * anElement = new AutoNumeric(domElement, [{ options1 }, 'euroPos', { options2 }]); // With multiple option objects (the latest option overwriting the previous ones)
   * anElement = new AutoNumeric(domElement, null, { options }); // With one option object, and a failed initial value
   * anElement = new AutoNumeric(domElement).french(); // With one pre-defined language object
   * anElement = new AutoNumeric(domElement).french({ options });// With one pre-defined language object and additional options that will override the defaults
   *
   * // ...or init and set the value in one call :
   * anElement = new AutoNumeric(domElement, 12345.789); // With the default options, and an initial value
   * anElement = new AutoNumeric(domElement, 12345.789, { options });
   * anElement = new AutoNumeric(domElement, '12345.789', { options });
   * anElement = new AutoNumeric(domElement, 12345.789, 'euroPos');
   * anElement = new AutoNumeric(domElement, 12345.789, [{ options1 }, 'euroPos', { options2 }]);
   * anElement = new AutoNumeric(domElement, 12345.789).french({ options });
   * anElement = new AutoNumeric(domElement, 12345.789, { options }).french({ options }); // Not really helpful, but possible
   *
   * // The AutoNumeric constructor class can also accept a string as a css selector. Under the hood this use `QuerySelector` and limit itself to only the first element it finds.
   * anElement = new AutoNumeric('.myCssClass > input');
   * anElement = new AutoNumeric('.myCssClass > input', { options });
   * anElement = new AutoNumeric('.myCssClass > input', 'euroPos');
   * anElement = new AutoNumeric('.myCssClass > input', [{ options1 }, 'euroPos', { options2 }]);
   * anElement = new AutoNumeric('.myCssClass > input', 12345.789);
   * anElement = new AutoNumeric('.myCssClass > input', 12345.789, { options });
   * anElement = new AutoNumeric('.myCssClass > input', 12345.789, 'euroPos');
   * anElement = new AutoNumeric('.myCssClass > input', 12345.789, [{ options1 }, 'euroPos', { options2 }]);
   * anElement = new AutoNumeric('.myCssClass > input', null, { options }); // With a failed initial value
   * anElement = new AutoNumeric('.myCssClass > input', 12345.789).french({ options });
   *
   * @param {object|Array|number|string} arg1
   * @param {object|Array|number|string|null} arg2
   * @param {object|Array|number|string|null} arg3
   * @throws
   */
  constructor(arg1 = null, arg2 = null, arg3 = null) {
    const { domElement, initialValue, userOptions } = _AutoNumeric._setArgumentsValues(arg1, arg2, arg3);
    this.domElement = domElement;
    this.defaultRawValue = "";
    this._setSettings(userOptions, false);
    this._checkElement();
    this.savedCancellableValue = null;
    this.historyTable = [];
    this.historyTableIndex = -1;
    this.onGoingRedo = false;
    this.parentForm = this._getParentForm();
    if (!this.runOnce && this.settings.formatOnPageLoad) {
      this._formatDefaultValueOnPageLoad(initialValue);
    } else {
      let valueToSet;
      if (AutoNumericHelper.isNull(initialValue)) {
        switch (this.settings.emptyInputBehavior) {
          case _AutoNumeric.options.emptyInputBehavior.min:
            valueToSet = this.settings.minimumValue;
            break;
          case _AutoNumeric.options.emptyInputBehavior.max:
            valueToSet = this.settings.maximumValue;
            break;
          case _AutoNumeric.options.emptyInputBehavior.zero:
            valueToSet = "0";
            break;
          case _AutoNumeric.options.emptyInputBehavior.focus:
          case _AutoNumeric.options.emptyInputBehavior.press:
          case _AutoNumeric.options.emptyInputBehavior.always:
            valueToSet = "";
            break;
          case _AutoNumeric.options.emptyInputBehavior.null:
            valueToSet = null;
            break;
          default:
            valueToSet = this.settings.emptyInputBehavior;
        }
      } else {
        valueToSet = initialValue;
      }
      this._setElementAndRawValue(valueToSet);
    }
    this.runOnce = true;
    this.hasEventListeners = false;
    if (this.isInputElement || this.isContentEditable) {
      if (!this.settings.noEventListeners) {
        this._createEventListeners();
      }
      this._setWritePermissions(true);
    }
    this._saveInitialValues(initialValue);
    this.storageNamePrefix = "AUTO_";
    this._setPersistentStorageName();
    this.validState = true;
    this.isFocused = false;
    this.isWheelEvent = false;
    this.isDropEvent = false;
    this.isEditing = false;
    this.rawValueOnFocus = void 0;
    this.internalModification = false;
    this.attributeToWatch = this._getAttributeToWatch();
    this.getterSetter = Object.getOwnPropertyDescriptor(this.domElement.__proto__, this.attributeToWatch);
    this._addWatcher();
    if (this.settings.createLocalList) {
      this._createLocalList();
    }
    this.constructor._addToGlobalList(this);
    this.global = {
      /**
       * Set the same given element value for each element in the local AutoNumeric element list, and format those elements immediately
       *
       * @param {number|string} newValue The value must be a number or a numeric string
       * @param {object} options A settings object that will override the current settings. Note: the update is done only if the `newValue` is defined.
       */
      set: (newValue, options = null) => {
        this.autoNumericLocalList.forEach((aNObject) => {
          aNObject.set(newValue, options);
        });
      },
      /**
       * Set the value given value directly as the DOM element value, without formatting it beforehand.
       * This sets the same unformatted value for each element in the local AutoNumeric element list.
       *
       * @param {number|string} value
       * @param {object} options
       */
      setUnformatted: (value, options = null) => {
        this.autoNumericLocalList.forEach((aNObject) => {
          aNObject.setUnformatted(value, options);
        });
      },
      /**
       * This is an alias of the `getNumericString()` function, and should not be used anymore.
       *
       * @param {function|null} callback If a callback is passed, then the result is passed to it as its first argument, and the AutoNumeric object has its second
       * @returns {Array<string>}
       * @deprecated
       */
      get: (callback = null) => {
        const result = [];
        this.autoNumericLocalList.forEach((aNObject) => {
          result.push(aNObject.get());
        });
        this._executeCallback(result, callback);
        return result;
      },
      /**
       * Return an array of the unformatted values (as a string) of each AutoNumeric element of the local AutoNumeric element list
       *
       * @param {function|null} callback If a callback is passed, then the result is passed to it as its first argument, and the AutoNumeric object has its second
       * @returns {Array<string>}
       */
      getNumericString: (callback = null) => {
        const result = [];
        this.autoNumericLocalList.forEach((aNObject) => {
          result.push(aNObject.getNumericString());
        });
        this._executeCallback(result, callback);
        return result;
      },
      /**
       * Return an array of the current formatted values (as a string) of each AutoNumeric element of the local AutoNumeric element list
       *
       * @param {function|null} callback If a callback is passed, then the result is passed to it as its first argument, and the AutoNumeric object has its second
       * @returns {Array<string>}
       */
      getFormatted: (callback = null) => {
        const result = [];
        this.autoNumericLocalList.forEach((aNObject) => {
          result.push(aNObject.getFormatted());
        });
        this._executeCallback(result, callback);
        return result;
      },
      /**
       * Return an array of the element unformatted values (as a real Javascript number), for each element of the local AutoNumeric element list
       *
       * @param {function|null} callback If a callback is passed, then the result is passed to it as its first argument, and the AutoNumeric object has its second
       * @returns {Array<number>}
       */
      getNumber: (callback = null) => {
        const result = [];
        this.autoNumericLocalList.forEach((aNObject) => {
          result.push(aNObject.getNumber());
        });
        this._executeCallback(result, callback);
        return result;
      },
      /**
       * Returns the unformatted values (following the `outputFormat` setting) of each element of the local AutoNumeric element list into an array
       *
       * @param {function|null} callback If a callback is passed, then the result is passed to it as its first argument, and the AutoNumeric object has its second
       * @returns {Array<string>}
       */
      getLocalized: (callback = null) => {
        const result = [];
        this.autoNumericLocalList.forEach((aNObject) => {
          result.push(aNObject.getLocalized());
        });
        this._executeCallback(result, callback);
        return result;
      },
      /**
       * Force each element of the local AutoNumeric element list to reformat its value
       */
      reformat: () => {
        this.autoNumericLocalList.forEach((aNObject) => {
          aNObject.reformat();
        });
      },
      /**
       * Remove the formatting and keep only the raw unformatted value (as a numericString) in each element of the local AutoNumeric element list
       */
      unformat: () => {
        this.autoNumericLocalList.forEach((aNObject) => {
          aNObject.unformat();
        });
      },
      /**
       * Remove the formatting and keep only the localized unformatted value in the element, with the option to override the default outputFormat if needed
       *
       * @param {null|string} forcedOutputFormat If set to something different from `null`, then this is used as an overriding outputFormat option
       */
      unformatLocalized: (forcedOutputFormat = null) => {
        this.autoNumericLocalList.forEach((aNObject) => {
          aNObject.unformatLocalized(forcedOutputFormat);
        });
      },
      /**
       * Updates the AutoNumeric settings, and immediately format the elements accordingly, for each element of the local AutoNumeric element list
       *
       * @param {object} newOptions This can be either one or more option objects
       */
      update: (...newOptions) => {
        this.autoNumericLocalList.forEach((aNObject) => {
          aNObject.update(...newOptions);
        });
      },
      /**
       * Return `true` if *all* the autoNumeric-managed elements are pristine, if their raw value hasn't changed.
       * By default, this returns `true` if the raw unformatted value is still the same even if the formatted one has changed (due to a configuration update for instance).
       *
       * @param {boolean} checkOnlyRawValue If set to `true`, the pristine value is done on the raw unformatted value, not the formatted one. If set to `false`, this also checks that the formatted value hasn't changed.
       * @returns {boolean}
       */
      isPristine: (checkOnlyRawValue = true) => {
        let isPristine = true;
        this.autoNumericLocalList.forEach((aNObject) => {
          if (isPristine && !aNObject.isPristine(checkOnlyRawValue)) {
            isPristine = false;
          }
        });
        return isPristine;
      },
      /**
       * Execute the `clear()` method on each AutoNumeric object in the local AutoNumeric element list
       *
       * @param {boolean} forceClearAll
       */
      clear: (forceClearAll = false) => {
        this.autoNumericLocalList.forEach((aNObject) => {
          aNObject.clear(forceClearAll);
        });
      },
      /**
       * Execute the `remove()` method on each AutoNumeric object in the local AutoNumeric element list
       */
      remove: () => {
        this.autoNumericLocalList.forEach((aNObject) => {
          aNObject.remove();
        });
      },
      /**
       * Execute the `wipe()` method on each AutoNumeric object in the local AutoNumeric element list
       */
      wipe: () => {
        this.autoNumericLocalList.forEach((aNObject) => {
          aNObject.wipe();
        });
      },
      /**
       * Execute the `nuke()` method on each AutoNumeric object in the local AutoNumeric element list
       */
      nuke: () => {
        this.autoNumericLocalList.forEach((aNObject) => {
          aNObject.nuke();
        });
      },
      /**
       * Return `true` if the given AutoNumeric object (or DOM element) is in the local AutoNumeric element list
       *
       * @param {HTMLElement|HTMLInputElement|AutoNumeric} domElementOrAutoNumericObject
       * @returns {*}
       */
      has: (domElementOrAutoNumericObject) => {
        let result;
        if (domElementOrAutoNumericObject instanceof _AutoNumeric) {
          result = this.autoNumericLocalList.has(domElementOrAutoNumericObject.node());
        } else {
          result = this.autoNumericLocalList.has(domElementOrAutoNumericObject);
        }
        return result;
      },
      /**
       * Add an existing AutoNumeric object (or DOM element) to the local AutoNumeric element list, using the DOM element as the key.
       * This manages the case where `addObject` is used on an AutoNumeric object that already has multiple elements in its local list.
       *
       * @param {HTMLElement|HTMLInputElement|AutoNumeric} domElementOrAutoNumericObject
       */
      addObject: (domElementOrAutoNumericObject) => {
        let domElement2;
        let otherAutoNumericObject;
        if (domElementOrAutoNumericObject instanceof _AutoNumeric) {
          domElement2 = domElementOrAutoNumericObject.node();
          otherAutoNumericObject = domElementOrAutoNumericObject;
        } else {
          domElement2 = domElementOrAutoNumericObject;
          otherAutoNumericObject = _AutoNumeric.getAutoNumericElement(domElement2);
        }
        if (!this._hasLocalList()) {
          this._createLocalList();
        }
        let otherANLocalList = otherAutoNumericObject._getLocalList();
        if (otherANLocalList.size === 0) {
          otherAutoNumericObject._createLocalList();
          otherANLocalList = otherAutoNumericObject._getLocalList();
        }
        let mergedLocalLists;
        if (otherANLocalList instanceof Map) {
          mergedLocalLists = AutoNumericHelper.mergeMaps(this._getLocalList(), otherANLocalList);
        } else {
          this._addToLocalList(domElement2, otherAutoNumericObject);
          mergedLocalLists = this._getLocalList();
        }
        mergedLocalLists.forEach((aNObject) => {
          aNObject._setLocalList(mergedLocalLists);
        });
      },
      /**
       * Remove the given AutoNumeric object (or DOM element) from the local AutoNumeric element list, using the DOM element as the key.
       * If this function attempts to remove the current AutoNumeric object from the local list, a warning is shown, but the deletion is still done.
       *
       * Special cases :
       * - If the current object removes itself, then it's removed from the shared local list, then a new empty local list is used/created
       * - If another object remove this object, then a local list with only this object is used/created
       *
       * @param {HTMLElement|HTMLInputElement|AutoNumeric} domElementOrAutoNumericObject
       * @param {boolean} keepCurrentANObject If set to `false`, then the function will also remove the current AutoNumeric object if asked, otherwise it will ignore it and print a warning message
       */
      removeObject: (domElementOrAutoNumericObject, keepCurrentANObject = false) => {
        let domElement2;
        let otherAutoNumericObject;
        if (domElementOrAutoNumericObject instanceof _AutoNumeric) {
          domElement2 = domElementOrAutoNumericObject.node();
          otherAutoNumericObject = domElementOrAutoNumericObject;
        } else {
          domElement2 = domElementOrAutoNumericObject;
          otherAutoNumericObject = _AutoNumeric.getAutoNumericElement(domElement2);
        }
        const initialCompleteLocalList = this.autoNumericLocalList;
        this.autoNumericLocalList.delete(domElement2);
        initialCompleteLocalList.forEach((aNObject) => {
          aNObject._setLocalList(this.autoNumericLocalList);
        });
        if (!keepCurrentANObject && domElement2 === this.node()) {
          otherAutoNumericObject._setLocalList(/* @__PURE__ */ new Map());
        } else {
          otherAutoNumericObject._createLocalList();
        }
      },
      /**
       * Remove all elements from the shared list, effectively emptying it.
       * This is the equivalent of calling `detach()` on each of its elements.
       *
       * @param {boolean} keepEachANObjectInItsOwnList If set to `true`, then instead of completely emptying the local list of each AutoNumeric objects, each one of those keeps itself in its own local list
       */
      empty: (keepEachANObjectInItsOwnList = false) => {
        const initialCompleteLocalList = this.autoNumericLocalList;
        initialCompleteLocalList.forEach((aNObject) => {
          if (keepEachANObjectInItsOwnList) {
            aNObject._createLocalList();
          } else {
            aNObject._setLocalList(/* @__PURE__ */ new Map());
          }
        });
      },
      /**
       * Return an array containing all the AutoNumeric DOM elements that have been initialized by each other
       *
       * @returns {Array<HTMLElement>}
       */
      elements: () => {
        const result = [];
        this.autoNumericLocalList.forEach((aNObject) => {
          result.push(aNObject.node());
        });
        return result;
      },
      /**
       * Return the `Map` object directly
       * @returns {Map}
       */
      getList: () => this.autoNumericLocalList,
      /**
       * Return the number of element in the local AutoNumeric element list
       * @returns {number}
       */
      size: () => this.autoNumericLocalList.size
    };
    this.options = {
      /**
       * Reset any options set previously, by overwriting them with the default settings
       *
       * @returns {AutoNumeric}
       */
      reset: () => {
        this.settings = { rawValue: this.defaultRawValue };
        this.update(_AutoNumeric.defaultSettings);
        return this;
      },
      allowDecimalPadding: (allowDecimalPadding) => {
        this.update({ allowDecimalPadding });
        return this;
      },
      alwaysAllowDecimalCharacter: (alwaysAllowDecimalCharacter) => {
        this.update({ alwaysAllowDecimalCharacter });
        return this;
      },
      caretPositionOnFocus: (caretPositionOnFocus) => {
        this.settings.caretPositionOnFocus = caretPositionOnFocus;
        return this;
      },
      createLocalList: (createLocalList) => {
        this.settings.createLocalList = createLocalList;
        if (this.settings.createLocalList) {
          if (!this._hasLocalList()) {
            this._createLocalList();
          }
        } else {
          this._deleteLocalList();
        }
        return this;
      },
      currencySymbol: (currencySymbol) => {
        this.update({ currencySymbol });
        return this;
      },
      currencySymbolPlacement: (currencySymbolPlacement) => {
        this.update({ currencySymbolPlacement });
        return this;
      },
      decimalCharacter: (decimalCharacter) => {
        this.update({ decimalCharacter });
        return this;
      },
      decimalCharacterAlternative: (decimalCharacterAlternative) => {
        this.settings.decimalCharacterAlternative = decimalCharacterAlternative;
        return this;
      },
      /**
       * Update the decimal places globally, which means this override any previously set number of decimal shown on focus, on blur, or in the raw value.
       *
       * @param {int} decimalPlaces
       * @returns {AutoNumeric}
       */
      decimalPlaces: (decimalPlaces) => {
        AutoNumericHelper.warning("Using `options.decimalPlaces()` instead of calling the specific `options.decimalPlacesRawValue()`, `options.decimalPlacesShownOnFocus()` and `options.decimalPlacesShownOnBlur()` methods will reset those options.\nPlease call the specific methods if you do not want to reset those.", this.settings.showWarnings);
        this.update({ decimalPlaces });
        return this;
      },
      decimalPlacesRawValue: (decimalPlacesRawValue) => {
        this.update({ decimalPlacesRawValue });
        return this;
      },
      decimalPlacesShownOnBlur: (decimalPlacesShownOnBlur) => {
        this.update({ decimalPlacesShownOnBlur });
        return this;
      },
      decimalPlacesShownOnFocus: (decimalPlacesShownOnFocus) => {
        this.update({ decimalPlacesShownOnFocus });
        return this;
      },
      defaultValueOverride: (defaultValueOverride) => {
        this.update({ defaultValueOverride });
        return this;
      },
      digitalGroupSpacing: (digitalGroupSpacing) => {
        this.update({ digitalGroupSpacing });
        return this;
      },
      digitGroupSeparator: (digitGroupSeparator) => {
        this.update({ digitGroupSeparator });
        return this;
      },
      divisorWhenUnfocused: (divisorWhenUnfocused) => {
        this.update({ divisorWhenUnfocused });
        return this;
      },
      emptyInputBehavior: (emptyInputBehavior) => {
        if (this.rawValue === null && emptyInputBehavior !== _AutoNumeric.options.emptyInputBehavior.null) {
          AutoNumericHelper.warning(`You are trying to modify the \`emptyInputBehavior\` option to something different than \`'null'\` (${emptyInputBehavior}), but the element raw value is currently set to \`null\`. This would result in an invalid \`rawValue\`. In order to fix that, the element value has been changed to the empty string \`''\`.`, this.settings.showWarnings);
          this.rawValue = "";
        }
        this.update({ emptyInputBehavior });
        return this;
      },
      eventBubbles: (eventBubbles) => {
        this.settings.eventBubbles = eventBubbles;
        return this;
      },
      eventIsCancelable: (eventIsCancelable) => {
        this.settings.eventIsCancelable = eventIsCancelable;
        return this;
      },
      failOnUnknownOption: (failOnUnknownOption) => {
        this.settings.failOnUnknownOption = failOnUnknownOption;
        return this;
      },
      formatOnPageLoad: (formatOnPageLoad) => {
        this.settings.formatOnPageLoad = formatOnPageLoad;
        return this;
      },
      formulaMode: (formulaMode) => {
        this.settings.formulaMode = formulaMode;
        return this;
      },
      historySize: (historySize) => {
        this.settings.historySize = historySize;
        return this;
      },
      invalidClass: (invalidClass) => {
        this.settings.invalidClass = invalidClass;
        return this;
      },
      isCancellable: (isCancellable) => {
        this.settings.isCancellable = isCancellable;
        return this;
      },
      leadingZero: (leadingZero) => {
        this.update({ leadingZero });
        return this;
      },
      maximumValue: (maximumValue) => {
        this.update({ maximumValue });
        return this;
      },
      minimumValue: (minimumValue) => {
        this.update({ minimumValue });
        return this;
      },
      modifyValueOnUpDownArrow: (modifyValueOnUpDownArrow) => {
        this.settings.modifyValueOnUpDownArrow = modifyValueOnUpDownArrow;
        return this;
      },
      modifyValueOnWheel: (modifyValueOnWheel) => {
        this.settings.modifyValueOnWheel = modifyValueOnWheel;
        return this;
      },
      negativeBracketsTypeOnBlur: (negativeBracketsTypeOnBlur) => {
        this.update({ negativeBracketsTypeOnBlur });
        return this;
      },
      negativePositiveSignPlacement: (negativePositiveSignPlacement) => {
        this.update({ negativePositiveSignPlacement });
        return this;
      },
      negativeSignCharacter: (negativeSignCharacter) => {
        this.update({ negativeSignCharacter });
        return this;
      },
      negativePositiveSignBehavior: (negativePositiveSignBehavior) => {
        this.settings.negativePositiveSignBehavior = negativePositiveSignBehavior;
        return this;
      },
      noEventListeners: (noEventListeners) => {
        if (noEventListeners === _AutoNumeric.options.noEventListeners.noEvents && this.settings.noEventListeners === _AutoNumeric.options.noEventListeners.addEvents) {
          this._removeEventListeners();
        }
        this.update({ noEventListeners });
        return this;
      },
      onInvalidPaste: (onInvalidPaste) => {
        this.settings.onInvalidPaste = onInvalidPaste;
        return this;
      },
      outputFormat: (outputFormat) => {
        this.settings.outputFormat = outputFormat;
        return this;
      },
      overrideMinMaxLimits: (overrideMinMaxLimits) => {
        this.update({ overrideMinMaxLimits });
        return this;
      },
      positiveSignCharacter: (positiveSignCharacter) => {
        this.update({ positiveSignCharacter });
        return this;
      },
      rawValueDivisor: (rawValueDivisor) => {
        this.update({ rawValueDivisor });
        return this;
      },
      readOnly: (readOnly) => {
        this.settings.readOnly = readOnly;
        this._setWritePermissions();
        return this;
      },
      roundingMethod: (roundingMethod) => {
        this.update({ roundingMethod });
        return this;
      },
      saveValueToSessionStorage: (saveValueToSessionStorage) => {
        this.update({ saveValueToSessionStorage });
        return this;
      },
      symbolWhenUnfocused: (symbolWhenUnfocused) => {
        this.update({ symbolWhenUnfocused });
        return this;
      },
      selectNumberOnly: (selectNumberOnly) => {
        this.settings.selectNumberOnly = selectNumberOnly;
        return this;
      },
      selectOnFocus: (selectOnFocus) => {
        this.settings.selectOnFocus = selectOnFocus;
        return this;
      },
      serializeSpaces: (serializeSpaces) => {
        this.settings.serializeSpaces = serializeSpaces;
        return this;
      },
      showOnlyNumbersOnFocus: (showOnlyNumbersOnFocus) => {
        this.update({ showOnlyNumbersOnFocus });
        return this;
      },
      showPositiveSign: (showPositiveSign) => {
        this.update({ showPositiveSign });
        return this;
      },
      showWarnings: (showWarnings) => {
        this.settings.showWarnings = showWarnings;
        return this;
      },
      styleRules: (styleRules) => {
        this.update({ styleRules });
        return this;
      },
      suffixText: (suffixText) => {
        this.update({ suffixText });
        return this;
      },
      unformatOnHover: (unformatOnHover) => {
        this.settings.unformatOnHover = unformatOnHover;
        return this;
      },
      unformatOnSubmit: (unformatOnSubmit) => {
        this.settings.unformatOnSubmit = unformatOnSubmit;
        return this;
      },
      upDownStep: (upDownStep) => {
        this.settings.upDownStep = upDownStep;
        return this;
      },
      valuesToStrings: (valuesToStrings) => {
        this.update({ valuesToStrings });
        return this;
      },
      watchExternalChanges: (watchExternalChanges) => {
        this.update({ watchExternalChanges });
        return this;
      },
      wheelOn: (wheelOn) => {
        this.settings.wheelOn = wheelOn;
        return this;
      },
      wheelStep: (wheelStep) => {
        this.settings.wheelStep = wheelStep;
        return this;
      }
    };
    this._triggerEvent(_AutoNumeric.events.initialized, this.domElement, {
      newValue: AutoNumericHelper.getElementValue(this.domElement),
      newRawValue: this.rawValue,
      error: null,
      aNElement: this
    });
  }
  /**
   * Take the parameters given to the AutoNumeric object, and output the three variables that are needed to finish initializing it :
   * - domElement : The target DOM element
   * - initialValue : The initial value, or `null` if none is given
   * - userOptions : The option object
   *
   * @param {object|Array|number|string} arg1
   * @param {object|Array|number|string|null} arg2
   * @param {object|Array|number|string|null} arg3
   * @returns {{domElement: *, initialValue: *, userOptions: *}}
   * @throws
   * @private
   */
  static _setArgumentsValues(arg1, arg2, arg3) {
    if (AutoNumericHelper.isNull(arg1)) {
      AutoNumericHelper.throwError("At least one valid parameter is needed in order to initialize an AutoNumeric object");
    }
    const isArg1Element = AutoNumericHelper.isElement(arg1);
    const isArg1String = AutoNumericHelper.isString(arg1);
    const isArg2Object = AutoNumericHelper.isObject(arg2);
    const isArg2Array = Array.isArray(arg2) && arg2.length > 0;
    const isArg2Number = AutoNumericHelper.isNumberOrArabic(arg2) || arg2 === "";
    const isArg2PreDefinedOptionName = this._isPreDefinedOptionValid(arg2);
    const isArg2Null = AutoNumericHelper.isNull(arg2);
    const isArg2EmptyString = AutoNumericHelper.isEmptyString(arg2);
    const isArg3Object = AutoNumericHelper.isObject(arg3);
    const isArg3Array = Array.isArray(arg3) && arg3.length > 0;
    const isArg3Null = AutoNumericHelper.isNull(arg3);
    const isArg3PreDefinedOptionName = this._isPreDefinedOptionValid(arg3);
    let domElement;
    let userOptions;
    let initialValue;
    if (isArg1Element && isArg2Null && isArg3Null) {
      domElement = arg1;
      initialValue = null;
      userOptions = null;
    } else if (isArg1Element && isArg2Number && isArg3Null) {
      domElement = arg1;
      initialValue = arg2;
      userOptions = null;
    } else if (isArg1Element && isArg2Object && isArg3Null) {
      domElement = arg1;
      initialValue = null;
      userOptions = arg2;
    } else if (isArg1Element && isArg2PreDefinedOptionName && isArg3Null) {
      domElement = arg1;
      initialValue = null;
      userOptions = this._getOptionObject(arg2);
    } else if (isArg1Element && isArg2Array && isArg3Null) {
      domElement = arg1;
      initialValue = null;
      userOptions = this.mergeOptions(arg2);
    } else if (isArg1Element && (isArg2Null || isArg2EmptyString) && isArg3Object) {
      domElement = arg1;
      initialValue = null;
      userOptions = arg3;
    } else if (isArg1Element && (isArg2Null || isArg2EmptyString) && isArg3Array) {
      domElement = arg1;
      initialValue = null;
      userOptions = this.mergeOptions(arg3);
    } else if (isArg1String && isArg2Null && isArg3Null) {
      domElement = document.querySelector(arg1);
      initialValue = null;
      userOptions = null;
    } else if (isArg1String && isArg2Object && isArg3Null) {
      domElement = document.querySelector(arg1);
      initialValue = null;
      userOptions = arg2;
    } else if (isArg1String && isArg2PreDefinedOptionName && isArg3Null) {
      domElement = document.querySelector(arg1);
      initialValue = null;
      userOptions = this._getOptionObject(arg2);
    } else if (isArg1String && isArg2Array && isArg3Null) {
      domElement = document.querySelector(arg1);
      initialValue = null;
      userOptions = this.mergeOptions(arg2);
    } else if (isArg1String && (isArg2Null || isArg2EmptyString) && isArg3Object) {
      domElement = document.querySelector(arg1);
      initialValue = null;
      userOptions = arg3;
    } else if (isArg1String && (isArg2Null || isArg2EmptyString) && isArg3Array) {
      domElement = document.querySelector(arg1);
      initialValue = null;
      userOptions = this.mergeOptions(arg3);
    } else if (isArg1String && isArg2Number && isArg3Null) {
      domElement = document.querySelector(arg1);
      initialValue = arg2;
      userOptions = null;
    } else if (isArg1String && isArg2Number && isArg3Object) {
      domElement = document.querySelector(arg1);
      initialValue = arg2;
      userOptions = arg3;
    } else if (isArg1String && isArg2Number && isArg3PreDefinedOptionName) {
      domElement = document.querySelector(arg1);
      initialValue = arg2;
      userOptions = this._getOptionObject(arg3);
    } else if (isArg1String && isArg2Number && isArg3Array) {
      domElement = document.querySelector(arg1);
      initialValue = arg2;
      userOptions = this.mergeOptions(arg3);
    } else if (isArg1Element && isArg2Number && isArg3Object) {
      domElement = arg1;
      initialValue = arg2;
      userOptions = arg3;
    } else if (isArg1Element && isArg2Number && isArg3PreDefinedOptionName) {
      domElement = arg1;
      initialValue = arg2;
      userOptions = this._getOptionObject(arg3);
    } else if (isArg1Element && isArg2Number && isArg3Array) {
      domElement = arg1;
      initialValue = arg2;
      userOptions = this.mergeOptions(arg3);
    } else {
      AutoNumericHelper.throwError(`The parameters given to the AutoNumeric object are not valid, '${arg1}', '${arg2}' and '${arg3}' given.`);
    }
    if (AutoNumericHelper.isNull(domElement)) {
      AutoNumericHelper.throwError(`The selector '${arg1}' did not select any valid DOM element. Please check on which element you called AutoNumeric.`);
    }
    return { domElement, initialValue, userOptions };
  }
  /**
   * Merge the option objects found in the given array `optionsArray`.
   * If a `string` is found, then we try to get the related pre-defined option using that string as its name.
   * When merging the options, the latest option overwrite any previously set. This allows to fine tune a pre-defined option for instance.
   *
   * @param {Array<object|string>} optionsArray
   * @returns {{}}
   */
  static mergeOptions(optionsArray) {
    const mergedOptions = {};
    optionsArray.forEach((optionObjectOrPredefinedOptionString) => {
      Object.assign(mergedOptions, this._getOptionObject(optionObjectOrPredefinedOptionString));
    });
    return mergedOptions;
  }
  /**
   * Return `true` if the given pre-defined option name is an attribute of the `AutoNumeric.predefinedOptions` object
   *
   * @param {string} preDefinedOptionName
   * @returns {boolean}
   * @private
   */
  static _isPreDefinedOptionValid(preDefinedOptionName) {
    return Object.prototype.hasOwnProperty.call(_AutoNumeric.predefinedOptions, preDefinedOptionName);
  }
  /**
   * Return an option object based on the given parameter.
   * If `optionObjectOrPredefinedName` is as string, then we retrieve the pre-defined option object, if it's an object, we use it as is.
   *
   * @param {object|string} optionObjectOrPredefinedName
   * @returns {object}
   */
  static _getOptionObject(optionObjectOrPredefinedName) {
    let options;
    if (AutoNumericHelper.isString(optionObjectOrPredefinedName)) {
      options = _AutoNumeric.getPredefinedOptions()[optionObjectOrPredefinedName];
      if (options === void 0 || options === null) {
        AutoNumericHelper.warning(`The given pre-defined option [${optionObjectOrPredefinedName}] is not recognized by autoNumeric. Please check that pre-defined option name.`, true);
      }
    } else {
      options = optionObjectOrPredefinedName;
    }
    return options;
  }
  /**
   * Save the initial element values for later use in the pristine test.
   * Those values are :
   * - the html attribute (i.e. <input value='42'>), and
   * - the script `value` (i.e. `let domElement.value`)
   *
   * @param {null|number|string} initialValue
   * @private
   */
  _saveInitialValues(initialValue) {
    this.initialValueHtmlAttribute = AutoNumericHelper.scientificToDecimal(this.domElement.getAttribute("value"));
    if (AutoNumericHelper.isNull(this.initialValueHtmlAttribute)) {
      this.initialValueHtmlAttribute = "";
    }
    this.initialValue = initialValue;
    if (AutoNumericHelper.isNull(this.initialValue)) {
      this.initialValue = "";
    }
  }
  /**
   * Generate all the event listeners for the given DOM element
   * @private
   */
  _createEventListeners() {
    this.formulaMode = false;
    this._onFocusInFunc = (e) => {
      this._onFocusIn(e);
    };
    this._onFocusInAndMouseEnterFunc = (e) => {
      this._onFocusInAndMouseEnter(e);
    };
    this._onFocusFunc = () => {
      this._onFocus();
    };
    this._onKeydownFunc = (e) => {
      this._onKeydown(e);
    };
    this._onKeypressFunc = (e) => {
      this._onKeypress(e);
    };
    this._onKeyupFunc = (e) => {
      this._onKeyup(e);
    };
    this._onFocusOutAndMouseLeaveFunc = (e) => {
      this._onFocusOutAndMouseLeave(e);
    };
    this._onPasteFunc = (e) => {
      this._onPaste(e);
    };
    this._onWheelFunc = (e) => {
      this._onWheel(e);
    };
    this._onDropFunc = (e) => {
      this._onDrop(e);
    };
    this._onKeydownGlobalFunc = (e) => {
      this._onKeydownGlobal(e);
    };
    this._onKeyupGlobalFunc = (e) => {
      this._onKeyupGlobal(e);
    };
    this.domElement.addEventListener("focusin", this._onFocusInFunc, false);
    this.domElement.addEventListener("focus", this._onFocusInAndMouseEnterFunc, false);
    this.domElement.addEventListener("focus", this._onFocusFunc, false);
    this.domElement.addEventListener("mouseenter", this._onFocusInAndMouseEnterFunc, false);
    this.domElement.addEventListener("keydown", this._onKeydownFunc, false);
    this.domElement.addEventListener("keypress", this._onKeypressFunc, false);
    this.domElement.addEventListener("keyup", this._onKeyupFunc, false);
    this.domElement.addEventListener("blur", this._onFocusOutAndMouseLeaveFunc, false);
    this.domElement.addEventListener("mouseleave", this._onFocusOutAndMouseLeaveFunc, false);
    this.domElement.addEventListener("paste", this._onPasteFunc, false);
    this.domElement.addEventListener("wheel", this._onWheelFunc, false);
    this.domElement.addEventListener("drop", this._onDropFunc, false);
    this._setupFormListener();
    this.hasEventListeners = true;
    if (!_AutoNumeric._doesGlobalListExists()) {
      document.addEventListener("keydown", this._onKeydownGlobalFunc, false);
      document.addEventListener("keyup", this._onKeyupGlobalFunc, false);
    }
  }
  /**
   * Remove all the autoNumeric-related event listeners for the given DOM element
   * @private
   */
  _removeEventListeners() {
    this.domElement.removeEventListener("focusin", this._onFocusInFunc, false);
    this.domElement.removeEventListener("focus", this._onFocusInAndMouseEnterFunc, false);
    this.domElement.removeEventListener("focus", this._onFocusFunc, false);
    this.domElement.removeEventListener("mouseenter", this._onFocusInAndMouseEnterFunc, false);
    this.domElement.removeEventListener("blur", this._onFocusOutAndMouseLeaveFunc, false);
    this.domElement.removeEventListener("mouseleave", this._onFocusOutAndMouseLeaveFunc, false);
    this.domElement.removeEventListener("keydown", this._onKeydownFunc, false);
    this.domElement.removeEventListener("keypress", this._onKeypressFunc, false);
    this.domElement.removeEventListener("keyup", this._onKeyupFunc, false);
    this.domElement.removeEventListener("paste", this._onPasteFunc, false);
    this.domElement.removeEventListener("wheel", this._onWheelFunc, false);
    this.domElement.removeEventListener("drop", this._onDropFunc, false);
    this._removeFormListener();
    this.hasEventListeners = false;
    document.removeEventListener("keydown", this._onKeydownGlobalFunc, false);
    document.removeEventListener("keyup", this._onKeyupGlobalFunc, false);
  }
  /**
   * Toggle the event listeners according to the `noEventListeners` option, if those were not activated/deactivated before
   * @private
   */
  _updateEventListeners() {
    if (!this.settings.noEventListeners && !this.hasEventListeners) {
      this._createEventListeners();
    }
    if (this.settings.noEventListeners && this.hasEventListeners) {
      this._removeEventListeners();
    }
  }
  /**
   * Mark the parent <form> so that other AutoNumeric object will not add more listeners.
   * Add a counter so that when removing the AutoNumeric object, we only remove the submit listener if that count is equal to 0.
   * Also keep a reference to the 'submit' event handler function to be able to remove that handler later if the `_removeFormListener()` function is called from another AutoNumeric object.
   *
   * @private
   */
  _setupFormListener() {
    if (!AutoNumericHelper.isNull(this.parentForm)) {
      this._onFormSubmitFunc = () => {
        this._onFormSubmit();
      };
      this._onFormResetFunc = () => {
        this._onFormReset();
      };
      if (this._hasParentFormCounter()) {
        this._incrementParentFormCounter();
      } else {
        this._initializeFormCounterToOne();
        this.parentForm.addEventListener("submit", this._onFormSubmitFunc, false);
        this.parentForm.addEventListener("reset", this._onFormResetFunc, false);
        this._storeFormHandlerFunction();
      }
    }
  }
  /**
   * Remove the form 'submit' event listener, as well as the `dataset` info (`anCount` and `anFormHandler`) from the parent form, only when there are only one AutoNumeric child element left in that <form>.
   * Otherwise, decrement the `anCount`.
   *
   * @private
   */
  _removeFormListener() {
    if (!AutoNumericHelper.isNull(this.parentForm)) {
      const anCount = this._getParentFormCounter();
      if (anCount === 1) {
        this.parentForm.removeEventListener("submit", this._getFormHandlerFunction().submitFn, false);
        this.parentForm.removeEventListener("reset", this._getFormHandlerFunction().resetFn, false);
        this._removeFormDataSetInfo();
      } else if (anCount > 1) {
        this._decrementParentFormCounter();
      } else {
        AutoNumericHelper.throwError(`The AutoNumeric object count on the form is incoherent.`);
      }
    }
  }
  /**
   * Return `true` if the parent form has the form counter attribute
   *
   * @returns {boolean}
   * @private
   */
  _hasParentFormCounter() {
    return "anCount" in this.parentForm.dataset;
  }
  /**
   * Return the count of AutoNumeric form children
   *
   * @returns {number}
   * @private
   */
  _getParentFormCounter() {
    return Number(this.parentForm.dataset.anCount);
  }
  /**
   * Set the count of AutoNumeric form children to 1 for the given form element, or if none are passed, the current `this.parentForm` one.
   *
   * @param {HTMLFormElement|null} formElement
   * @private
   */
  _initializeFormCounterToOne(formElement = null) {
    this._getFormElement(formElement).dataset.anCount = 1;
  }
  /**
   * Increment the AutoNumeric form children count for the given form element, or if none are passed, the current `this.parentForm` one.
   *
   * @param {HTMLFormElement|null} formElement
   * @private
   */
  _incrementParentFormCounter(formElement = null) {
    this._getFormElement(formElement).dataset.anCount++;
  }
  /**
   * Decrement the AutoNumeric form children count for the current `this.parentForm` form element.
   *
   * @private
   */
  _decrementParentFormCounter() {
    this.parentForm.dataset.anCount--;
  }
  /**
   * Return `true` if the global form handler list exists on the `window` object.
   *
   * @returns {boolean}
   * @private
   */
  static _doesFormHandlerListExists() {
    const type = typeof window.aNFormHandlerMap;
    return type !== "undefined" && type === "object";
  }
  /**
   * Create the global form handler list on the `window` object.
   *
   * @private
   */
  static _createFormHandlerList() {
    window.aNFormHandlerMap = /* @__PURE__ */ new Map();
  }
  /**
   * Return `true` if the given form element, or if none are passed, the current `this.parentForm` one has a form handler name.
   *
   * @param {HTMLFormElement|null} formElement
   * @returns {boolean}
   * @private
   */
  _hasFormHandlerFunction(formElement = null) {
    return "anFormHandler" in this._getFormElement(formElement).dataset;
  }
  /**
   * Return the given form element, or defaults to `this.parentForm` if no argument is passed.
   *
   * @param {HTMLFormElement|null} formElement
   * @returns {*}
   * @private
   */
  _getFormElement(formElement = null) {
    let formElementToUse;
    if (!AutoNumericHelper.isNull(formElement)) {
      formElementToUse = formElement;
    } else {
      formElementToUse = this.parentForm;
    }
    return formElementToUse;
  }
  /**
   * Generate a form handler unique name and store it in the global form handler list.
   * This also save that name in the dataset of the given form element.
   *
   * @param {HTMLFormElement|null} formElement
   * @private
   */
  _storeFormHandlerFunction(formElement = null) {
    if (!this.constructor._doesFormHandlerListExists()) {
      this.constructor._createFormHandlerList();
    }
    const formHandlerName = AutoNumericHelper.randomString();
    this._getFormElement(formElement).dataset.anFormHandler = formHandlerName;
    window.aNFormHandlerMap.set(formHandlerName, { submitFn: this._onFormSubmitFunc, resetFn: this._onFormResetFunc });
  }
  /**
   * Return the form handler key name from the parent form element, for the global form handler list.
   *
   * @returns {string|*}
   * @private
   */
  _getFormHandlerKey() {
    if (!this._hasFormHandlerFunction()) {
      AutoNumericHelper.throwError(`Unable to retrieve the form handler name`);
    }
    const formHandlerName = this.parentForm.dataset.anFormHandler;
    if (formHandlerName === "") {
      AutoNumericHelper.throwError(`The form handler name is invalid`);
    }
    return formHandlerName;
  }
  /**
   * Return the 'submit' event handler function used for the parent form.
   *
   * @returns {function}
   * @private
   */
  _getFormHandlerFunction() {
    const formHandlerName = this._getFormHandlerKey();
    return window.aNFormHandlerMap.get(formHandlerName);
  }
  /**
   * Remove the dataset attributes `data-an-count` and `data-an-form-handler` from the parent form element.
   *
   * @private
   */
  _removeFormDataSetInfo() {
    this._decrementParentFormCounter();
    window.aNFormHandlerMap.delete(this._getFormHandlerKey());
    this.parentForm.removeAttribute("data-an-count");
    this.parentForm.removeAttribute("data-an-form-handler");
  }
  /**
   * Set the DOM element write permissions according to the current settings, by setting the `readonly` or `contenteditable` attributes depending on its tag type.
   * If the `useHtmlAttribute` parameter is set to `true`, then the `readonly` html attribute is used and has precedence over the `readOnly` option to set the element as read-only.
   *
   * @param {boolean} useHtmlAttribute If set to `true`, then the write permissions are set by taking into account the html 'readonly' attribute, even if the `readOnly` option is set to false
   * @private
   */
  _setWritePermissions(useHtmlAttribute = false) {
    if (useHtmlAttribute && this.domElement.readOnly || this.settings.readOnly) {
      this._setReadOnly();
    } else {
      this._setReadWrite();
    }
  }
  /**
   * Set the element to be read-only.
   * If the DOM element tag is not an `input`, then it `contenteditable` attribute is set to `false`.
   *
   * @private
   */
  _setReadOnly() {
    if (this.isInputElement) {
      this.domElement.readOnly = true;
    } else {
      this.domElement.setAttribute("contenteditable", false);
    }
  }
  /**
   * Set the element to be read-write.
   *
   * @private
   */
  _setReadWrite() {
    if (this.isInputElement) {
      this.domElement.readOnly = false;
    } else {
      this.domElement.setAttribute("contenteditable", true);
    }
  }
  /**
   * Add a watcher so that any external change to the AutoNumeric-managed element would be detected.
   * As soon as such change is detected, AutoNumeric then tries to `set()` the value so that it gets formatted and stored in the history.
   * //XXX For now, this only works when watching the `value` attribute, not the `textContent` one
   * @private
   */
  _addWatcher() {
    if (!AutoNumericHelper.isUndefined(this.getterSetter)) {
      const { set: setter, get: getter } = this.getterSetter;
      Object.defineProperty(this.domElement, this.attributeToWatch, {
        configurable: true,
        // This is needed in some rare cases
        get: () => getter.call(this.domElement),
        set: (val) => {
          setter.call(this.domElement, val);
          if (this.settings.watchExternalChanges && !this.internalModification) {
            this.set(val);
          }
        }
      });
    }
  }
  /**
   * Remove the watcher on the AutoNumeric-managed element
   * Note: This needs to be called when the AutoNumeric element is 'removed', otherwise the getter/setter stays on the DOM element and that can lead to problem if the user initialize another AutoNumeric object on it.
   * @private
   */
  _removeWatcher() {
    if (!AutoNumericHelper.isUndefined(this.getterSetter)) {
      const { set: setter, get: getter } = this.getterSetter;
      Object.defineProperty(this.domElement, this.attributeToWatch, {
        configurable: true,
        // This is needed in some rare cases
        get: () => getter.call(this.domElement),
        set: (val) => {
          setter.call(this.domElement, val);
        }
      });
    }
  }
  /**
   * Return the name of the object attribute that store the current formatted data in the DOM element.
   *
   * @returns {string}
   * @private
   */
  _getAttributeToWatch() {
    let attributeToWatch;
    if (this.isInputElement) {
      attributeToWatch = "value";
    } else {
      const nodeType = this.domElement.nodeType;
      if (nodeType === Node.ELEMENT_NODE || nodeType === Node.DOCUMENT_NODE || nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
        attributeToWatch = "textContent";
      } else if (nodeType === Node.TEXT_NODE) {
        attributeToWatch = "nodeValue";
      }
    }
    return attributeToWatch;
  }
  /**
   * Save the current raw value into the history table, along with the selection information.
   *
   * If the user has done some undos and tries to enter:
   * - a new and different number than the 'next' state, this drops the rest of the history table
   * - the very same number that result in the same rawValue as the 'next' state, we only move the history table pointer to the next state
   *
   * @private
   */
  _historyTableAdd() {
    const isEmptyHistoryTable = this.historyTable.length === 0;
    if (isEmptyHistoryTable || this.rawValue !== this._historyTableCurrentValueUsed()) {
      let addNewHistoryState = true;
      if (!isEmptyHistoryTable) {
        const nextHistoryStateIndex = this.historyTableIndex + 1;
        if (nextHistoryStateIndex < this.historyTable.length && this.rawValue === this.historyTable[nextHistoryStateIndex].value) {
          addNewHistoryState = false;
        } else {
          AutoNumericHelper.arrayTrim(this.historyTable, this.historyTableIndex + 1);
        }
      }
      this.historyTableIndex++;
      if (addNewHistoryState) {
        const selection = AutoNumericHelper.getElementSelection(this.domElement);
        this.selectionStart = selection.start;
        this.selectionEnd = selection.end;
        this.historyTable.push({
          // Save the rawValue and selection start/end
          value: this.rawValue,
          // The selection for this element is temporary, and will be updated when the next history state will be recorded.
          // That way, we are always sure we save the last caret or selection positions just before the value is changed. Otherwise, we would only save those positions when the value is first changed, and would not take into account that the user could move the caret around afterward.
          // For instance, this is needed if the user change the element value, and immediately undo it ; if he then does a redo, he'll see the value and the right selection
          // To sum up; The selection position are not always +1 character, since it could also be '2' if a group separator is added when entering one character. That's why the current history state caret/selection position is updated on each `keyup` event.
          start: this.selectionStart + 1,
          // Here we add one since the user added one character too
          end: this.selectionEnd + 1
        });
        if (this.historyTable.length > 1) {
          this.historyTable[this.historyTableIndex - 1].start = this.selectionStart;
          this.historyTable[this.historyTableIndex - 1].end = this.selectionEnd;
        }
      }
      if (this.historyTable.length > this.settings.historySize) {
        this._historyTableForget();
      }
    }
  }
  /**
   * Debug function for the history table
   * @private
   */
  /*
  _debugHistoryTable() {
      let i = 0;
      let mark;
      this.historyTable.forEach(history => {
          if (this.historyTableIndex === i) {
              mark = '> ';
          } else {
              mark = '';
          }
          console.log(`${mark}${i++}: ${history.value} ${history.start}|${history.end} [onGoingRedo: ${this.onGoingRedo}]`); //DEBUG
      });
  }
  */
  /**
   * 'Undo' or 'Redo' the last/next user entry in the history table.
   * This does not modify the history table, only the pointer to the current state.
   *
   * @param {boolean} undo If set to `true`, then this function does an 'Undo', otherwise it does a 'Redo'
   * @private
   */
  _historyTableUndoOrRedo(undo = true) {
    let check;
    if (undo) {
      check = this.historyTableIndex > 0;
      if (check) {
        this.historyTableIndex--;
      }
    } else {
      check = this.historyTableIndex + 1 < this.historyTable.length;
      if (check) {
        this.historyTableIndex++;
      }
    }
    if (check) {
      const undoInfo = this.historyTable[this.historyTableIndex];
      this.set(undoInfo.value, null, false);
      AutoNumericHelper.setElementSelection(this.domElement, undoInfo.start, undoInfo.end);
    }
  }
  /**
   * 'Undo' the last user entry by going back one entry in the history table.
   * This keeps the following entries in order to allow for a 'redo'.
   * This does not modify the history table, only the pointer to the current state.
   * @private
   */
  _historyTableUndo() {
    this._historyTableUndoOrRedo(true);
  }
  /**
   * 'Redo' the next user entry in the history table.
   * This does not modify the history table, only the pointer to the current state.
   * @private
   */
  _historyTableRedo() {
    this._historyTableUndoOrRedo(false);
  }
  /**
   * Reset the history table to its initial state, and select the value.
   * @private
   */
  /*
  resetHistoryTable() { //FIXME Test this
      this.set(this.rawValue, null, false);
      this.select();
      const selection = AutoNumericHelper.getElementSelection(this.domElement);
      this.historyTableIndex = 0;
      this.historyTable = [{
          // Save the rawValue and selection start/end
          value: this.rawValue,
          start: selection.start,
          end  : selection.end,
      }];
  }
  */
  /**
   * Make the history table forget its first N elements, shifting its indexes in the process.
   * `N` being given as the `numberOfEntriesToForget` parameter.
   *
   * @param {Number} numberOfEntriesToForget
   * @returns {object|Array<object>} The discarded objects, in an Array.
   * @private
   */
  _historyTableForget(numberOfEntriesToForget = 1) {
    const shiftedAway = [];
    for (let i = 0; i < numberOfEntriesToForget; i++) {
      shiftedAway.push(this.historyTable.shift());
      this.historyTableIndex--;
      if (this.historyTableIndex < 0) {
        this.historyTableIndex = 0;
      }
    }
    if (shiftedAway.length === 1) {
      return shiftedAway[0];
    }
    return shiftedAway;
  }
  /**
   * Return the currently used value from the history table.
   *
   * @returns {string|number}
   * @private
   */
  _historyTableCurrentValueUsed() {
    let indexToUse = this.historyTableIndex;
    if (indexToUse < 0) {
      indexToUse = 0;
    }
    let result;
    if (AutoNumericHelper.isUndefinedOrNullOrEmpty(this.historyTable[indexToUse])) {
      result = "";
    } else {
      result = this.historyTable[indexToUse].value;
    }
    return result;
  }
  /**
   * Parse the `styleRules` option and run the test for each given rules, either pre-defined ones like `positive`, `negative` and `ranges`, or user defined callbacks within the `userDefined` attribute.
   * @private
   */
  _parseStyleRules() {
    if (AutoNumericHelper.isUndefinedOrNullOrEmpty(this.settings.styleRules) || this.rawValue === "") {
      return;
    }
    if (!AutoNumericHelper.isUndefinedOrNullOrEmpty(this.settings.styleRules.positive)) {
      if (this.rawValue >= 0) {
        this._addCSSClass(this.settings.styleRules.positive);
      } else {
        this._removeCSSClass(this.settings.styleRules.positive);
      }
    }
    if (!AutoNumericHelper.isUndefinedOrNullOrEmpty(this.settings.styleRules.negative)) {
      if (this.rawValue < 0) {
        this._addCSSClass(this.settings.styleRules.negative);
      } else {
        this._removeCSSClass(this.settings.styleRules.negative);
      }
    }
    if (!AutoNumericHelper.isUndefinedOrNullOrEmpty(this.settings.styleRules.ranges) && this.settings.styleRules.ranges.length !== 0) {
      this.settings.styleRules.ranges.forEach((range2) => {
        if (this.rawValue >= range2.min && this.rawValue < range2.max) {
          this._addCSSClass(range2.class);
        } else {
          this._removeCSSClass(range2.class);
        }
      });
    }
    if (!AutoNumericHelper.isUndefinedOrNullOrEmpty(this.settings.styleRules.userDefined) && this.settings.styleRules.userDefined.length !== 0) {
      this.settings.styleRules.userDefined.forEach((userObject) => {
        if (AutoNumericHelper.isFunction(userObject.callback)) {
          if (AutoNumericHelper.isString(userObject.classes)) {
            if (userObject.callback(this.rawValue)) {
              this._addCSSClass(userObject.classes);
            } else {
              this._removeCSSClass(userObject.classes);
            }
          } else if (AutoNumericHelper.isArray(userObject.classes)) {
            if (userObject.classes.length === 2) {
              if (userObject.callback(this.rawValue)) {
                this._addCSSClass(userObject.classes[0]);
                this._removeCSSClass(userObject.classes[1]);
              } else {
                this._removeCSSClass(userObject.classes[0]);
                this._addCSSClass(userObject.classes[1]);
              }
            } else if (userObject.classes.length > 2) {
              const callbackResult = userObject.callback(this.rawValue);
              if (AutoNumericHelper.isArray(callbackResult)) {
                userObject.classes.forEach((userClass, index) => {
                  if (AutoNumericHelper.isInArray(index, callbackResult)) {
                    this._addCSSClass(userClass);
                  } else {
                    this._removeCSSClass(userClass);
                  }
                });
              } else if (AutoNumericHelper.isInt(callbackResult)) {
                userObject.classes.forEach((userClass, index) => {
                  if (index === callbackResult) {
                    this._addCSSClass(userClass);
                  } else {
                    this._removeCSSClass(userClass);
                  }
                });
              } else if (AutoNumericHelper.isNull(callbackResult)) {
                userObject.classes.forEach((userClass) => {
                  this._removeCSSClass(userClass);
                });
              } else {
                AutoNumericHelper.throwError(`The callback result is not an array nor a valid array index, ${typeof callbackResult} given.`);
              }
            } else {
              AutoNumericHelper.throwError("The classes attribute is not valid for the `styleRules` option.");
            }
          } else if (AutoNumericHelper.isUndefinedOrNullOrEmpty(userObject.classes)) {
            userObject.callback(this);
          } else {
            AutoNumericHelper.throwError("The callback/classes structure is not valid for the `styleRules` option.");
          }
        } else {
          AutoNumericHelper.warning(`The given \`styleRules\` callback is not a function, ${typeof userObject.callback} given.`, this.settings.showWarnings);
        }
      });
    }
  }
  /**
   * Add the given CSS class to the DOM element.
   *
   * @param {string} cssClassName
   * @private
   */
  _addCSSClass(cssClassName) {
    this.domElement.classList.add(cssClassName);
  }
  /**
   * Remove the given CSS class from the DOM element.
   *
   * @param {string} cssClassName
   * @private
   */
  _removeCSSClass(cssClassName) {
    this.domElement.classList.remove(cssClassName);
  }
  // Those are the public function available on each autoNumeric-managed element
  /**
   * Method that updates the AutoNumeric settings, and immediately format the element accordingly.
   * The options passed as parameter(s) is either one or many objects that each contains some settings, i.e. :
   * {
   *     digitGroupSeparator: ".",
   *     decimalCharacter: ",",
   *     currencySymbol: '€ ',
   * }
   * If multiple options are passed, the latter overwrite the previous ones.
   *
   * Note: If the new settings are not validated, or the call to `set()` fails, then the previous valid settings are reverted back to.
   *
   * @example anElement.update({ options }) // Updates the settings
   * @example anElement.update({ options1 }, { options2 }) // Updates the settings with multiple option objects
   * @example anElement.update([{ options1 }, { options2 }]) // Updates the settings with multiple option objects in a single array
   *
   * @param {object|string|array} newOptions
   * @returns {AutoNumeric}
   */
  update(...newOptions) {
    if (Array.isArray(newOptions) && Array.isArray(newOptions[0])) {
      newOptions = newOptions[0];
    }
    const originalSettings = AutoNumericHelper.cloneObject(this.settings);
    const numericString = this.rawValue;
    let optionsToUse = {};
    if (AutoNumericHelper.isUndefinedOrNullOrEmpty(newOptions) || newOptions.length === 0) {
      optionsToUse = null;
    } else if (newOptions.length >= 1) {
      newOptions.forEach((optionObject) => {
        if (this.constructor._isPreDefinedOptionValid(optionObject)) {
          optionObject = this.constructor._getOptionObject(optionObject);
        }
        Object.assign(optionsToUse, optionObject);
      });
    }
    try {
      this._setSettings(optionsToUse, true);
      this._setWritePermissions();
      this._updateEventListeners();
      this.set(numericString);
    } catch (error) {
      this._setSettings(originalSettings, true);
      AutoNumericHelper.throwError(`Unable to update the settings, those are invalid: [${error}]`);
      return this;
    }
    return this;
  }
  /**
   * Return the options object containing all the current autoNumeric settings in effect.
   * You can then directly access each option by using its name : `anElement.getSettings().optionNameAutoCompleted`.
   *
   * @example
   * anElement.getSettings()
   * anElement.getSettings().decimalCharacter // Return the decimalCharacter setting as a string - any valid option name can be used
   *
   * @returns {object}
   */
  getSettings() {
    return this.settings;
  }
  /**
   * Set the given element value, and format it immediately.
   * Additionally, this `set()` method can accept options that will be merged into the current AutoNumeric element, taking precedence over any previous settings.
   *
   * @example anElement.set('12345.67') // Formats the value
   * @example anElement.set(12345.67) // Formats the value
   * @example anElement.set(12345.67, { decimalCharacter : ',' }) // Update the settings and formats the value in one go
   * @example anElement.northAmerican().set('$12,345.67') // Set an already formatted value (this does not _exactly_ respect the currency symbol/negative placements, but only remove all non-numbers characters, according to the ones given in the settings)
   * @example anElement.set(null) // Set the rawValue and element value to `null`
   *
   * @param {number|string|null} newValue The value must be a Number, a numeric string or `null` (if `emptyInputBehavior` is set to `'null'`)
   * @param {object} options A settings object that will override the current settings. Note: the update is done only if the `newValue` is defined.
   * @param {boolean} saveChangeToHistory If set to `true`, then the change is recorded in the history table
   * @returns {AutoNumeric}
   * @throws
   */
  set(newValue, options = null, saveChangeToHistory = true) {
    if (AutoNumericHelper.isUndefined(newValue)) {
      AutoNumericHelper.warning(`You are trying to set an 'undefined' value ; an error could have occurred.`, this.settings.showWarnings);
      return this;
    }
    if (!AutoNumericHelper.isNull(options)) {
      this._setSettings(options, true);
    }
    if (newValue === null && this.settings.emptyInputBehavior !== _AutoNumeric.options.emptyInputBehavior.null) {
      AutoNumericHelper.warning(`You are trying to set the \`null\` value while the \`emptyInputBehavior\` option is set to ${this.settings.emptyInputBehavior}. If you want to be able to set the \`null\` value, you need to change the 'emptyInputBehavior' option to \`'null'\`.`, this.settings.showWarnings);
      return this;
    }
    let value;
    if (newValue === null) {
      this._setElementAndRawValue(null, null, saveChangeToHistory);
      this._saveValueToPersistentStorage();
      return this;
    }
    value = this.constructor._toNumericValue(newValue, this.settings);
    if (isNaN(Number(value))) {
      AutoNumericHelper.warning(`The value you are trying to set results in \`NaN\`. The element value is set to the empty string instead.`, this.settings.showWarnings);
      this.setValue("", saveChangeToHistory);
      return this;
    }
    if (value === "") {
      switch (this.settings.emptyInputBehavior) {
        case _AutoNumeric.options.emptyInputBehavior.zero:
          value = 0;
          break;
        case _AutoNumeric.options.emptyInputBehavior.min:
          value = this.settings.minimumValue;
          break;
        case _AutoNumeric.options.emptyInputBehavior.max:
          value = this.settings.maximumValue;
          break;
        default:
          if (AutoNumericHelper.isNumber(this.settings.emptyInputBehavior)) {
            value = Number(this.settings.emptyInputBehavior);
          }
      }
    }
    if (value !== "") {
      const [minTest, maxTest] = this.constructor._checkIfInRangeWithOverrideOption(value, this.settings);
      if (minTest && maxTest && this.settings.valuesToStrings && this._checkValuesToStrings(value)) {
        this._setElementAndRawValue(this.settings.valuesToStrings[value], value, saveChangeToHistory);
        this._saveValueToPersistentStorage();
        return this;
      }
      const isZero = AutoNumericHelper.isZeroOrHasNoValue(value);
      if (isZero) {
        value = "0";
      }
      if (minTest && maxTest) {
        let forcedRawValue = this.constructor._roundRawValue(value, this.settings);
        forcedRawValue = this._trimLeadingAndTrailingZeros(forcedRawValue.replace(this.settings.decimalCharacter, "."));
        value = this._getRawValueToFormat(value);
        if (this.isFocused) {
          value = this.constructor._roundFormattedValueShownOnFocus(value, this.settings);
        } else {
          if (this.settings.divisorWhenUnfocused) {
            value = value / this.settings.divisorWhenUnfocused;
            value = value.toString();
          }
          value = this.constructor._roundFormattedValueShownOnBlur(value, this.settings);
        }
        value = this.constructor._modifyNegativeSignAndDecimalCharacterForFormattedValue(value, this.settings);
        value = this.constructor._addGroupSeparators(value, this.settings, this.isFocused, this.rawValue, forcedRawValue);
        if (!this.isFocused && this.settings.symbolWhenUnfocused) {
          value = `${value}${this.settings.symbolWhenUnfocused}`;
        }
        if (this.settings.decimalPlacesShownOnFocus || this.settings.divisorWhenUnfocused) {
          this._saveValueToPersistentStorage();
        }
        this._setElementAndRawValue(value, forcedRawValue, saveChangeToHistory);
        this._setValidOrInvalidState(forcedRawValue);
        return this;
      } else {
        this._triggerRangeEvents(minTest, maxTest);
        AutoNumericHelper.throwError(`The value [${value}] being set falls outside of the minimumValue [${this.settings.minimumValue}] and maximumValue [${this.settings.maximumValue}] range set for this element`);
        this._removeValueFromPersistentStorage();
        this.setValue("", saveChangeToHistory);
        return this;
      }
    } else {
      let result;
      if (this.settings.emptyInputBehavior === _AutoNumeric.options.emptyInputBehavior.always) {
        result = this.settings.currencySymbol;
      } else {
        result = "";
      }
      this._setElementAndRawValue(result, "", saveChangeToHistory);
      return this;
    }
  }
  /**
   * Set the given value directly as the DOM element value, without formatting it beforehand.
   * You can also set the value and update the setting in one go (the value will again not be formatted immediately).
   *
   * @param {number|string} value
   * @param {object} options
   * @returns {AutoNumeric}
   * @throws
   */
  setUnformatted(value, options = null) {
    if (value === null || AutoNumericHelper.isUndefined(value)) {
      return this;
    }
    if (!AutoNumericHelper.isNull(options)) {
      this._setSettings(options, true);
    }
    const strippedValue = this.constructor._removeBrackets(value, this.settings);
    const normalizedValue = this.constructor._stripAllNonNumberCharacters(strippedValue, this.settings, true, this.isFocused);
    if (!AutoNumericHelper.isNumber(normalizedValue)) {
      AutoNumericHelper.throwError(`The value is not a valid one, it's not a numeric string nor a recognized currency.`);
    }
    if (this.constructor._isWithinRangeWithOverrideOption(normalizedValue, this.settings)) {
      this.setValue(value);
    } else {
      AutoNumericHelper.throwError(`The value is out of the range limits [${this.settings.minimumValue}, ${this.settings.maximumValue}].`);
    }
    return this;
  }
  /**
   * Set the given value directly as the DOM element value, without formatting it beforehand, and without checking its validity.
   * This also updates the `rawValue` with the given `newValue`, without checking it too ; if it's not formatted like a number recognized by Javascript, this *will* likely make other AutoNumeric methods fail.
   *
   * @param {string|number|null} newValue The new value to set on the element
   * @param {boolean} saveChangeToHistory If set to `true`, then the change is recorded in the history array, otherwise it is not
   * @returns {AutoNumeric}
   */
  setValue(newValue, saveChangeToHistory = true) {
    this._setElementAndRawValue(newValue, saveChangeToHistory);
    return this;
  }
  /**
   * Save the raw value inside the AutoNumeric object.
   *
   * @param {number|string|null} rawValue The numeric value as understood by Javascript like a `Number`
   * @param {boolean} saveChangeToHistory If set to `true`, then the change is recorded in the history array, otherwise it is not
   * @private
   */
  _setRawValue(rawValue, saveChangeToHistory = true) {
    if (this.rawValue !== rawValue) {
      const oldRawValue = this.rawValue;
      this.rawValue = rawValue;
      if (!AutoNumericHelper.isNull(this.settings.rawValueDivisor) && this.settings.rawValueDivisor !== 0 && // Only divide if the `rawValueDivisor` option is set
      rawValue !== "" && rawValue !== null && // Do not modify the `rawValue` if it's an empty string or null
      this._isUserManuallyEditingTheValue()) {
        this.rawValue /= this.settings.rawValueDivisor;
      }
      this._triggerEvent(_AutoNumeric.events.rawValueModified, this.domElement, {
        oldRawValue,
        newRawValue: this.rawValue,
        isPristine: this.isPristine(true),
        error: null,
        aNElement: this
      });
      this._parseStyleRules();
      if (saveChangeToHistory) {
        window.requestAnimationFrame(() => this._historyTableAdd());
      }
    }
  }
  /**
   * Set the given value on the DOM element, without affecting the `rawValue`.
   * This sends an 'autoNumeric:formatted' event if the new value is different from the old one.
   *
   * @param {number|string} newElementValue
   * @param {boolean} sendFormattedEvent If set to `true`, then the `AutoNumeric.events.formatted` event is sent if the value has changed
   * @returns {AutoNumeric}
   * @private
   */
  _setElementValue(newElementValue, sendFormattedEvent = true) {
    const oldElementValue = AutoNumericHelper.getElementValue(this.domElement);
    if (newElementValue !== oldElementValue) {
      this.internalModification = true;
      AutoNumericHelper.setElementValue(this.domElement, newElementValue);
      this.internalModification = false;
      if (sendFormattedEvent) {
        this._triggerEvent(_AutoNumeric.events.formatted, this.domElement, {
          oldValue: oldElementValue,
          newValue: newElementValue,
          oldRawValue: this.rawValue,
          newRawValue: this.rawValue,
          isPristine: this.isPristine(false),
          error: null,
          aNElement: this
        });
      }
    }
    return this;
  }
  /**
   * Set the given value on the DOM element, and the raw value on `this.rawValue`, if both are given.
   * If only one value is given, then both the DOM element value and the raw value are set with that value.
   * The third argument `saveChangeToHistory` defines if the change should be recorded in the history array.
   * Note: if the second argument `rawValue` is a boolean, we consider that is really is the `saveChangeToHistory` argument.
   *
   * @param {number|string|null} newElementValue
   * @param {number|string|null|boolean} rawValue
   * @param {boolean} saveChangeToHistory
   * @returns {AutoNumeric}
   * @private
   */
  _setElementAndRawValue(newElementValue, rawValue = null, saveChangeToHistory = true) {
    if (AutoNumericHelper.isNull(rawValue)) {
      rawValue = newElementValue;
    } else if (AutoNumericHelper.isBoolean(rawValue)) {
      saveChangeToHistory = rawValue;
      rawValue = newElementValue;
    }
    this._setElementValue(newElementValue);
    this._setRawValue(rawValue, saveChangeToHistory);
    return this;
  }
  /**
   * Return the multiplied raw value with the `rawValueDivisor`.
   * This is used to display different values between the raw and formatted values.
   *
   * @param {number|string|null} rawValue The numeric value as understood by Javascript like a `Number`
   * @returns {number|string|null}
   * @private
   */
  _getRawValueToFormat(rawValue) {
    let rawValueForTheElementValue;
    if (!AutoNumericHelper.isNull(this.settings.rawValueDivisor) && this.settings.rawValueDivisor !== 0 && // Only multiply if the `rawValueDivisor` option is set
    rawValue !== "" && rawValue !== null) {
      rawValueForTheElementValue = rawValue * this.settings.rawValueDivisor;
    } else {
      rawValueForTheElementValue = rawValue;
    }
    return rawValueForTheElementValue;
  }
  /**
   * Check if the given value has a corresponding key in the `valuesToStrings` option object.
   *
   * @param {number|string} value
   * @returns {boolean} Returns `true` if such a key is found.
   * @private
   */
  _checkValuesToStrings(value) {
    return this.constructor._checkValuesToStringsArray(value, this.valuesToStringsKeys);
  }
  /**
   * Check if the given value has a corresponding key in the `stringsArray` array.
   *
   * @param {number|string} key
   * @param {array} stringsArray Array where the `key` is checked against its keys
   * @returns {boolean} Returns `true` if such a key is found.
   * @private
   */
  static _checkValuesToStringsArray(key, stringsArray) {
    return AutoNumericHelper.isInArray(String(key), stringsArray);
  }
  /**
   * Static helper for checking if the given `key` is found in the settings' `valuesToStrings` option object.
   *
   * @param {number|string} key
   * @param {object} settings
   * @returns {boolean}
   * @private
   */
  static _checkValuesToStringsSettings(key, settings) {
    return this._checkValuesToStringsArray(key, Object.keys(settings.valuesToStrings));
  }
  /**
   * Static helper for checking if the given `value` is found in the settings' `valuesToStrings` option object.
   *
   * @param {number|string} value
   * @param {object} settings
   * @returns {boolean}
   * @private
   */
  static _checkStringsToValuesSettings(value, settings) {
    return this._checkValuesToStringsArray(value, Object.values(settings.valuesToStrings));
  }
  /**
   * Return `true` if the user is currently modifying the element value manually.
   *
   * @returns {boolean}
   * @private
   */
  _isUserManuallyEditingTheValue() {
    return this.isFocused && this.isEditing || this.isDropEvent;
  }
  /**
   * Execute the given callback function using the given result as its first parameter, and the AutoNumeric object as its second.
   *
   * @param {number|string|Array|null} result
   * @param {function|null} callback If a callback is passed, then the result is passed to it as its first argument, and the AutoNumeric object has its second
   * @private
   */
  _executeCallback(result, callback) {
    if (!AutoNumericHelper.isNull(callback) && AutoNumericHelper.isFunction(callback)) {
      callback(result, this);
    }
  }
  /**
   * Trigger the given event on the given element with the given detail.
   * This takes into account the `eventBubbles` and `eventIsCancelable` options.
   *
   * @param {string} eventName
   * @param {HTMLElement|HTMLDocument|EventTarget} element
   * @param {object} detail
   * @private
   */
  _triggerEvent(eventName, element = document, detail = null) {
    AutoNumericHelper.triggerEvent(eventName, element, detail, this.settings.eventBubbles, this.settings.eventIsCancelable);
  }
  /**
   * Alias of the `getNumericString()` function.
   * Developers should use one of the more explicit function names to get what they want :
   * - a numeric string : `getNumericString()`
   * - a formatted string : `getFormatted()`
   * - a number : `getNumber()`, or
   * - a localized numeric string : `getLocalized()`
   *
   * @usage anElement.get();
   *
   * @param {function|null} callback If a callback is passed, then the result is passed to it as its first argument, and the AutoNumeric object has its second
   *
   * @deprecated
   * @returns {string|null}
   */
  get(callback = null) {
    return this.getNumericString(callback);
  }
  /**
   * Return the unformatted value as a string.
   * This can also return `null` if `rawValue` is null.
   *
   * @usage anElement.getNumericString();
   *
   * @param {function|null} callback If a callback is passed, then the result is passed to it as its first argument, and the AutoNumeric object has its second
   *
   * @returns {string|null}
   */
  getNumericString(callback = null) {
    let result;
    if (AutoNumericHelper.isNull(this.rawValue)) {
      result = null;
    } else {
      result = AutoNumericHelper.trimPaddedZerosFromDecimalPlaces(this.rawValue);
    }
    this._executeCallback(result, callback);
    return result;
  }
  /**
   * Return the current formatted value of the AutoNumeric element as a string
   *
   * @usage anElement.getFormatted()
   *
   * @param {function|null} callback If a callback is passed, then the result is passed to it as its first argument, and the AutoNumeric object has its second
   *
   * @returns {string}
   */
  getFormatted(callback = null) {
    if (!("value" in this.domElement || "textContent" in this.domElement)) {
      AutoNumericHelper.throwError("Unable to get the formatted string from the element.");
    }
    const result = AutoNumericHelper.getElementValue(this.domElement);
    this._executeCallback(result, callback);
    return result;
  }
  /**
   * Return the element unformatted value as a real Javascript number.
   * Warning: This can lead to precision problems with big numbers that should be stored as strings.
   *
   * @usage anElement.getNumber()
   *
   * @param {function|null} callback If a callback is passed, then the result is passed to it as its first argument, and the AutoNumeric object has its second
   *
   * @returns {number|null}
   */
  getNumber(callback = null) {
    let result;
    if (this.rawValue === null) {
      result = null;
    } else {
      result = this.constructor._toLocale(this.getNumericString(), "number", this.settings);
    }
    this._executeCallback(result, callback);
    return result;
  }
  /**
   * Returns the unformatted value, but following the `outputFormat` setting, which means the output can either be :
   * - a string (that could or could not represent a number (i.e. "12345,67-")), or
   * - a plain number (if the setting 'number' is used).
   *
   * By default, the returned values are an ISO numeric string "1234.56" or "-1234.56" where the decimal character is a period.
   * Check the "outputFormat" option definition for more details.
   *
   * @usage anElement.getLocalized();
   *
   * @param {null|string|function} forcedOutputFormat If set to something different from `null`, then this is used as an overriding outputFormat option
   * @param {function|null} callback If a callback is passed, then the result is passed to it as its first argument, and the AutoNumeric object has its second
   *
   * @returns {*}
   */
  getLocalized(forcedOutputFormat = null, callback = null) {
    if (AutoNumericHelper.isFunction(forcedOutputFormat) && AutoNumericHelper.isNull(callback)) {
      callback = forcedOutputFormat;
      forcedOutputFormat = null;
    }
    let value;
    if (AutoNumericHelper.isEmptyString(this.rawValue)) {
      value = "";
    } else {
      value = "" + Number(this.rawValue);
    }
    if (value !== "" && Number(value) === 0 && this.settings.leadingZero !== _AutoNumeric.options.leadingZero.keep) {
      value = "0";
    }
    let outputFormatToUse;
    if (AutoNumericHelper.isNull(forcedOutputFormat)) {
      outputFormatToUse = this.settings.outputFormat;
    } else {
      outputFormatToUse = forcedOutputFormat;
    }
    const result = this.constructor._toLocale(value, outputFormatToUse, this.settings);
    this._executeCallback(result, callback);
    return result;
  }
  /**
   * Force the element to reformat its value again (just in case the formatting has been lost).
   * This can be used right after a form submission for instance (after a previous call to `unformat`).
   *
   * @example anElement.reformat()
   *
   * @returns {AutoNumeric}
   */
  reformat() {
    this.set(this.rawValue);
    return this;
  }
  /**
   * Remove the formatting and keep only the raw unformatted value in the element (as a numericString)
   * Note: this is loosely based on the previous 'unSet()' function
   *
   * By default, values are returned as ISO numeric strings (i.e. "1234.56" or "-1234.56"), where the decimal character is a period.
   * @example anElement.unformat()
   *
   * @returns {AutoNumeric}
   */
  unformat() {
    this._setElementValue(this.getNumericString());
    return this;
  }
  /**
   * Remove the formatting and keep only the localized unformatted value in the element, with the option to override the default outputFormat if needed
   *
   * Locale formats are supported "1234.56-" or "1234,56" or "-1234,56 or "1234,56-", or even plain numbers.
   * Take a look at the `outputFormat` option definition in the default settings for more details.
   *
   * @param {null|string} forcedOutputFormat If set to something different from `null`, then this is used as an overriding outputFormat option
   * @returns {AutoNumeric}
   */
  unformatLocalized(forcedOutputFormat = null) {
    this._setElementValue(this.getLocalized(forcedOutputFormat));
    return this;
  }
  /**
   * Return `true` if the current value is the same as when the element got initialized.
   * Note: By default, this returns `true` if the raw unformatted value is still the same even if the formatted one has changed (due to a configuration update for instance).
   * In order to test if the formatted value is the same (which means neither the raw value nor the settings have been changed), then you must pass `false` as its argument.
   *
   * @param {boolean} checkOnlyRawValue If set to `true`, the pristine value is done on the raw unformatted value, not the formatted one.  If set to `false`, this also checks that the formatted value hasn't changed.
   * @returns {boolean}
   */
  isPristine(checkOnlyRawValue = true) {
    let result;
    if (checkOnlyRawValue) {
      result = this.initialValue === this.getNumericString();
    } else {
      result = this.initialValueHtmlAttribute === this.getFormatted();
    }
    return result;
  }
  /**
   * Select the formatted element content, based on the `selectNumberOnly` option
   *
   * @returns {AutoNumeric}
   */
  select() {
    if (this.settings.selectNumberOnly) {
      this.selectNumber();
    } else {
      this._defaultSelectAll();
    }
    return this;
  }
  /**
   * Select the whole element content (including the currency symbol).
   * @private
   */
  _defaultSelectAll() {
    AutoNumericHelper.setElementSelection(this.domElement, 0, AutoNumericHelper.getElementValue(this.domElement).length);
  }
  /**
   * Select only the numbers in the formatted element content, leaving out the currency symbol, whatever the value of the `selectNumberOnly` option
   *
   * @returns {AutoNumeric}
   */
  selectNumber() {
    const unformattedValue = AutoNumericHelper.getElementValue(this.domElement);
    const valueLen = unformattedValue.length;
    const currencySymbolSize = this.settings.currencySymbol.length;
    const currencySymbolPlacement = this.settings.currencySymbolPlacement;
    const negLen = !AutoNumericHelper.isNegative(unformattedValue, this.settings.negativeSignCharacter) ? 0 : 1;
    const suffixTextLen = this.settings.suffixText.length;
    let start;
    if (currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.suffix) {
      start = 0;
    } else if (this.settings.negativePositiveSignPlacement === _AutoNumeric.options.negativePositiveSignPlacement.left && negLen === 1 && currencySymbolSize > 0) {
      start = currencySymbolSize + 1;
    } else {
      start = currencySymbolSize;
    }
    let end;
    if (currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.prefix) {
      end = valueLen - suffixTextLen;
    } else {
      switch (this.settings.negativePositiveSignPlacement) {
        case _AutoNumeric.options.negativePositiveSignPlacement.left:
          end = valueLen - (suffixTextLen + currencySymbolSize);
          break;
        case _AutoNumeric.options.negativePositiveSignPlacement.right:
          if (currencySymbolSize > 0) {
            end = valueLen - (currencySymbolSize + negLen + suffixTextLen);
          } else {
            end = valueLen - (currencySymbolSize + suffixTextLen);
          }
          break;
        default:
          end = valueLen - (currencySymbolSize + suffixTextLen);
      }
    }
    AutoNumericHelper.setElementSelection(this.domElement, start, end);
    return this;
  }
  /**
   * Select only the integer part in the formatted element content, whatever the value of `selectNumberOnly`
   *
   * @returns {AutoNumeric}
   */
  selectInteger() {
    let start = 0;
    const isPositive = this.rawValue >= 0;
    if (this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.prefix || this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.suffix && (this.settings.negativePositiveSignPlacement === _AutoNumeric.options.negativePositiveSignPlacement.prefix || this.settings.negativePositiveSignPlacement === _AutoNumeric.options.negativePositiveSignPlacement.none)) {
      if (this.settings.showPositiveSign && isPositive || // This only exclude the positive sign from being selected
      !isPositive && this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.prefix && this.settings.negativePositiveSignPlacement === _AutoNumeric.options.negativePositiveSignPlacement.left) {
        start = start + 1;
      }
    }
    if (this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.prefix) {
      start = start + this.settings.currencySymbol.length;
    }
    const elementValue = AutoNumericHelper.getElementValue(this.domElement);
    let end = elementValue.indexOf(this.settings.decimalCharacter);
    if (end === -1) {
      if (this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.suffix) {
        end = elementValue.length - this.settings.currencySymbol.length;
      } else {
        end = elementValue.length;
      }
      if (!isPositive && (this.settings.negativePositiveSignPlacement === _AutoNumeric.options.negativePositiveSignPlacement.suffix || this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.suffix)) {
        end = end - 1;
      }
      end = end - this.settings.suffixText.length;
    }
    AutoNumericHelper.setElementSelection(this.domElement, start, end);
    return this;
  }
  /**
   * Select only the decimal part in the formatted element content, whatever the value of `selectNumberOnly`
   * Multiple cases are possible :
   * +1.234,57suffixText
   *
   * € +1.234,57suffixText
   * +€ 1.234,57suffixText
   * € 1.234,57+suffixText
   *
   * 1.234,57+ €suffixText
   * 1.234,57 €+suffixText
   * +1.234,57 €suffixText
   *
   * @returns {AutoNumeric}
   */
  selectDecimal() {
    let start = AutoNumericHelper.getElementValue(this.domElement).indexOf(this.settings.decimalCharacter);
    let end;
    if (start === -1) {
      start = 0;
      end = 0;
    } else {
      start = start + 1;
      let decimalCount;
      if (this.isFocused) {
        decimalCount = this.settings.decimalPlacesShownOnFocus;
      } else {
        decimalCount = this.settings.decimalPlacesShownOnBlur;
      }
      end = start + Number(decimalCount);
    }
    AutoNumericHelper.setElementSelection(this.domElement, start, end);
    return this;
  }
  /**
   * Return the DOM element reference of the autoNumeric-managed element
   *
   * @returns {HTMLElement|HTMLInputElement}
   */
  node() {
    return this.domElement;
  }
  /**
   * Return the DOM element reference of the parent node of the autoNumeric-managed element
   *
   * @returns {HTMLElement|HTMLInputElement|Node}
   */
  parent() {
    return this.domElement.parentNode;
  }
  /**
   * Detach the current AutoNumeric element from the shared local 'init' list.
   * This means any changes made on that local shared list will not be transmitted to that element anymore.
   * Note : The user can provide another AutoNumeric element, and detach this one instead of the current one.
   *
   * @param {AutoNumeric} otherAnElement
   * @returns {AutoNumeric}
   */
  detach(otherAnElement = null) {
    let domElementToDetach;
    if (!AutoNumericHelper.isNull(otherAnElement)) {
      domElementToDetach = otherAnElement.node();
    } else {
      domElementToDetach = this.domElement;
    }
    this._removeFromLocalList(domElementToDetach);
    return this;
  }
  /**
   * Attach the given AutoNumeric element to the shared local 'init' list.
   * When doing that, by default the DOM content is left untouched.
   * The user can force a reformat with the new shared list options by passing a second argument to `true`.
   *
   * @param {AutoNumeric} otherAnElement
   * @param {boolean} reFormat
   * @returns {AutoNumeric}
   */
  attach(otherAnElement, reFormat = true) {
    this._addToLocalList(otherAnElement.node());
    if (reFormat) {
      otherAnElement.update(this.settings);
    }
    return this;
  }
  /**
   * Format and return the given value, or set the formatted value into the given DOM element if one is passed as an argument.
   * By default, this use the current element settings.
   * The user can override any option of its choosing by passing an option object.
   *
   * @param {number|HTMLElement|HTMLInputElement} valueOrElement
   * @param {null|object} optionOverride
   * @returns {string|null}
   */
  formatOther(valueOrElement, optionOverride = null) {
    return this._formatOrUnformatOther(true, valueOrElement, optionOverride);
  }
  /**
       * Unformat and return the raw numeric string corresponding to the given value, or directly set the unformatted value into the given DOM element if one is passed as an argument.
       * By default, this use the current element settings.
       * The user can override any option of its choosing by passing an option object.
  
       * @param {string|HTMLElement|HTMLInputElement} stringOrElement
       * @param {null|object} optionOverride
       * @returns {string|null}
       */
  unformatOther(stringOrElement, optionOverride = null) {
    return this._formatOrUnformatOther(false, stringOrElement, optionOverride);
  }
  /**
   * Method that either format or unformat the value of another element.
   *
   * - Format and return the given value, or set the formatted value into the given DOM element if one is passed as an argument.
   * - Unformat and return the raw numeric string corresponding to the given value, or directly set the unformatted value into the given DOM element if one is passed as an argument.
   *
   * By default, this use the current element settings.
   * The user can override any option of its choosing by passing an option object.
   *
   * @param {boolean} isFormatting If set to `true`, then the method formats, otherwise if set to `false`, it unformats
   * @param {number|string|HTMLElement|HTMLInputElement} valueOrStringOrElement
   * @param {null|object} optionOverride
   * @returns {string|null}
   * @private
   */
  _formatOrUnformatOther(isFormatting, valueOrStringOrElement, optionOverride = null) {
    let settingsToUse;
    if (!AutoNumericHelper.isNull(optionOverride)) {
      settingsToUse = this._cloneAndMergeSettings(optionOverride);
    } else {
      settingsToUse = this.settings;
    }
    let result;
    if (AutoNumericHelper.isElement(valueOrStringOrElement)) {
      const elementValue = AutoNumericHelper.getElementValue(valueOrStringOrElement);
      if (isFormatting) {
        result = _AutoNumeric.format(elementValue, settingsToUse);
      } else {
        result = _AutoNumeric.unformat(elementValue, settingsToUse);
      }
      AutoNumericHelper.setElementValue(valueOrStringOrElement, result);
      return null;
    }
    if (isFormatting) {
      result = _AutoNumeric.format(valueOrStringOrElement, settingsToUse);
    } else {
      result = _AutoNumeric.unformat(valueOrStringOrElement, settingsToUse);
    }
    return result;
  }
  /**
   * Use the current AutoNumeric element settings to initialize the DOM element(s) given as a parameter.
   * Doing so will *link* the AutoNumeric elements together since they will share the same local AutoNumeric element list.
   * (cf. prototype pattern : https://en.wikipedia.org/wiki/Prototype_pattern)
   *
   * You can `init` either a single DOM element (in that case an AutoNumeric object will be returned), or an array of DOM elements or a string that will be used as a CSS selector. In the latter cases, an array of AutoNumeric objects will then be returned (or an empty array if nothing gets selected by the CSS selector).
   *
   * Use case : Once you have an AutoNumeric element already setup correctly with the right options, you can use it as many times you want to initialize as many other DOM elements as needed.
   * Note : this works only on elements that can be managed by autoNumeric.
   *
   * @param {HTMLElement|HTMLInputElement|Array<HTMLElement|HTMLInputElement>|string} domElementOrArrayOrString
   * @param {boolean} attached If set to `false`, then the newly generated AutoNumeric element will not share the same local element list
   * @returns {AutoNumeric|[AutoNumeric]}
   */
  init(domElementOrArrayOrString, attached = true) {
    let returnASingleAutoNumericObject = false;
    let domElementsArray = [];
    if (AutoNumericHelper.isString(domElementOrArrayOrString)) {
      domElementsArray = [...document.querySelectorAll(domElementOrArrayOrString)];
    } else if (AutoNumericHelper.isElement(domElementOrArrayOrString)) {
      domElementsArray.push(domElementOrArrayOrString);
      returnASingleAutoNumericObject = true;
    } else if (AutoNumericHelper.isArray(domElementOrArrayOrString)) {
      domElementsArray = domElementOrArrayOrString;
    } else {
      AutoNumericHelper.throwError(`The given parameters to the 'init' function are invalid.`);
    }
    if (domElementsArray.length === 0) {
      AutoNumericHelper.warning(`No valid DOM elements were given hence no AutoNumeric object were instantiated.`, true);
      return [];
    }
    const currentLocalList = this._getLocalList();
    const autoNumericObjectsArray = [];
    domElementsArray.forEach((domElement) => {
      const originalCreateLocalListSetting = this.settings.createLocalList;
      if (attached) {
        this.settings.createLocalList = false;
      }
      const newAutoNumericElement = new _AutoNumeric(domElement, AutoNumericHelper.getElementValue(domElement), this.settings);
      if (attached) {
        newAutoNumericElement._setLocalList(currentLocalList);
        this._addToLocalList(domElement, newAutoNumericElement);
        this.settings.createLocalList = originalCreateLocalListSetting;
      }
      autoNumericObjectsArray.push(newAutoNumericElement);
    });
    if (returnASingleAutoNumericObject) {
      return autoNumericObjectsArray[0];
    }
    return autoNumericObjectsArray;
  }
  /**
   * Reset the element value either to the empty string '', or the currency sign, depending on the `emptyInputBehavior` option value.
   * If you set the `forceClearAll` argument to `true`, then the `emptyInputBehavior` option is overridden and the whole input is clear, including any currency sign.
   *
   * @param {boolean} forceClearAll
   * @returns {AutoNumeric}
   */
  clear(forceClearAll = false) {
    if (forceClearAll) {
      const temporaryForcedOptions = {
        emptyInputBehavior: _AutoNumeric.options.emptyInputBehavior.focus
      };
      this.set("", temporaryForcedOptions);
    } else {
      this.set("");
    }
    return this;
  }
  /**
   * Remove the autoNumeric data and event listeners from the element, but keep the element content intact.
   * This also clears the value from sessionStorage (or cookie, depending on browser supports).
   * Note: this does not remove the formatting.
   *
   * @example anElement.remove()
   */
  remove() {
    this._removeValueFromPersistentStorage();
    this._removeEventListeners();
    this._removeWatcher();
    this._removeFromLocalList(this.domElement);
    this.constructor._removeFromGlobalList(this);
  }
  /**
   * Remove the autoNumeric data and event listeners from the element, and reset its value to the empty string ''.
   * This also clears the value from sessionStorage (or cookie, depending on browser supports).
   *
   * @example anElement.wipe()
   */
  wipe() {
    this._setElementValue("", false);
    this.remove();
  }
  /**
   * Remove the autoNumeric data and event listeners from the element, and delete the DOM element altogether
   */
  nuke() {
    this.remove();
    this.domElement.parentNode.removeChild(this.domElement);
  }
  // Special functions that really work on the parent <form> element, instead of the <input> element itself
  /**
   * Return a reference to the parent <form> element if it exists, otherwise return `null`.
   * If the parent form element as already been found, this directly return a reference to it.
   * However, you can force AutoNumeric to search again for its reference by passing `true` as a parameter to this method.
   * This method updates the `this.parentForm` attribute.
   *
   * In either case, whenever a new parent form is set for the current AutoNumeric element, we make sure to update the anCount and anFormHandler attributes on both the old form and the new one (for instance in case the user moved the input elements with `appendChild()` since AutoNumeric cannot not detect that).
   *
   * @param {boolean} forceSearch If set to `true`, the parent form is searched again, even if `this.parentForm` is already set.
   *
   * @returns {HTMLFormElement|null}
   */
  form(forceSearch = false) {
    if (forceSearch || AutoNumericHelper.isUndefinedOrNullOrEmpty(this.parentForm)) {
      const newParentForm = this._getParentForm();
      if (!AutoNumericHelper.isNull(newParentForm) && newParentForm !== this.parentForm) {
        const oldANChildren = this._getFormAutoNumericChildren(this.parentForm);
        this.parentForm.dataset.anCount = oldANChildren.length;
        if (this._hasFormHandlerFunction(newParentForm)) {
          this._incrementParentFormCounter(newParentForm);
        } else {
          this._storeFormHandlerFunction(newParentForm);
          this._initializeFormCounterToOne(newParentForm);
        }
      }
      this.parentForm = newParentForm;
    }
    return this.parentForm;
  }
  /**
   * Returns an array of the AutoNumeric-managed elements for the given form element is passed, otherwise for the current `this.parentForm` element.
   * This search for <input> elements, as well as contenteditable non-input tag ones. This also search for elements outside the `form` elements.
   *
   * @param {HTMLFormElement|null} formElement
   *
   * @returns {Array.<HTMLInputElement>}
   * @private
   */
  _getFormAutoNumericChildren(formElement) {
    const inputElementsList = [...formElement.elements];
    const nonInputContentEditableElementsList = this._getContenteditableElements(formElement);
    const elementsList = AutoNumericHelper.arrayUnique(inputElementsList, nonInputContentEditableElementsList);
    return elementsList.filter((element) => this.constructor.isManagedByAutoNumeric(element));
  }
  /**
   * Returns an array of the non-input contenteditable elements linked to the given form element.
   * Two types of elements are possible, either located inside the form element, or outside.
   * For the outside elements, this only works if the form element has a defined id and that id is referenced on the non-input element as the `form` attribute.
   * If no elements can be found, then an empty array is returned.
   *
   * @param {HTMLFormElement|null} formElement
   *
   * @returns {Array.<HTMLInputElement>}
   * @private
   */
  _getContenteditableElements(formElement) {
    if (AutoNumericHelper.isUndefinedOrNullOrEmpty(formElement) || !formElement.hasAttribute("id")) {
      return [];
    }
    const elementsInside = [...formElement.querySelectorAll("[contenteditable=true]")];
    const elementsOutside = [...document.querySelectorAll(`*:not(input)[form=${formElement.id}][contenteditable=true]`)];
    return AutoNumericHelper.arrayUnique(elementsInside, elementsOutside);
  }
  /**
   * Returns a reference to the parent <form> element if it exists, otherwise return `null`.
   *
   * @returns {HTMLFormElement|null}
   * @private
   */
  _getParentForm() {
    if (!AutoNumericHelper.isUndefined(this.domElement.form)) return this.domElement.form;
    if (this.domElement.tagName.toLowerCase() === "body") {
      return null;
    }
    let node = this.domElement;
    let tagName;
    do {
      node = node.parentNode;
      if (AutoNumericHelper.isNull(node)) {
        return null;
      }
      if (node.tagName) {
        tagName = node.tagName.toLowerCase();
      } else {
        tagName = "";
      }
      if (tagName === "body") {
        break;
      }
    } while (tagName !== "form");
    if (tagName === "form") {
      return node;
    } else {
      return null;
    }
  }
  /**
   * Return a string in standard URL-encoded notation with the form input values being unformatted.
   * This string can be used as a query for instance.
   *
   * @returns {string}
   */
  formNumericString() {
    return this.constructor._serializeNumericString(this.form(), this.settings.serializeSpaces);
  }
  /**
   * Return a string in standard URL-encoded notation with the form input values being formatted.
   *
   * @returns {string}
   */
  formFormatted() {
    return this.constructor._serializeFormatted(this.form(), this.settings.serializeSpaces);
  }
  /**
   * Return a string in standard URL-encoded notation with the form input values, with localized values.
   * The default output format can be overridden by passing the option as a parameter.
   *
   * @param {null|string} forcedOutputFormat If set to something different from `null`, then this is used as an overriding outputFormat option
   * @returns {string}
   */
  formLocalized(forcedOutputFormat = null) {
    let outputFormatToUse;
    if (AutoNumericHelper.isNull(forcedOutputFormat)) {
      outputFormatToUse = this.settings.outputFormat;
    } else {
      outputFormatToUse = forcedOutputFormat;
    }
    return this.constructor._serializeLocalized(this.form(), this.settings.serializeSpaces, outputFormatToUse);
  }
  /**
   * Return an array containing an object for each form <input> element.
   * Those objects are of the following structure `{ name: foo, value: '42' }`, where the `name` is the DOM element name, and the `value` is an unformatted numeric string.
   *
   * @returns {Array}
   */
  formArrayNumericString() {
    return this.constructor._serializeNumericStringArray(this.form(), this.settings.serializeSpaces);
  }
  /**
   * Return an array containing an object for each form <input> element.
   * Those objects are of the following structure `{ name: foo, value: '42' }`, where the `name` is the DOM element name, and the `value` is the formatted string.
   *
   * @returns {Array}
   */
  formArrayFormatted() {
    return this.constructor._serializeFormattedArray(this.form(), this.settings.serializeSpaces);
  }
  /**
   * Return an array containing an object for each form <input> element.
   * Those objects are of the following structure `{ name: foo, value: '42' }`, where the `name` is the DOM element name, and the `value` is the localized numeric string.
   *
   * @param {null|string} forcedOutputFormat If set to something different from `null`, then this is used as an overriding outputFormat option
   * @returns {Array}
   */
  formArrayLocalized(forcedOutputFormat = null) {
    let outputFormatToUse;
    if (AutoNumericHelper.isNull(forcedOutputFormat)) {
      outputFormatToUse = this.settings.outputFormat;
    } else {
      outputFormatToUse = forcedOutputFormat;
    }
    return this.constructor._serializeLocalizedArray(this.form(), this.settings.serializeSpaces, outputFormatToUse);
  }
  /**
   * Return a JSON string containing an object representing the form input values.
   * This is based on the result of the `formArrayNumericString()` function.
   *
   * @returns {string}
   */
  formJsonNumericString() {
    return JSON.stringify(this.formArrayNumericString());
  }
  /**
   * Return a JSON string containing an object representing the form input values.
   * This is based on the result of the `formArrayFormatted()` function.
   *
   * @returns {string}
   */
  formJsonFormatted() {
    return JSON.stringify(this.formArrayFormatted());
  }
  /**
   * Return a JSON string containing an object representing the form input values.
   * This is based on the result of the `formArrayLocalized()` function.
   *
   * @param {null|string} forcedOutputFormat If set to something different from `null`, then this is used as an overriding outputFormat option
   * @returns {string}
   */
  formJsonLocalized(forcedOutputFormat = null) {
    return JSON.stringify(this.formArrayLocalized(forcedOutputFormat));
  }
  /**
   * Unformat all the autoNumeric-managed elements that are a child of the parent <form> element of this DOM element, to numeric strings
   *
   * @returns {AutoNumeric}
   */
  formUnformat() {
    const inputs = this.constructor._getChildANInputElement(this.form());
    inputs.forEach((input) => {
      _AutoNumeric.getAutoNumericElement(input).unformat();
    });
    return this;
  }
  /**
   * Unformat all the autoNumeric-managed elements that are a child of the parent <form> element of this DOM element, to localized strings
   *
   * @returns {AutoNumeric}
   */
  formUnformatLocalized() {
    const inputs = this.constructor._getChildANInputElement(this.form());
    inputs.forEach((input) => {
      _AutoNumeric.getAutoNumericElement(input).unformatLocalized();
    });
    return this;
  }
  /**
   * Reformat all the autoNumeric-managed elements that are a child of the parent <form> element of this DOM element
   *
   * @returns {AutoNumeric}
   */
  formReformat() {
    const inputs = this.constructor._getChildANInputElement(this.form());
    inputs.forEach((input) => {
      _AutoNumeric.getAutoNumericElement(input).reformat();
    });
    return this;
  }
  /**
   * Convert the input values to numeric strings, submit the form, then reformat those back.
   * The function can either take a callback, or not. If it doesn't, the default `form.submit()` function will be called.
   * Otherwise, it runs `callback(value)` with `value` being equal to the result of `formNumericString()`.
   *
   * @param {function|null} callback
   * @returns {AutoNumeric}
   */
  formSubmitNumericString(callback = null) {
    if (AutoNumericHelper.isNull(callback)) {
      this.formUnformat();
      this.form().submit();
      this.formReformat();
    } else if (AutoNumericHelper.isFunction(callback)) {
      callback(this.formNumericString());
    } else {
      AutoNumericHelper.throwError(`The given callback is not a function.`);
    }
    return this;
  }
  /**
   * Submit the form with the current formatted values.
   * The function can either take a callback, or not. If it doesn't, the default `form.submit()` function will be called.
   * Otherwise, it runs `callback(value)` with `value` being equal to the result of `formFormatted()`.
   *
   * @param {function|null} callback
   * @returns {AutoNumeric}
   */
  formSubmitFormatted(callback = null) {
    if (AutoNumericHelper.isNull(callback)) {
      this.form().submit();
    } else if (AutoNumericHelper.isFunction(callback)) {
      callback(this.formFormatted());
    } else {
      AutoNumericHelper.throwError(`The given callback is not a function.`);
    }
    return this;
  }
  /**
   * Convert the input values to localized strings, submit the form, then reformat those back.
   * The function can either take a callback, or not. If it doesn't, the default `form.submit()` function will be called.
   * Otherwise, it runs `callback(value)` with `value` being equal to the result of `formLocalized()`.
   *
   * @param {null|string} forcedOutputFormat If set to something different from `null`, then this is used as an overriding outputFormat option
   * @param {function|null} callback
   * @returns {AutoNumeric}
   */
  formSubmitLocalized(forcedOutputFormat = null, callback = null) {
    if (AutoNumericHelper.isNull(callback)) {
      this.formUnformatLocalized();
      this.form().submit();
      this.formReformat();
    } else if (AutoNumericHelper.isFunction(callback)) {
      callback(this.formLocalized(forcedOutputFormat));
    } else {
      AutoNumericHelper.throwError(`The given callback is not a function.`);
    }
    return this;
  }
  /**
   * Generate an array of numeric strings from the `<input>` elements, and pass it to the given callback.
   * Under the hood, the array is generated via a call to `formArrayNumericString()`.
   *
   * @param {function} callback
   * @returns {AutoNumeric}
   */
  formSubmitArrayNumericString(callback) {
    if (AutoNumericHelper.isFunction(callback)) {
      callback(this.formArrayNumericString());
    } else {
      AutoNumericHelper.throwError(`The given callback is not a function.`);
    }
    return this;
  }
  /**
   * Generate an array of the current formatted values from the `<input>` elements, and pass it to the given callback.
   * Under the hood, the array is generated via a call to `formArrayFormatted()`.
   *
   * @param {function} callback
   * @returns {AutoNumeric}
   */
  formSubmitArrayFormatted(callback) {
    if (AutoNumericHelper.isFunction(callback)) {
      callback(this.formArrayFormatted());
    } else {
      AutoNumericHelper.throwError(`The given callback is not a function.`);
    }
    return this;
  }
  /**
   * Generate an array of localized strings from the `<input>` elements, and pass it to the given callback.
   * Under the hood, the array is generated via a call to `formArrayLocalized()`.
   *
   * @param {function} callback
   * @param {null|string} forcedOutputFormat If set to something different from `null`, then this is used as an overriding outputFormat option
   * @returns {AutoNumeric}
   */
  formSubmitArrayLocalized(callback, forcedOutputFormat = null) {
    if (AutoNumericHelper.isFunction(callback)) {
      callback(this.formArrayLocalized(forcedOutputFormat));
    } else {
      AutoNumericHelper.throwError(`The given callback is not a function.`);
    }
    return this;
  }
  /**
   * Generate a JSON string with the numeric strings values from the `<input>` elements, and pass it to the given callback.
   * Under the hood, the array is generated via a call to `formJsonNumericString()`.
   *
   * @param {function} callback
   * @returns {AutoNumeric}
   */
  formSubmitJsonNumericString(callback) {
    if (AutoNumericHelper.isFunction(callback)) {
      callback(this.formJsonNumericString());
    } else {
      AutoNumericHelper.throwError(`The given callback is not a function.`);
    }
    return this;
  }
  /**
   * Generate a JSON string with the current formatted values from the `<input>` elements, and pass it to the given callback.
   * Under the hood, the array is generated via a call to `formJsonFormatted()`.
   *
   * @param {function} callback
   * @returns {AutoNumeric}
   */
  formSubmitJsonFormatted(callback) {
    if (AutoNumericHelper.isFunction(callback)) {
      callback(this.formJsonFormatted());
    } else {
      AutoNumericHelper.throwError(`The given callback is not a function.`);
    }
    return this;
  }
  /**
   * Generate a JSON string with the localized strings values from the `<input>` elements, and pass it to the given callback.
   * Under the hood, the array is generated via a call to `formJsonLocalized()`.
   *
   * @param {function} callback
   * @param {null|string} forcedOutputFormat If set to something different from `null`, then this is used as an overriding outputFormat option
   * @returns {AutoNumeric}
   */
  formSubmitJsonLocalized(callback, forcedOutputFormat = null) {
    if (AutoNumericHelper.isFunction(callback)) {
      callback(this.formJsonLocalized(forcedOutputFormat));
    } else {
      AutoNumericHelper.throwError(`The given callback is not a function.`);
    }
    return this;
  }
  /**
   * Unformat the given AutoNumeric element, and update the `hoveredWithAlt` variable.
   *
   * @param {AutoNumeric} anElement
   * @private
   */
  static _unformatAltHovered(anElement) {
    anElement.hoveredWithAlt = true;
    anElement.unformat();
  }
  /**
   * Reformat the given AutoNumeric element, and update the `hoveredWithAlt` variable.
   *
   * @param {AutoNumeric} anElement
   * @private
   */
  static _reformatAltHovered(anElement) {
    anElement.hoveredWithAlt = false;
    anElement.reformat();
  }
  /**
   * Return an array of autoNumeric elements, child of the <form> element passed as a parameter.
   *
   * @param {HTMLElement} formNode
   * @returns {Array}
   * @private
   */
  static _getChildANInputElement(formNode) {
    const inputList = formNode.getElementsByTagName("input");
    const autoNumericInputs = [];
    const inputElements = Array.prototype.slice.call(inputList, 0);
    inputElements.forEach((input) => {
      if (this.test(input)) {
        autoNumericInputs.push(input);
      }
    });
    return autoNumericInputs;
  }
  // Static methods
  /**
   * Test if the given DOM element, or the element selected by the given selector string is already managed by AutoNumeric (if it has been initialized on the current page).
   *
   * @param {HTMLElement|string} domElementOrSelector Accepts either directly a DOM element to test, or a string selector (that will return one and only one element, if any)
   * @returns {boolean}
   */
  static test(domElementOrSelector) {
    return this._isInGlobalList(AutoNumericHelper.domElement(domElementOrSelector));
  }
  /**
   * Create a WeakMap with the given name.
   *
   * @param {string} weakMapName
   * @private
   */
  static _createWeakMap(weakMapName) {
    window[weakMapName] = /* @__PURE__ */ new WeakMap();
  }
  /**
   * Create a list of all the AutoNumeric elements that are initialized on the current page.
   * This is needed in order to determine if a given dom element is already managed by autoNumeric.
   * This uses a WeakMap in order to limit potential garbage collection problems.
   * (cf. my tests on http://codepen.io/AnotherLinuxUser/pen/pRQGaM?editors=1011)
   * @private
   */
  static _createGlobalList() {
    this.autoNumericGlobalListName = "autoNumericGlobalList";
    this._createWeakMap(this.autoNumericGlobalListName);
  }
  /**
   * Return `true` if the global AutoNumeric element list exists.
   *
   * @returns {boolean}
   * @private
   */
  static _doesGlobalListExists() {
    const type = typeof window[this.autoNumericGlobalListName];
    return type !== "undefined" && type === "object";
  }
  /**
   * Add the given object to the global AutoNumeric element list.
   *
   * @param {AutoNumeric} autoNumericObject
   * @private
   */
  static _addToGlobalList(autoNumericObject) {
    if (!this._doesGlobalListExists()) {
      this._createGlobalList();
    }
    const domElement = autoNumericObject.node();
    if (this._isInGlobalList(domElement)) {
      if (this._getFromGlobalList(domElement) === this) {
        return;
      } else {
        AutoNumericHelper.warning(`A reference to the DOM element you just initialized already exists in the global AutoNumeric element list. Please make sure to not initialize the same DOM element multiple times.`, autoNumericObject.getSettings().showWarnings);
      }
    }
    window[this.autoNumericGlobalListName].set(domElement, autoNumericObject);
  }
  /**
   * Remove the given object from the global AutoNumeric element list.
   *
   * @param {AutoNumeric} autoNumericObject
   * @private
   */
  static _removeFromGlobalList(autoNumericObject) {
    if (this._doesGlobalListExists()) {
      window[this.autoNumericGlobalListName].delete(autoNumericObject.node());
    }
  }
  /**
   * Return the value associated to the key `domElement` passed as a parameter.
   * The value is the AutoNumeric object that manages the DOM element `domElement`.
   *
   * @param {HTMLElement|HTMLInputElement} domElement
   * @returns {null|AutoNumeric}
   * @private
   */
  static _getFromGlobalList(domElement) {
    if (this._doesGlobalListExists()) {
      return window[this.autoNumericGlobalListName].get(domElement);
    }
    return null;
  }
  /**
   * Check if the given DOM element is in the global AutoNumeric element list.
   *
   * @param {HTMLElement|HTMLInputElement} domElement
   * @returns {boolean}
   * @private
   */
  static _isInGlobalList(domElement) {
    if (!this._doesGlobalListExists()) {
      return false;
    }
    return window[this.autoNumericGlobalListName].has(domElement);
  }
  /**
   * Create a `Map` that will store all the autoNumeric elements that are initialized from this current element.
   * @private
   */
  _createLocalList() {
    this.autoNumericLocalList = /* @__PURE__ */ new Map();
    this._addToLocalList(this.domElement);
  }
  /**
   * In some rare cases, you could want to delete the local list generated during the element initialization (in order to use another one instead for instance).
   * @private
   */
  _deleteLocalList() {
    delete this.autoNumericLocalList;
  }
  /**
   * Set the local list with the given Map object.
   *
   * @param {Map} localList
   * @private
   */
  _setLocalList(localList) {
    this.autoNumericLocalList = localList;
  }
  /**
   * Return the local list Map object.
   *
   * @returns {*|Map}
   * @private
   */
  _getLocalList() {
    return this.autoNumericLocalList;
  }
  /**
   * Return `true` if the AutoNumeric object has a local list defined already and has at least one element in it (itself usually).
   *
   * @returns {boolean}
   * @private
   */
  _hasLocalList() {
    return this.autoNumericLocalList instanceof Map && this.autoNumericLocalList.size !== 0;
  }
  /**
   * Add the given object to the local autoNumeric element list.
   * Note: in order to keep a coherent list, we only add DOM elements in it, not the autoNumeric object.
   *
   * @param {HTMLElement|HTMLInputElement} domElement
   * @param {AutoNumeric} autoNumericObject A reference to the AutoNumeric object that manage the given DOM element
   * @throws
   * @private
   */
  _addToLocalList(domElement, autoNumericObject = null) {
    if (AutoNumericHelper.isNull(autoNumericObject)) {
      autoNumericObject = this;
    }
    if (!AutoNumericHelper.isUndefined(this.autoNumericLocalList)) {
      this.autoNumericLocalList.set(domElement, autoNumericObject);
    } else {
      AutoNumericHelper.throwError(`The local list provided does not exists when trying to add an element. [${this.autoNumericLocalList}] given.`);
    }
  }
  /**
   * Remove the given object from the local autoNumeric element list.
   *
   * @param {HTMLElement|HTMLInputElement} domElement
   * @private
   */
  _removeFromLocalList(domElement) {
    if (!AutoNumericHelper.isUndefined(this.autoNumericLocalList)) {
      this.autoNumericLocalList.delete(domElement);
    } else if (this.settings.createLocalList) {
      AutoNumericHelper.throwError(`The local list provided does not exists when trying to remove an element. [${this.autoNumericLocalList}] given.`);
    }
  }
  /**
   * Merge the `newSettings` given as parameters into the current element settings.
   *
   * WARNING: Using `Object.assign()` here means the merge is not recursive and only one depth is merged.
   * cf. http://stackoverflow.com/a/39188108/2834898
   * cf. tests on http://codepen.io/AnotherLinuxUser/pen/KaJORq?editors=0011
   *
   * @param {object} newSettings
   * @private
   */
  _mergeSettings(...newSettings) {
    Object.assign(this.settings, ...newSettings);
  }
  /**
   * Return a new object with the current element settings merged with the new settings.
   *
   * @param {object} newSettings
   * @returns {object}
   * @private
   */
  _cloneAndMergeSettings(...newSettings) {
    const result = {};
    Object.assign(result, this.settings, ...newSettings);
    return result;
  }
  /**
   * Validate the given option object.
   * If the options are valid, this function returns nothing, otherwise if the options are invalid, this function throws an error.
   *
   * This tests if the options are not conflicting and are well formatted.
   * This function is lenient since it only tests the settings properties ; it ignores any other properties the options object could have.
   *
   * @param {*} userOptions
   * @param {Boolean} shouldExtendDefaultOptions If `true`, then this function will extend the `userOptions` passed by the user, with the default options.
   * @param {object|null} originalOptions The user can pass the original options (and not the one that are generated from the default settings and the various usability corrections), in order to add compatibility and conflicts checks.
   * @throws Error This throws if the `userOptions` are not valid
   */
  static validate(userOptions, shouldExtendDefaultOptions = true, originalOptions = null) {
    if (AutoNumericHelper.isUndefinedOrNullOrEmpty(userOptions) || !AutoNumericHelper.isObject(userOptions)) {
      AutoNumericHelper.throwError(`The userOptions are invalid ; it should be a valid object, [${userOptions}] given.`);
    }
    const isOriginalOptionAnObject = AutoNumericHelper.isObject(originalOptions);
    if (!isOriginalOptionAnObject && !AutoNumericHelper.isNull(originalOptions)) {
      AutoNumericHelper.throwError(`The 'originalOptions' parameter is invalid ; it should either be a valid option object or \`null\`, [${userOptions}] given.`);
    }
    if (!AutoNumericHelper.isNull(userOptions)) {
      this._convertOldOptionsToNewOnes(userOptions);
    }
    let options;
    if (shouldExtendDefaultOptions) {
      options = Object.assign({}, this.getDefaultConfig(), userOptions);
    } else {
      options = userOptions;
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.showWarnings) && !AutoNumericHelper.isBoolean(options.showWarnings)) {
      AutoNumericHelper.throwError(`The debug option 'showWarnings' is invalid ; it should be either 'true' or 'false', [${options.showWarnings}] given.`);
    }
    const testPositiveInteger = /^[0-9]+$/;
    const testNumericalCharacters = /[0-9]+/;
    const testFloatOrIntegerAndPossibleNegativeSign = /^-?[0-9]+(\.?[0-9]+)?$/;
    const testPositiveFloatOrInteger = /^[0-9]+(\.?[0-9]+)?$/;
    if (!AutoNumericHelper.isTrueOrFalseString(options.allowDecimalPadding) && !AutoNumericHelper.isBoolean(options.allowDecimalPadding) && options.allowDecimalPadding !== _AutoNumeric.options.allowDecimalPadding.floats && !(AutoNumericHelper.isNumber(options.allowDecimalPadding) && options.allowDecimalPadding > 0)) {
      AutoNumericHelper.throwError(`The decimal padding option 'allowDecimalPadding' is invalid ; it should either be \`false\`, \`true\`, \`'floats'\` or a positive integer superior to 0, [${options.allowDecimalPadding}] given.`);
    }
    if (AutoNumericHelper.isNumber(options.allowDecimalPadding) && options.allowDecimalPadding > options.decimalPlaces) {
      AutoNumericHelper.warning(`Setting 'allowDecimalPadding' to a number [${options.allowDecimalPadding}] superior to the current 'decimalPlaces' settings [${options.decimalPlaces}] is useless, since the padding will not be shown.`, options.showWarnings);
    }
    if ((options.allowDecimalPadding === _AutoNumeric.options.allowDecimalPadding.never || options.allowDecimalPadding === "false") && (options.decimalPlaces !== _AutoNumeric.options.decimalPlaces.none || options.decimalPlacesShownOnBlur !== _AutoNumeric.options.decimalPlacesShownOnBlur.none || options.decimalPlacesShownOnFocus !== _AutoNumeric.options.decimalPlacesShownOnFocus.none)) {
      AutoNumericHelper.warning(`Setting 'allowDecimalPadding' to [${options.allowDecimalPadding}] will override the current 'decimalPlaces*' settings [${options.decimalPlaces}, ${options.decimalPlacesShownOnBlur} and ${options.decimalPlacesShownOnFocus}].`, options.showWarnings);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.alwaysAllowDecimalCharacter) && !AutoNumericHelper.isBoolean(options.alwaysAllowDecimalCharacter)) {
      AutoNumericHelper.throwError(`The option 'alwaysAllowDecimalCharacter' is invalid ; it should either be \`true\` or \`false\`, [${options.alwaysAllowDecimalCharacter}] given.`);
    }
    if (!AutoNumericHelper.isNull(options.caretPositionOnFocus) && !AutoNumericHelper.isInArray(options.caretPositionOnFocus, [
      _AutoNumeric.options.caretPositionOnFocus.start,
      _AutoNumeric.options.caretPositionOnFocus.end,
      _AutoNumeric.options.caretPositionOnFocus.decimalLeft,
      _AutoNumeric.options.caretPositionOnFocus.decimalRight
    ])) {
      AutoNumericHelper.throwError(`The display on empty string option 'caretPositionOnFocus' is invalid ; it should either be \`null\`, 'focus', 'press', 'always' or 'zero', [${options.caretPositionOnFocus}] given.`);
    }
    let optionsToUse;
    if (isOriginalOptionAnObject) {
      optionsToUse = originalOptions;
    } else {
      optionsToUse = this._correctCaretPositionOnFocusAndSelectOnFocusOptions(userOptions);
    }
    if (!AutoNumericHelper.isNull(optionsToUse) && (optionsToUse.caretPositionOnFocus !== _AutoNumeric.options.caretPositionOnFocus.doNoForceCaretPosition && optionsToUse.selectOnFocus === _AutoNumeric.options.selectOnFocus.select)) {
      AutoNumericHelper.warning(`The 'selectOnFocus' option is set to 'select', which is in conflict with the 'caretPositionOnFocus' which is set to '${optionsToUse.caretPositionOnFocus}'. As a result, if this has been called when instantiating an AutoNumeric object, the 'selectOnFocus' option is forced to 'doNotSelect'.`, options.showWarnings);
    }
    if (!AutoNumericHelper.isInArray(options.digitGroupSeparator, [
      _AutoNumeric.options.digitGroupSeparator.comma,
      _AutoNumeric.options.digitGroupSeparator.dot,
      _AutoNumeric.options.digitGroupSeparator.normalSpace,
      _AutoNumeric.options.digitGroupSeparator.thinSpace,
      _AutoNumeric.options.digitGroupSeparator.narrowNoBreakSpace,
      _AutoNumeric.options.digitGroupSeparator.noBreakSpace,
      _AutoNumeric.options.digitGroupSeparator.noSeparator,
      _AutoNumeric.options.digitGroupSeparator.apostrophe,
      _AutoNumeric.options.digitGroupSeparator.arabicThousandsSeparator,
      _AutoNumeric.options.digitGroupSeparator.dotAbove,
      _AutoNumeric.options.digitGroupSeparator.privateUseTwo
    ])) {
      AutoNumericHelper.throwError(`The thousand separator character option 'digitGroupSeparator' is invalid ; it should be ',', '.', '٬', '˙', "'", '', ' ', ' ', ' ', ' ' or empty (''), [${options.digitGroupSeparator}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.showOnlyNumbersOnFocus) && !AutoNumericHelper.isBoolean(options.showOnlyNumbersOnFocus)) {
      AutoNumericHelper.throwError(`The 'showOnlyNumbersOnFocus' option is invalid ; it should be either 'true' or 'false', [${options.showOnlyNumbersOnFocus}] given.`);
    }
    if (!AutoNumericHelper.isInArray(options.digitalGroupSpacing, [
      _AutoNumeric.options.digitalGroupSpacing.two,
      _AutoNumeric.options.digitalGroupSpacing.twoThree,
      _AutoNumeric.options.digitalGroupSpacing.twoScaled,
      _AutoNumeric.options.digitalGroupSpacing.three,
      _AutoNumeric.options.digitalGroupSpacing.four
    ]) && !(options.digitalGroupSpacing >= 2 && options.digitalGroupSpacing <= 4)) {
      AutoNumericHelper.throwError(`The grouping separator option for thousands 'digitalGroupSpacing' is invalid ; it should be '2', '2t', '2s', '3', or '4', [${options.digitalGroupSpacing}] given.`);
    }
    if (!AutoNumericHelper.isInArray(options.decimalCharacter, [
      _AutoNumeric.options.decimalCharacter.comma,
      _AutoNumeric.options.decimalCharacter.dot,
      _AutoNumeric.options.decimalCharacter.middleDot,
      _AutoNumeric.options.decimalCharacter.arabicDecimalSeparator,
      _AutoNumeric.options.decimalCharacter.decimalSeparatorKeySymbol
    ])) {
      AutoNumericHelper.throwError(`The decimal separator character option 'decimalCharacter' is invalid ; it should be '.', ',', '·', '⎖' or '٫', [${options.decimalCharacter}] given.`);
    }
    if (options.decimalCharacter === options.digitGroupSeparator) {
      AutoNumericHelper.throwError(`autoNumeric will not function properly when the decimal character 'decimalCharacter' [${options.decimalCharacter}] and the thousand separator 'digitGroupSeparator' [${options.digitGroupSeparator}] are the same character.`);
    }
    if (!AutoNumericHelper.isNull(options.decimalCharacterAlternative) && !AutoNumericHelper.isString(options.decimalCharacterAlternative)) {
      AutoNumericHelper.throwError(`The alternate decimal separator character option 'decimalCharacterAlternative' is invalid ; it should be a string, [${options.decimalCharacterAlternative}] given.`);
    }
    if (options.currencySymbol !== "" && !AutoNumericHelper.isString(options.currencySymbol)) {
      AutoNumericHelper.throwError(`The currency symbol option 'currencySymbol' is invalid ; it should be a string, [${options.currencySymbol}] given.`);
    }
    if (!AutoNumericHelper.isInArray(options.currencySymbolPlacement, [
      _AutoNumeric.options.currencySymbolPlacement.prefix,
      _AutoNumeric.options.currencySymbolPlacement.suffix
    ])) {
      AutoNumericHelper.throwError(`The placement of the currency sign option 'currencySymbolPlacement' is invalid ; it should either be 'p' (prefix) or 's' (suffix), [${options.currencySymbolPlacement}] given.`);
    }
    if (!AutoNumericHelper.isInArray(options.negativePositiveSignPlacement, [
      _AutoNumeric.options.negativePositiveSignPlacement.prefix,
      _AutoNumeric.options.negativePositiveSignPlacement.suffix,
      _AutoNumeric.options.negativePositiveSignPlacement.left,
      _AutoNumeric.options.negativePositiveSignPlacement.right,
      _AutoNumeric.options.negativePositiveSignPlacement.none
    ])) {
      AutoNumericHelper.throwError(`The placement of the negative sign option 'negativePositiveSignPlacement' is invalid ; it should either be 'p' (prefix), 's' (suffix), 'l' (left), 'r' (right) or 'null', [${options.negativePositiveSignPlacement}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.showPositiveSign) && !AutoNumericHelper.isBoolean(options.showPositiveSign)) {
      AutoNumericHelper.throwError(`The show positive sign option 'showPositiveSign' is invalid ; it should be either 'true' or 'false', [${options.showPositiveSign}] given.`);
    }
    if (!AutoNumericHelper.isString(options.suffixText) || options.suffixText !== "" && (AutoNumericHelper.isNegative(options.suffixText, options.negativeSignCharacter) || testNumericalCharacters.test(options.suffixText))) {
      AutoNumericHelper.throwError(`The additional suffix option 'suffixText' is invalid ; it should not contains the negative sign '${options.negativeSignCharacter}' nor any numerical characters, [${options.suffixText}] given.`);
    }
    if (!AutoNumericHelper.isString(options.negativeSignCharacter) || options.negativeSignCharacter.length !== 1 || AutoNumericHelper.isUndefinedOrNullOrEmpty(options.negativeSignCharacter) || testNumericalCharacters.test(options.negativeSignCharacter)) {
      AutoNumericHelper.throwError(`The negative sign character option 'negativeSignCharacter' is invalid ; it should be a single character, and cannot be any numerical characters, [${options.negativeSignCharacter}] given.`);
    }
    if (!AutoNumericHelper.isString(options.positiveSignCharacter) || options.positiveSignCharacter.length !== 1 || AutoNumericHelper.isUndefinedOrNullOrEmpty(options.positiveSignCharacter) || testNumericalCharacters.test(options.positiveSignCharacter)) {
      AutoNumericHelper.throwError(`The positive sign character option 'positiveSignCharacter' is invalid ; it should be a single character, and cannot be any numerical characters, [${options.positiveSignCharacter}] given.
If you want to show the positive sign character, you need to set the \`showPositiveSign\` option to \`true\`.`);
    }
    if (options.negativeSignCharacter === options.positiveSignCharacter) {
      AutoNumericHelper.throwError(`The positive 'positiveSignCharacter' and negative 'negativeSignCharacter' sign characters cannot be identical ; [${options.negativeSignCharacter}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.negativePositiveSignBehavior) && !AutoNumericHelper.isBoolean(options.negativePositiveSignBehavior)) {
      AutoNumericHelper.throwError(`The option 'negativePositiveSignBehavior' is invalid ; it should be either 'true' or 'false', [${options.negativePositiveSignBehavior}] given.`);
    }
    const [leftBracket, rightBracket] = AutoNumericHelper.isNull(options.negativeBracketsTypeOnBlur) ? ["", ""] : options.negativeBracketsTypeOnBlur.split(",");
    if (AutoNumericHelper.contains(options.digitGroupSeparator, options.negativeSignCharacter) || AutoNumericHelper.contains(options.decimalCharacter, options.negativeSignCharacter) || AutoNumericHelper.contains(options.decimalCharacterAlternative, options.negativeSignCharacter) || AutoNumericHelper.contains(leftBracket, options.negativeSignCharacter) || AutoNumericHelper.contains(rightBracket, options.negativeSignCharacter) || AutoNumericHelper.contains(options.suffixText, options.negativeSignCharacter)) {
      AutoNumericHelper.throwError(`The negative sign character option 'negativeSignCharacter' is invalid ; it should not be equal or a part of the digit separator, the decimal character, the decimal character alternative, the negative brackets or the suffix text, [${options.negativeSignCharacter}] given.`);
    }
    if (AutoNumericHelper.contains(options.digitGroupSeparator, options.positiveSignCharacter) || AutoNumericHelper.contains(options.decimalCharacter, options.positiveSignCharacter) || AutoNumericHelper.contains(options.decimalCharacterAlternative, options.positiveSignCharacter) || AutoNumericHelper.contains(leftBracket, options.positiveSignCharacter) || AutoNumericHelper.contains(rightBracket, options.positiveSignCharacter) || AutoNumericHelper.contains(options.suffixText, options.positiveSignCharacter)) {
      AutoNumericHelper.throwError(`The positive sign character option 'positiveSignCharacter' is invalid ; it should not be equal or a part of the digit separator, the decimal character, the decimal character alternative, the negative brackets or the suffix text, [${options.positiveSignCharacter}] given.`);
    }
    if (!AutoNumericHelper.isNull(options.overrideMinMaxLimits) && !AutoNumericHelper.isInArray(options.overrideMinMaxLimits, [
      _AutoNumeric.options.overrideMinMaxLimits.ceiling,
      _AutoNumeric.options.overrideMinMaxLimits.floor,
      _AutoNumeric.options.overrideMinMaxLimits.ignore,
      _AutoNumeric.options.overrideMinMaxLimits.invalid
    ])) {
      AutoNumericHelper.throwError(`The override min & max limits option 'overrideMinMaxLimits' is invalid ; it should either be 'ceiling', 'floor', 'ignore' or 'invalid', [${options.overrideMinMaxLimits}] given.`);
    }
    if (options.overrideMinMaxLimits !== _AutoNumeric.options.overrideMinMaxLimits.invalid && options.overrideMinMaxLimits !== _AutoNumeric.options.overrideMinMaxLimits.ignore && (options.minimumValue > 0 || options.maximumValue < 0)) {
      AutoNumericHelper.warning(`You've set a \`minimumValue\` or a \`maximumValue\` excluding the value \`0\`. AutoNumeric will force the users to always have a valid value in the input, hence preventing them to clear the field. If you want to allow for temporary invalid values (i.e. out-of-range), you should use the 'invalid' option for the 'overrideMinMaxLimits' setting.`);
    }
    if (!AutoNumericHelper.isString(options.maximumValue) || !testFloatOrIntegerAndPossibleNegativeSign.test(options.maximumValue)) {
      AutoNumericHelper.throwError(`The maximum possible value option 'maximumValue' is invalid ; it should be a string that represents a positive or negative number, [${options.maximumValue}] given.`);
    }
    if (!AutoNumericHelper.isString(options.minimumValue) || !testFloatOrIntegerAndPossibleNegativeSign.test(options.minimumValue)) {
      AutoNumericHelper.throwError(`The minimum possible value option 'minimumValue' is invalid ; it should be a string that represents a positive or negative number, [${options.minimumValue}] given.`);
    }
    if (parseFloat(options.minimumValue) > parseFloat(options.maximumValue)) {
      AutoNumericHelper.throwError(`The minimum possible value option is greater than the maximum possible value option ; 'minimumValue' [${options.minimumValue}] should be smaller than 'maximumValue' [${options.maximumValue}].`);
    }
    if (!(AutoNumericHelper.isInt(options.decimalPlaces) && options.decimalPlaces >= 0 || // If integer option
    AutoNumericHelper.isString(options.decimalPlaces) && testPositiveInteger.test(options.decimalPlaces))) {
      AutoNumericHelper.throwError(`The number of decimal places option 'decimalPlaces' is invalid ; it should be a positive integer, [${options.decimalPlaces}] given.`);
    }
    if (!(AutoNumericHelper.isNull(options.decimalPlacesRawValue) || AutoNumericHelper.isInt(options.decimalPlacesRawValue) && options.decimalPlacesRawValue >= 0 || // If integer option
    AutoNumericHelper.isString(options.decimalPlacesRawValue) && testPositiveInteger.test(options.decimalPlacesRawValue))) {
      AutoNumericHelper.throwError(`The number of decimal places for the raw value option 'decimalPlacesRawValue' is invalid ; it should be a positive integer or \`null\`, [${options.decimalPlacesRawValue}] given.`);
    }
    this._validateDecimalPlacesRawValue(options);
    if (!AutoNumericHelper.isNull(options.decimalPlacesShownOnFocus) && !testPositiveInteger.test(String(options.decimalPlacesShownOnFocus))) {
      AutoNumericHelper.throwError(`The number of expanded decimal places option 'decimalPlacesShownOnFocus' is invalid ; it should be a positive integer or \`null\`, [${options.decimalPlacesShownOnFocus}] given.`);
    }
    if (!AutoNumericHelper.isNull(options.decimalPlacesShownOnFocus) && Number(options.decimalPlaces) > Number(options.decimalPlacesShownOnFocus)) {
      AutoNumericHelper.warning(`The extended decimal places 'decimalPlacesShownOnFocus' [${options.decimalPlacesShownOnFocus}] should be greater than the 'decimalPlaces' [${options.decimalPlaces}] value. Currently, this will limit the ability of your user to manually change some of the decimal places. Do you really want to do that?`, options.showWarnings);
    }
    if (!AutoNumericHelper.isNull(options.divisorWhenUnfocused) && !testPositiveFloatOrInteger.test(options.divisorWhenUnfocused) || options.divisorWhenUnfocused === 0 || options.divisorWhenUnfocused === "0" || options.divisorWhenUnfocused === 1 || options.divisorWhenUnfocused === "1") {
      AutoNumericHelper.throwError(`The divisor option 'divisorWhenUnfocused' is invalid ; it should be a positive number higher than one, preferably an integer, [${options.divisorWhenUnfocused}] given.`);
    }
    if (!AutoNumericHelper.isNull(options.decimalPlacesShownOnBlur) && !testPositiveInteger.test(options.decimalPlacesShownOnBlur)) {
      AutoNumericHelper.throwError(`The number of decimals shown when unfocused option 'decimalPlacesShownOnBlur' is invalid ; it should be a positive integer or \`null\`, [${options.decimalPlacesShownOnBlur}] given.`);
    }
    if (!AutoNumericHelper.isNull(options.symbolWhenUnfocused) && !AutoNumericHelper.isString(options.symbolWhenUnfocused)) {
      AutoNumericHelper.throwError(`The symbol to show when unfocused option 'symbolWhenUnfocused' is invalid ; it should be a string, [${options.symbolWhenUnfocused}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.saveValueToSessionStorage) && !AutoNumericHelper.isBoolean(options.saveValueToSessionStorage)) {
      AutoNumericHelper.throwError(`The save to session storage option 'saveValueToSessionStorage' is invalid ; it should be either 'true' or 'false', [${options.saveValueToSessionStorage}] given.`);
    }
    if (!AutoNumericHelper.isInArray(options.onInvalidPaste, [
      _AutoNumeric.options.onInvalidPaste.error,
      _AutoNumeric.options.onInvalidPaste.ignore,
      _AutoNumeric.options.onInvalidPaste.clamp,
      _AutoNumeric.options.onInvalidPaste.truncate,
      _AutoNumeric.options.onInvalidPaste.replace
    ])) {
      AutoNumericHelper.throwError(`The paste behavior option 'onInvalidPaste' is invalid ; it should either be 'error', 'ignore', 'clamp', 'truncate' or 'replace' (cf. documentation), [${options.onInvalidPaste}] given.`);
    }
    if (!AutoNumericHelper.isInArray(options.roundingMethod, [
      _AutoNumeric.options.roundingMethod.halfUpSymmetric,
      _AutoNumeric.options.roundingMethod.halfUpAsymmetric,
      _AutoNumeric.options.roundingMethod.halfDownSymmetric,
      _AutoNumeric.options.roundingMethod.halfDownAsymmetric,
      _AutoNumeric.options.roundingMethod.halfEvenBankersRounding,
      _AutoNumeric.options.roundingMethod.upRoundAwayFromZero,
      _AutoNumeric.options.roundingMethod.downRoundTowardZero,
      _AutoNumeric.options.roundingMethod.toCeilingTowardPositiveInfinity,
      _AutoNumeric.options.roundingMethod.toFloorTowardNegativeInfinity,
      _AutoNumeric.options.roundingMethod.toNearest05,
      _AutoNumeric.options.roundingMethod.toNearest05Alt,
      _AutoNumeric.options.roundingMethod.upToNext05,
      _AutoNumeric.options.roundingMethod.downToNext05
    ])) {
      AutoNumericHelper.throwError(`The rounding method option 'roundingMethod' is invalid ; it should either be 'S', 'A', 's', 'a', 'B', 'U', 'D', 'C', 'F', 'N05', 'CHF', 'U05' or 'D05' (cf. documentation), [${options.roundingMethod}] given.`);
    }
    if (!AutoNumericHelper.isNull(options.negativeBracketsTypeOnBlur) && !AutoNumericHelper.isInArray(options.negativeBracketsTypeOnBlur, [
      _AutoNumeric.options.negativeBracketsTypeOnBlur.parentheses,
      _AutoNumeric.options.negativeBracketsTypeOnBlur.brackets,
      _AutoNumeric.options.negativeBracketsTypeOnBlur.chevrons,
      _AutoNumeric.options.negativeBracketsTypeOnBlur.curlyBraces,
      _AutoNumeric.options.negativeBracketsTypeOnBlur.angleBrackets,
      _AutoNumeric.options.negativeBracketsTypeOnBlur.japaneseQuotationMarks,
      _AutoNumeric.options.negativeBracketsTypeOnBlur.halfBrackets,
      _AutoNumeric.options.negativeBracketsTypeOnBlur.whiteSquareBrackets,
      _AutoNumeric.options.negativeBracketsTypeOnBlur.quotationMarks,
      _AutoNumeric.options.negativeBracketsTypeOnBlur.guillemets
    ])) {
      AutoNumericHelper.throwError(`The brackets for negative values option 'negativeBracketsTypeOnBlur' is invalid ; it should either be '(,)', '[,]', '<,>', '{,}', '〈,〉', '｢,｣', '⸤,⸥', '⟦,⟧', '‹,›' or '«,»', [${options.negativeBracketsTypeOnBlur}] given.`);
    }
    if (!(AutoNumericHelper.isString(options.emptyInputBehavior) || AutoNumericHelper.isNumber(options.emptyInputBehavior)) || !(AutoNumericHelper.isInArray(options.emptyInputBehavior, [
      _AutoNumeric.options.emptyInputBehavior.focus,
      _AutoNumeric.options.emptyInputBehavior.press,
      _AutoNumeric.options.emptyInputBehavior.always,
      _AutoNumeric.options.emptyInputBehavior.min,
      _AutoNumeric.options.emptyInputBehavior.max,
      _AutoNumeric.options.emptyInputBehavior.zero,
      _AutoNumeric.options.emptyInputBehavior.null
    ]) || testFloatOrIntegerAndPossibleNegativeSign.test(options.emptyInputBehavior))) {
      AutoNumericHelper.throwError(`The display on empty string option 'emptyInputBehavior' is invalid ; it should either be 'focus', 'press', 'always', 'min', 'max', 'zero', 'null', a number, or a string that represents a number, [${options.emptyInputBehavior}] given.`);
    }
    if (options.emptyInputBehavior === _AutoNumeric.options.emptyInputBehavior.zero && (options.minimumValue > 0 || options.maximumValue < 0)) {
      AutoNumericHelper.throwError(`The 'emptyInputBehavior' option is set to 'zero', but this value is outside of the range defined by 'minimumValue' and 'maximumValue' [${options.minimumValue}, ${options.maximumValue}].`);
    }
    if (testFloatOrIntegerAndPossibleNegativeSign.test(String(options.emptyInputBehavior))) {
      if (!this._isWithinRangeWithOverrideOption(options.emptyInputBehavior, options)) {
        AutoNumericHelper.throwError(`The 'emptyInputBehavior' option is set to a number or a string that represents a number, but its value [${options.emptyInputBehavior}] is outside of the range defined by the 'minimumValue' and 'maximumValue' options [${options.minimumValue}, ${options.maximumValue}].`);
      }
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.eventBubbles) && !AutoNumericHelper.isBoolean(options.eventBubbles)) {
      AutoNumericHelper.throwError(`The event bubbles option 'eventBubbles' is invalid ; it should be either 'true' or 'false', [${options.eventBubbles}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.eventIsCancelable) && !AutoNumericHelper.isBoolean(options.eventIsCancelable)) {
      AutoNumericHelper.throwError(`The event is cancelable option 'eventIsCancelable' is invalid ; it should be either 'true' or 'false', [${options.eventIsCancelable}] given.`);
    }
    if (AutoNumericHelper.isBoolean(options.invalidClass) || !/^-?[_a-zA-Z]+[_a-zA-Z0-9-]*$/.test(options.invalidClass)) {
      AutoNumericHelper.throwError(`The name of the 'invalidClass' option is not a valid CSS class name ; it should not be empty, and should follow the '^-?[_a-zA-Z]+[_a-zA-Z0-9-]*$' regex, [${options.invalidClass}] given.`);
    }
    if (!AutoNumericHelper.isInArray(options.leadingZero, [
      _AutoNumeric.options.leadingZero.allow,
      _AutoNumeric.options.leadingZero.deny,
      _AutoNumeric.options.leadingZero.keep
    ])) {
      AutoNumericHelper.throwError(`The leading zero behavior option 'leadingZero' is invalid ; it should either be 'allow', 'deny' or 'keep', [${options.leadingZero}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.formatOnPageLoad) && !AutoNumericHelper.isBoolean(options.formatOnPageLoad)) {
      AutoNumericHelper.throwError(`The format on initialization option 'formatOnPageLoad' is invalid ; it should be either 'true' or 'false', [${options.formatOnPageLoad}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.formulaMode) && !AutoNumericHelper.isBoolean(options.formulaMode)) {
      AutoNumericHelper.throwError(`The formula mode option 'formulaMode' is invalid ; it should be either 'true' or 'false', [${options.formulaMode}] given.`);
    }
    if (!testPositiveInteger.test(options.historySize) || options.historySize === 0) {
      AutoNumericHelper.throwError(`The history size option 'historySize' is invalid ; it should be a positive integer, [${options.historySize}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.selectNumberOnly) && !AutoNumericHelper.isBoolean(options.selectNumberOnly)) {
      AutoNumericHelper.throwError(`The select number only option 'selectNumberOnly' is invalid ; it should be either 'true' or 'false', [${options.selectNumberOnly}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.selectOnFocus) && !AutoNumericHelper.isBoolean(options.selectOnFocus)) {
      AutoNumericHelper.throwError(`The select on focus option 'selectOnFocus' is invalid ; it should be either 'true' or 'false', [${options.selectOnFocus}] given.`);
    }
    if (!AutoNumericHelper.isNull(options.defaultValueOverride) && (options.defaultValueOverride !== "" && !testFloatOrIntegerAndPossibleNegativeSign.test(options.defaultValueOverride))) {
      AutoNumericHelper.throwError(`The unformatted default value option 'defaultValueOverride' is invalid ; it should be a string that represents a positive or negative number, [${options.defaultValueOverride}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.unformatOnSubmit) && !AutoNumericHelper.isBoolean(options.unformatOnSubmit)) {
      AutoNumericHelper.throwError(`The remove formatting on submit option 'unformatOnSubmit' is invalid ; it should be either 'true' or 'false', [${options.unformatOnSubmit}] given.`);
    }
    if (!AutoNumericHelper.isNull(options.valuesToStrings) && !AutoNumericHelper.isObject(options.valuesToStrings)) {
      AutoNumericHelper.throwError(`The option 'valuesToStrings' is invalid ; it should be an object, ideally with 'key -> value' entries, [${options.valuesToStrings}] given.`);
    }
    if (!AutoNumericHelper.isNull(options.outputFormat) && !AutoNumericHelper.isInArray(options.outputFormat, [
      _AutoNumeric.options.outputFormat.string,
      _AutoNumeric.options.outputFormat.number,
      _AutoNumeric.options.outputFormat.dot,
      _AutoNumeric.options.outputFormat.negativeDot,
      _AutoNumeric.options.outputFormat.comma,
      _AutoNumeric.options.outputFormat.negativeComma,
      _AutoNumeric.options.outputFormat.dotNegative,
      _AutoNumeric.options.outputFormat.commaNegative
    ])) {
      AutoNumericHelper.throwError(`The custom locale format option 'outputFormat' is invalid ; it should either be null, 'string', 'number', '.', '-.', ',', '-,', '.-' or ',-', [${options.outputFormat}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.isCancellable) && !AutoNumericHelper.isBoolean(options.isCancellable)) {
      AutoNumericHelper.throwError(`The cancellable behavior option 'isCancellable' is invalid ; it should be either 'true' or 'false', [${options.isCancellable}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.modifyValueOnUpDownArrow) && !AutoNumericHelper.isBoolean(options.modifyValueOnUpDownArrow)) {
      AutoNumericHelper.throwError(`The increment/decrement on up and down arrow keys 'modifyValueOnUpDownArrow' is invalid ; it should be either 'true' or 'false', [${options.modifyValueOnUpDownArrow}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.modifyValueOnWheel) && !AutoNumericHelper.isBoolean(options.modifyValueOnWheel)) {
      AutoNumericHelper.throwError(`The increment/decrement on mouse wheel option 'modifyValueOnWheel' is invalid ; it should be either 'true' or 'false', [${options.modifyValueOnWheel}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.watchExternalChanges) && !AutoNumericHelper.isBoolean(options.watchExternalChanges)) {
      AutoNumericHelper.throwError(`The option 'watchExternalChanges' is invalid ; it should be either 'true' or 'false', [${options.watchExternalChanges}] given.`);
    }
    if (!AutoNumericHelper.isInArray(options.wheelOn, [
      _AutoNumeric.options.wheelOn.focus,
      _AutoNumeric.options.wheelOn.hover
    ])) {
      AutoNumericHelper.throwError(`The wheel behavior option 'wheelOn' is invalid ; it should either be 'focus' or 'hover', [${options.wheelOn}] given.`);
    }
    if (!(AutoNumericHelper.isString(options.upDownStep) || AutoNumericHelper.isNumber(options.upDownStep)) || options.upDownStep !== "progressive" && !testPositiveFloatOrInteger.test(options.upDownStep) || Number(options.upDownStep) === 0) {
      AutoNumericHelper.throwError(`The up/down arrow step value option 'upDownStep' is invalid ; it should either be the string 'progressive', or a number or a string that represents a positive number (excluding zero), [${options.upDownStep}] given.`);
    }
    if (!(AutoNumericHelper.isString(options.wheelStep) || AutoNumericHelper.isNumber(options.wheelStep)) || options.wheelStep !== "progressive" && !testPositiveFloatOrInteger.test(options.wheelStep) || Number(options.wheelStep) === 0) {
      AutoNumericHelper.throwError(`The wheel step value option 'wheelStep' is invalid ; it should either be the string 'progressive', or a number or a string that represents a positive number (excluding zero), [${options.wheelStep}] given.`);
    }
    if (!AutoNumericHelper.isInArray(options.serializeSpaces, [
      _AutoNumeric.options.serializeSpaces.plus,
      _AutoNumeric.options.serializeSpaces.percent
    ])) {
      AutoNumericHelper.throwError(`The space replacement character option 'serializeSpaces' is invalid ; it should either be '+' or '%20', [${options.serializeSpaces}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.noEventListeners) && !AutoNumericHelper.isBoolean(options.noEventListeners)) {
      AutoNumericHelper.throwError(`The option 'noEventListeners' that prevent the creation of event listeners is invalid ; it should be either 'true' or 'false', [${options.noEventListeners}] given.`);
    }
    if (!AutoNumericHelper.isNull(options.styleRules) && !(AutoNumericHelper.isObject(options.styleRules) && (Object.prototype.hasOwnProperty.call(options.styleRules, "positive") || Object.prototype.hasOwnProperty.call(options.styleRules, "negative") || Object.prototype.hasOwnProperty.call(options.styleRules, "ranges") || Object.prototype.hasOwnProperty.call(options.styleRules, "userDefined")))) {
      AutoNumericHelper.throwError(`The option 'styleRules' is invalid ; it should be a correctly structured object, with one or more 'positive', 'negative', 'ranges' or 'userDefined' attributes, [${options.styleRules}] given.`);
    }
    if (!AutoNumericHelper.isNull(options.styleRules) && Object.prototype.hasOwnProperty.call(options.styleRules, "userDefined") && !AutoNumericHelper.isNull(options.styleRules.userDefined)) {
      options.styleRules.userDefined.forEach((rule) => {
        if (Object.prototype.hasOwnProperty.call(rule, "callback") && !AutoNumericHelper.isFunction(rule.callback)) {
          AutoNumericHelper.throwError(`The callback defined in the \`userDefined\` attribute is not a function, ${typeof rule.callback} given.`);
        }
      });
    }
    if (!AutoNumericHelper.isNull(options.rawValueDivisor) && !testPositiveFloatOrInteger.test(options.rawValueDivisor) || options.rawValueDivisor === 0 || options.rawValueDivisor === "0" || options.rawValueDivisor === 1 || options.rawValueDivisor === "1") {
      AutoNumericHelper.throwError(`The raw value divisor option 'rawValueDivisor' is invalid ; it should be a positive number higher than one, preferably an integer, [${options.rawValueDivisor}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.readOnly) && !AutoNumericHelper.isBoolean(options.readOnly)) {
      AutoNumericHelper.throwError(`The option 'readOnly' is invalid ; it should be either 'true' or 'false', [${options.readOnly}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.unformatOnHover) && !AutoNumericHelper.isBoolean(options.unformatOnHover)) {
      AutoNumericHelper.throwError(`The option 'unformatOnHover' is invalid ; it should be either 'true' or 'false', [${options.unformatOnHover}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.failOnUnknownOption) && !AutoNumericHelper.isBoolean(options.failOnUnknownOption)) {
      AutoNumericHelper.throwError(`The debug option 'failOnUnknownOption' is invalid ; it should be either 'true' or 'false', [${options.failOnUnknownOption}] given.`);
    }
    if (!AutoNumericHelper.isTrueOrFalseString(options.createLocalList) && !AutoNumericHelper.isBoolean(options.createLocalList)) {
      AutoNumericHelper.throwError(`The debug option 'createLocalList' is invalid ; it should be either 'true' or 'false', [${options.createLocalList}] given.`);
    }
  }
  /**
   * Check the `decimalPlaces*` options and output the relevant warnings if some of those will get overwritten during the initialization or settings update.
   *
   * @param {object} options
   * @private
   */
  static _validateDecimalPlacesRawValue(options) {
    if (!AutoNumericHelper.isNull(options.decimalPlacesRawValue)) {
      if (options.decimalPlacesRawValue < options.decimalPlaces) {
        AutoNumericHelper.warning(`The number of decimal places to store in the raw value [${options.decimalPlacesRawValue}] is lower than the ones to display [${options.decimalPlaces}]. This will likely confuse your users.
To solve that, you'd need to either set \`decimalPlacesRawValue\` to \`null\`, or set a number of decimal places for the raw value equal of bigger than \`decimalPlaces\`.`, options.showWarnings);
      }
      if (options.decimalPlacesRawValue < options.decimalPlacesShownOnFocus) {
        AutoNumericHelper.warning(`The number of decimal places to store in the raw value [${options.decimalPlacesRawValue}] is lower than the ones shown on focus [${options.decimalPlacesShownOnFocus}]. This will likely confuse your users.
To solve that, you'd need to either set \`decimalPlacesRawValue\` to \`null\`, or set a number of decimal places for the raw value equal of bigger than \`decimalPlacesShownOnFocus\`.`, options.showWarnings);
      }
      if (options.decimalPlacesRawValue < options.decimalPlacesShownOnBlur) {
        AutoNumericHelper.warning(`The number of decimal places to store in the raw value [${options.decimalPlacesRawValue}] is lower than the ones shown when unfocused [${options.decimalPlacesShownOnBlur}]. This will likely confuse your users.
To solve that, you'd need to either set \`decimalPlacesRawValue\` to \`null\`, or set a number of decimal places for the raw value equal of bigger than \`decimalPlacesShownOnBlur\`.`, options.showWarnings);
      }
    }
  }
  /**
   * Return `true` if the settings/options are valid, `false` otherwise.
   *
   * @param {object} options
   * @returns {boolean}
   */
  static areSettingsValid(options) {
    let isValid = true;
    try {
      this.validate(options, true);
    } catch (error) {
      isValid = false;
    }
    return isValid;
  }
  /**
   * Return the default autoNumeric settings.
   *
   * @returns {object}
   */
  static getDefaultConfig() {
    return _AutoNumeric.defaultSettings;
  }
  /**
   * Return all the predefined language options in one object.
   * You can also access a specific language object directly by using `AutoNumeric.getPredefinedOptions().French` for instance.
   *
   * @returns {object}
   */
  static getPredefinedOptions() {
    return _AutoNumeric.predefinedOptions;
  }
  /**
   * Analyse the given array `options` and return a single 'merged' option objet.
   * `options` can be `null`, or an array of an option objects, or an array containing another array of option objects / strings (pre-defined option names)
   *
   * @param {null|Array<object|string|Array<string|object>>} options
   * @returns {null|object}
   * @private
   */
  static _generateOptionsObjectFromOptionsArray(options) {
    let optionsResult;
    if (AutoNumericHelper.isUndefinedOrNullOrEmpty(options) || options.length === 0) {
      optionsResult = null;
    } else {
      optionsResult = {};
      if (options.length === 1 && Array.isArray(options[0])) {
        options[0].forEach((optionObject) => {
          Object.assign(optionsResult, this._getOptionObject(optionObject));
        });
      } else if (options.length >= 1) {
        options.forEach((optionObject) => {
          Object.assign(optionsResult, this._getOptionObject(optionObject));
        });
      }
    }
    return optionsResult;
  }
  /**
   * Format the given number (or numeric string) with the given options. This returns the formatted value as a string.
   * This can also format the given DOM element value with the given options and returns the formatted value as a string.
   * Note : This function does *not* update that element value with the newly formatted value.
   * This basically allows to get the formatted value without first having to initialize an AutoNumeric object.
   *
   * @param {number|string|HTMLElement|HTMLInputElement} numericStringOrDomElement A number, or a string that represent a javascript number, or a DOM element
   * @param {object|null} options Multiple objects can be passed, the latter overwriting the settings from the former ones
   * @returns {string|null}
   */
  static format(numericStringOrDomElement, ...options) {
    if (AutoNumericHelper.isUndefined(numericStringOrDomElement) || numericStringOrDomElement === null) {
      return null;
    }
    let value;
    if (AutoNumericHelper.isElement(numericStringOrDomElement)) {
      value = AutoNumericHelper.getElementValue(numericStringOrDomElement);
    } else {
      value = numericStringOrDomElement;
    }
    if (!AutoNumericHelper.isString(value) && !AutoNumericHelper.isNumber(value)) {
      AutoNumericHelper.throwError(`The value "${value}" being "set" is not numeric and therefore cannot be used appropriately.`);
    }
    const optionsToUse = this._generateOptionsObjectFromOptionsArray(options);
    const settings = Object.assign({}, this.getDefaultConfig(), optionsToUse);
    settings.isNegativeSignAllowed = value < 0;
    settings.isPositiveSignAllowed = value >= 0;
    this._setBrackets(settings);
    const regex = {};
    this._cachesUsualRegularExpressions(settings, regex);
    let valueString = this._toNumericValue(value, settings);
    if (isNaN(Number(valueString))) {
      AutoNumericHelper.throwError(`The value [${valueString}] that you are trying to format is not a recognized number.`);
    }
    if (!this._isWithinRangeWithOverrideOption(valueString, settings)) {
      AutoNumericHelper.triggerEvent(_AutoNumeric.events.formatted, document, {
        oldValue: null,
        newValue: null,
        oldRawValue: null,
        newRawValue: null,
        isPristine: null,
        error: "Range test failed",
        aNElement: null
      }, true, true);
      AutoNumericHelper.throwError(`The value [${valueString}] being set falls outside of the minimumValue [${settings.minimumValue}] and maximumValue [${settings.maximumValue}] range set for this element`);
    }
    if (settings.valuesToStrings && this._checkValuesToStringsSettings(value, settings)) {
      return settings.valuesToStrings[value];
    }
    this._correctNegativePositiveSignPlacementOption(settings);
    this._calculateDecimalPlacesOnInit(settings);
    if (!AutoNumericHelper.isUndefinedOrNullOrEmpty(settings.rawValueDivisor) && settings.rawValueDivisor !== 0 && // Only divide if the `rawValueDivisor` option is set
    valueString !== "" && valueString !== null) {
      valueString *= settings.rawValueDivisor;
    }
    valueString = this._roundFormattedValueShownOnFocus(valueString, settings);
    valueString = this._modifyNegativeSignAndDecimalCharacterForFormattedValue(valueString, settings);
    valueString = this._addGroupSeparators(valueString, settings, false, valueString);
    return valueString;
  }
  /**
   * Format the given DOM element value, and set the resulting value back as the element value.
   *
   * @param {HTMLElement|HTMLInputElement} domElement
   * @param {object} options
   * @returns {string|null}
   */
  static formatAndSet(domElement, options = null) {
    const formattedValue = this.format(domElement, options);
    AutoNumericHelper.setElementValue(domElement, formattedValue);
    return formattedValue;
  }
  /**
   * Unformat the given formatted string with the given options. This returns a numeric string.
   * It can also unformat the given DOM element value with the given options and returns the unformatted numeric string.
   * Note: This does *not* update that element value.
   * This basically allows to get the unformatted value without first having to initialize an AutoNumeric object.
   *
   * @param {string|number|HTMLElement|HTMLInputElement} numericStringOrDomElement A number, or a string that represent a javascript number, or a DOM element
   * @param {object|null} options Multiple objects can be passed, the latter overwriting the settings from the former ones
   * @returns {string|number|NaN}
   */
  static unformat(numericStringOrDomElement, ...options) {
    if (AutoNumericHelper.isNumberStrict(numericStringOrDomElement)) {
      return numericStringOrDomElement;
    }
    let value;
    if (AutoNumericHelper.isElement(numericStringOrDomElement)) {
      value = AutoNumericHelper.getElementValue(numericStringOrDomElement);
    } else {
      value = numericStringOrDomElement;
    }
    if (value === "") {
      return "";
    }
    if (AutoNumericHelper.isUndefined(value) || value === null) {
      return null;
    }
    if (AutoNumericHelper.isArray(value) || AutoNumericHelper.isObject(value)) {
      AutoNumericHelper.throwError(`A number or a string representing a number is needed to be able to unformat it, [${value}] given.`);
    }
    const optionsToUse = this._generateOptionsObjectFromOptionsArray(options);
    const settings = Object.assign({}, this.getDefaultConfig(), optionsToUse);
    settings.isNegativeSignAllowed = false;
    settings.isPositiveSignAllowed = true;
    value = value.toString();
    if (settings.valuesToStrings && this._checkStringsToValuesSettings(value, settings)) {
      return AutoNumericHelper.objectKeyLookup(settings.valuesToStrings, value);
    }
    if (AutoNumericHelper.isNegative(value, settings.negativeSignCharacter)) {
      settings.isNegativeSignAllowed = true;
      settings.isPositiveSignAllowed = false;
    } else if (!AutoNumericHelper.isNull(settings.negativeBracketsTypeOnBlur)) {
      [settings.firstBracket, settings.lastBracket] = settings.negativeBracketsTypeOnBlur.split(",");
      if (value.charAt(0) === settings.firstBracket && value.charAt(value.length - 1) === settings.lastBracket) {
        settings.isNegativeSignAllowed = true;
        settings.isPositiveSignAllowed = false;
        value = this._removeBrackets(value, settings, false);
      }
    }
    value = this._convertToNumericString(value, settings);
    if (AutoNumericHelper.isNumber(Number(value))) {
      value = AutoNumericHelper.scientificToDecimal(value);
    }
    const unwantedCharacters = new RegExp(`[^+-0123456789.]`, "gi");
    if (unwantedCharacters.test(value)) {
      return NaN;
    }
    this._correctNegativePositiveSignPlacementOption(settings);
    if (settings.decimalPlacesRawValue) {
      settings.originalDecimalPlacesRawValue = settings.decimalPlacesRawValue;
    } else {
      settings.originalDecimalPlacesRawValue = settings.decimalPlaces;
    }
    this._calculateDecimalPlacesOnInit(settings);
    if (!AutoNumericHelper.isUndefinedOrNullOrEmpty(settings.rawValueDivisor) && settings.rawValueDivisor !== 0 && // Only divide if the `rawValueDivisor` option is set
    value !== "" && value !== null) {
      value /= settings.rawValueDivisor;
    }
    value = this._roundRawValue(value, settings);
    value = value.replace(settings.decimalCharacter, ".");
    value = this._toLocale(value, settings.outputFormat, settings);
    return value;
  }
  /**
   * Unformat the given DOM element value, and set the resulting value back as the element value.
   *
   * @param {HTMLElement|HTMLInputElement} domElement
   * @param {object} options
   * @returns {*}
   */
  static unformatAndSet(domElement, options = null) {
    const unformattedValue = this.unformat(domElement, options);
    AutoNumericHelper.setElementValue(domElement, unformattedValue);
    return unformattedValue;
  }
  /**
   * Unformat and localize the given formatted string with the given options. This returns a numeric string.
   * It can also unformat and localize the given DOM element value with the given options and returns the unformatted numeric string.
   * Note: This does *not* update that element value.
   * This basically allows to get the localized value without first having to initialize an AutoNumeric object.
   *
   * @param {string|number|HTMLElement|HTMLInputElement} numericStringOrDomElement
   * @param {object} settings
   * @returns {*}
   */
  static localize(numericStringOrDomElement, settings = null) {
    let value;
    if (AutoNumericHelper.isElement(numericStringOrDomElement)) {
      value = AutoNumericHelper.getElementValue(numericStringOrDomElement);
    } else {
      value = numericStringOrDomElement;
    }
    if (value === "") {
      return "";
    }
    if (AutoNumericHelper.isNull(settings)) {
      settings = _AutoNumeric.defaultSettings;
    }
    value = this.unformat(value, settings);
    if (Number(value) === 0 && settings.leadingZero !== _AutoNumeric.options.leadingZero.keep) {
      value = "0";
    }
    let outputFormatToUse;
    if (AutoNumericHelper.isNull(settings)) {
      outputFormatToUse = settings.outputFormat;
    } else {
      outputFormatToUse = _AutoNumeric.defaultSettings.outputFormat;
    }
    return this._toLocale(value, outputFormatToUse, settings);
  }
  static localizeAndSet(domElement, options = null) {
    const localizedValue = this.localize(domElement, options);
    AutoNumericHelper.setElementValue(domElement, localizedValue);
    return localizedValue;
  }
  /**
   * Return `true` if the given DOM element has an AutoNumeric object that manages it.
   * This function also accepts a selector string.
   *
   * @param {HTMLElement|string} domElementOrSelector Accepts either directly a DOM element to test, or a string selector (that will return one and only one element, if any)
   * @returns {boolean}
   */
  static isManagedByAutoNumeric(domElementOrSelector) {
    return this._isInGlobalList(AutoNumericHelper.domElement(domElementOrSelector));
  }
  /**
   * Return the AutoNumeric object that manages the given DOM element.
   * This function also accepts a selector string.
   *
   * @param {HTMLElement|string} domElementOrSelector Accepts either directly a DOM element to test, or a string selector (that will return one and only one element, if any)
   * @returns {null|AutoNumeric}
   */
  static getAutoNumericElement(domElementOrSelector) {
    const domElement = AutoNumericHelper.domElement(domElementOrSelector);
    if (!this.isManagedByAutoNumeric(domElement)) {
      return null;
    }
    return this._getFromGlobalList(domElement);
  }
  /**
   * Set the given element value, and format it immediately.
   * Return `null` if no AutoNumeric object is found, else, return the AutoNumeric object.
   *
   * @param {HTMLElement|string} domElementOrSelector Either a DOM element reference, or a selector string can be used
   * @param {number|string|null} newValue The value must be a Number, a numeric string or `null` (if `emptyInputBehavior` is set to `'null'`)
   * @param {object} options A settings object that will override the current settings. Note: the update is done only if the `newValue` is defined.
   * @param {boolean} saveChangeToHistory If set to `true`, then the change is recorded in the history table
   * @returns {AutoNumeric|null}
   */
  static set(domElementOrSelector, newValue, options = null, saveChangeToHistory = true) {
    const domElement = AutoNumericHelper.domElement(domElementOrSelector);
    if (!this.isManagedByAutoNumeric(domElement)) {
      let showWarnings;
      if (!AutoNumericHelper.isNull(options) && Object.prototype.hasOwnProperty.call(options, "showWarnings")) {
        showWarnings = options.showWarnings;
      } else {
        showWarnings = true;
      }
      AutoNumericHelper.warning(`Impossible to find an AutoNumeric object for the given DOM element or selector.`, showWarnings);
      return null;
    }
    return this.getAutoNumericElement(domElement).set(newValue, options, saveChangeToHistory);
  }
  /**
   * Return the unformatted value as a string from the given DOM element or query selector.
   * This can also return `null` if `rawValue` is null.
   *
   * @param {HTMLElement|string} domElementOrSelector
   * @param {function|null} callback
   * @returns {string|null}
   */
  static getNumericString(domElementOrSelector, callback = null) {
    return this._get(domElementOrSelector, "getNumericString", callback);
  }
  /**
   * Return the current formatted value of the AutoNumeric element as a string, from the given DOM element or query selector.
   *
   * @param {HTMLElement|string} domElementOrSelector
   * @param {function|null} callback
   * @returns {string}
   */
  static getFormatted(domElementOrSelector, callback = null) {
    return this._get(domElementOrSelector, "getFormatted", callback);
  }
  /**
   * Return the element unformatted value as a real Javascript number, from the given DOM element or query selector.
   * Warning: This can lead to precision problems with big numbers that should be stored as strings.
   *
   * @param {HTMLElement|string} domElementOrSelector
   * @param {function|null} callback
   * @returns {number|null}
   */
  static getNumber(domElementOrSelector, callback = null) {
    return this._get(domElementOrSelector, "getNumber", callback);
  }
  /**
   * DRY the code between the static `get*` functions
   *
   * @param {HTMLElement|string} domElementOrSelector
   * @param {string} getFunction The name of the non-static `get*` function as a string
   * @param {function|null} callback
   * @returns {*}
   * @private
   */
  static _get(domElementOrSelector, getFunction, callback = null) {
    const domElement = AutoNumericHelper.domElement(domElementOrSelector);
    if (!this.isManagedByAutoNumeric(domElement)) {
      AutoNumericHelper.throwError(`Impossible to find an AutoNumeric object for the given DOM element or selector.`);
    }
    return this.getAutoNumericElement(domElement)[getFunction](callback);
  }
  /**
   * Returns the unformatted value following the `outputFormat` setting, from the given DOM element or query selector.
   * See the non-static `getLocalized()` method documentation for more details.
   *
   * @param {HTMLElement|string} domElementOrSelector
   * @param {null|string|function} forcedOutputFormat
   * @param {function|null} callback
   * @returns {*}
   */
  static getLocalized(domElementOrSelector, forcedOutputFormat = null, callback = null) {
    const domElement = AutoNumericHelper.domElement(domElementOrSelector);
    if (!this.isManagedByAutoNumeric(domElement)) {
      AutoNumericHelper.throwError(`Impossible to find an AutoNumeric object for the given DOM element or selector.`);
    }
    return this.getAutoNumericElement(domElement).getLocalized(forcedOutputFormat, callback);
  }
  // Pre-defined options can be called to update the current default options with their specificities
  //XXX A better way would be to not initialize first, but that's not possible since `new` is called first and we do not pass the language options (i.e. `French`) to the constructor
  /**
   * Update the AutoNumeric object with the predefined options, and possibly some option overrides.
   *
   * @param {object} predefinedOption
   * @param {object} optionOverride
   * @private
   * @returns {AutoNumeric}
   */
  _updatePredefinedOptions(predefinedOption, optionOverride = null) {
    if (!AutoNumericHelper.isNull(optionOverride)) {
      this._mergeSettings(predefinedOption, optionOverride);
      this.update(this.settings);
    } else {
      this.update(predefinedOption);
    }
    return this;
  }
  /**
   * Update the settings to use the French pre-defined language options.
   * Those pre-defined options can be overridden by passing an option object as a parameter.
   *
   * @param {object} optionOverride
   * @returns {AutoNumeric}
   */
  french(optionOverride = null) {
    this._updatePredefinedOptions(_AutoNumeric.getPredefinedOptions().French, optionOverride);
    return this;
  }
  /**
   * Update the settings to use the North American pre-defined language options.
   * Those pre-defined options can be overridden by passing an option object as a parameter.
   *
   * @param {object} optionOverride
   * @returns {AutoNumeric}
   */
  northAmerican(optionOverride = null) {
    this._updatePredefinedOptions(_AutoNumeric.getPredefinedOptions().NorthAmerican, optionOverride);
    return this;
  }
  /**
   * Update the settings to use the British pre-defined language options.
   * Those pre-defined options can be overridden by passing an option object as a parameter.
   *
   * @param {object} optionOverride
   * @returns {AutoNumeric}
   */
  british(optionOverride = null) {
    this._updatePredefinedOptions(_AutoNumeric.getPredefinedOptions().British, optionOverride);
    return this;
  }
  /**
   * Update the settings to use the Swiss pre-defined language options.
   * Those pre-defined options can be overridden by passing an option object as a parameter.
   *
   * @param {object} optionOverride
   * @returns {AutoNumeric}
   */
  swiss(optionOverride = null) {
    this._updatePredefinedOptions(_AutoNumeric.getPredefinedOptions().Swiss, optionOverride);
    return this;
  }
  /**
   * Update the settings to use the Japanese pre-defined language options.
   * Those pre-defined options can be overridden by passing an option object as a parameter.
   *
   * @param {object} optionOverride
   * @returns {AutoNumeric}
   */
  japanese(optionOverride = null) {
    this._updatePredefinedOptions(_AutoNumeric.getPredefinedOptions().Japanese, optionOverride);
    return this;
  }
  /**
   * Update the settings to use the Spanish pre-defined language options.
   * Those pre-defined options can be overridden by passing an option object as a parameter.
   *
   * @param {object} optionOverride
   * @returns {AutoNumeric}
   */
  spanish(optionOverride = null) {
    this._updatePredefinedOptions(_AutoNumeric.getPredefinedOptions().Spanish, optionOverride);
    return this;
  }
  /**
   * Update the settings to use the Chinese pre-defined language options.
   * Those pre-defined options can be overridden by passing an option object as a parameter.
   *
   * @param {object} optionOverride
   * @returns {AutoNumeric}
   */
  chinese(optionOverride = null) {
    this._updatePredefinedOptions(_AutoNumeric.getPredefinedOptions().Chinese, optionOverride);
    return this;
  }
  /**
   * Update the settings to use the Brazilian pre-defined language options.
   * Those pre-defined options can be overridden by passing an option object as a parameter.
   *
   * @param {object} optionOverride
   * @returns {AutoNumeric}
   */
  brazilian(optionOverride = null) {
    this._updatePredefinedOptions(_AutoNumeric.getPredefinedOptions().Brazilian, optionOverride);
    return this;
  }
  // Internal private functions
  /**
   * Run any callbacks found in the settings object in order to set the settings value back.
   * Any parameter can have a callback defined.
   * The callback takes the current AutoNumeric element as the first argument, and the key name as the second.
   * @example callback(this, 'currencySymbol')
   */
  _runCallbacksFoundInTheSettingsObject() {
    for (const key in this.settings) {
      if (Object.prototype.hasOwnProperty.call(this.settings, key)) {
        const value = this.settings[key];
        if (typeof value === "function") {
          this.settings[key] = value(this, key);
        } else {
          let htmlAttribute = "";
          if (key in this.domElement.dataset) {
            htmlAttribute = this.domElement.dataset[key];
          }
          htmlAttribute = AutoNumericHelper.camelize(htmlAttribute);
          if (typeof this.settings[htmlAttribute] === "function") {
            this.settings[key] = htmlAttribute(this, key);
          }
        }
      }
    }
  }
  /**
   * Keep track if the settings configuration leads to a trailing negative sign (only when the raw value is negative), so we do not have to test the settings values every time we need to know that.
   * `isTrailingNegative` is set to `true` if the settings result in a trailing negative character, `false` otherwise.
   * Note: This returns `true` even if the raw value is positive.
   * @private
   */
  _setTrailingNegativeSignInfo() {
    this.isTrailingNegative = this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.prefix && this.settings.negativePositiveSignPlacement === _AutoNumeric.options.negativePositiveSignPlacement.suffix || this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.suffix && (this.settings.negativePositiveSignPlacement === _AutoNumeric.options.negativePositiveSignPlacement.left || this.settings.negativePositiveSignPlacement === _AutoNumeric.options.negativePositiveSignPlacement.right);
  }
  /**
   * Strip all the unwanted non-number characters.
   * However, it does not reorder the localized negative sign.
   *
   * @param {string} s
   * @param {object} settings
   * @param {boolean} stripZeros If set to `false`, then the leading zero(s) are not stripped, otherwise if set to `true`, the `leadingZero` option is followed
   * @param {boolean} isFocused If the element is focused, then this is `true`
   * @returns {string}
   * @private
   */
  static _stripAllNonNumberCharacters(s, settings, stripZeros, isFocused) {
    return this._stripAllNonNumberCharactersExceptCustomDecimalChar(s, settings, stripZeros, isFocused).replace(settings.decimalCharacter, ".");
  }
  /**
   * Strip all unwanted non-number characters except the custom decimal character.
   *
   * It converts the custom negative sign and removes the positive sign (custom or not).
   * This keeps :
   * - the numbers,
   * - the normal negative sign '-' if any,
   * - and the *custom* decimal character.
   *
   * @param {string} s
   * @param {object} settings
   * @param {boolean} stripZeros If set to `false`, then the leading zero(s) are not stripped, otherwise if set to `true`, the `leadingZero` option is followed
   * @param {boolean} isFocused If the element is focused, then this is `true`
   * @returns {string|*}
   */
  static _stripAllNonNumberCharactersExceptCustomDecimalChar(s, settings, stripZeros, isFocused) {
    s = this._normalizeCurrencySuffixAndNegativeSignCharacters(s, settings);
    s = s.replace(settings.allowedAutoStrip, "");
    const m2 = s.match(settings.numRegAutoStrip);
    s = m2 ? [m2[1], m2[2], m2[3]].join("") : "";
    if (settings.leadingZero === _AutoNumeric.options.leadingZero.allow || settings.leadingZero === _AutoNumeric.options.leadingZero.keep) {
      let negativeSign = "";
      const [integerPart, decimalPart] = s.split(settings.decimalCharacter);
      let modifiedIntegerPart = integerPart;
      if (AutoNumericHelper.contains(modifiedIntegerPart, settings.negativeSignCharacter)) {
        negativeSign = settings.negativeSignCharacter;
        modifiedIntegerPart = modifiedIntegerPart.replace(settings.negativeSignCharacter, "");
      }
      if (negativeSign === "" && modifiedIntegerPart.length > settings.mIntPos && modifiedIntegerPart.charAt(0) === "0") {
        modifiedIntegerPart = modifiedIntegerPart.slice(1);
      }
      if (negativeSign !== "" && modifiedIntegerPart.length > settings.mIntNeg && modifiedIntegerPart.charAt(0) === "0") {
        modifiedIntegerPart = modifiedIntegerPart.slice(1);
      }
      s = `${negativeSign}${modifiedIntegerPart}${AutoNumericHelper.isUndefined(decimalPart) ? "" : settings.decimalCharacter + decimalPart}`;
    }
    if (stripZeros && settings.leadingZero === _AutoNumeric.options.leadingZero.deny || !isFocused && settings.leadingZero === _AutoNumeric.options.leadingZero.allow) {
      s = s.replace(settings.stripReg, "$1$2");
    }
    return s;
  }
  /**
   * Sets or removes brackets on negative values, depending on the focus state, which is passed as `isFocused`.
   * The focus state is 'stored' in that object property.
   *
   * @param {string} value
   * @param {object} settings
   * @param {boolean} isFocused
   * @returns {*}
   */
  static _toggleNegativeBracket(value, settings, isFocused) {
    let result;
    if (isFocused) {
      result = this._removeBrackets(value, settings);
    } else {
      result = this._addBrackets(value, settings);
    }
    return result;
  }
  /**
   * Add the bracket types specified in the `settings` object, to the given string `value`.
   *
   * @param {string} value
   * @param {object} settings
   * @returns {string}
   * @private
   */
  static _addBrackets(value, settings) {
    if (AutoNumericHelper.isNull(settings.negativeBracketsTypeOnBlur)) {
      return value;
    }
    return `${settings.firstBracket}${value.replace(settings.negativeSignCharacter, "")}${settings.lastBracket}`;
  }
  /**
   * Remove the bracket types specified in the `settings` object, from the given string `value`.
   *
   * @param {string} value
   * @param {object} settings
   * @param {boolean} rearrangeSignsAndValueOrder If set to `true`, then only the brackets are remove and a negative sign is added, without reordering the negative sign, currency symbol and value according to the settings.
   * @returns {string}
   * @private
   */
  static _removeBrackets(value, settings, rearrangeSignsAndValueOrder = true) {
    let result;
    if (!AutoNumericHelper.isNull(settings.negativeBracketsTypeOnBlur) && value.charAt(0) === settings.firstBracket) {
      result = value.replace(settings.firstBracket, "");
      result = result.replace(settings.lastBracket, "");
      if (rearrangeSignsAndValueOrder) {
        result = result.replace(settings.currencySymbol, "");
        result = this._mergeCurrencySignNegativePositiveSignAndValue(result, settings, true, false);
      } else {
        result = `${settings.negativeSignCharacter}${result}`;
      }
    } else {
      result = value;
    }
    return result;
  }
  /**
   * Analyze the `negativeBracketsTypeOnBlur` options and keep track of the first and last bracket characters to use.
   *
   * @param {object} settings
   * @private
   */
  static _setBrackets(settings) {
    if (AutoNumericHelper.isNull(settings.negativeBracketsTypeOnBlur)) {
      settings.firstBracket = "";
      settings.lastBracket = "";
    } else {
      const [firstBracket, lastBracket] = settings.negativeBracketsTypeOnBlur.split(",");
      settings.firstBracket = firstBracket;
      settings.lastBracket = lastBracket;
    }
  }
  /**
   * Return a number as a numeric string that can be typecast to a Number that Javascript will understand.
   *
   * This function returns the given string by stripping:
   * - the currency sign (currencySymbol),
   * - the grouping separators (digitalGroupSpacing),
   * - the suffix text (suffixText),
   * - the positive sign (positiveSignCharacter),
   * - the brackets if any,
   * - by replacing the negative sign character with a hyphen,
   * - and by replacing the decimal character (decimalCharacter) by a dot.
   *
   * Lastly, it also put the negative sign back to its normal position if needed.
   * Bonus; it converts any arabic numbers found to the latin ones.
   *
   * @param {string} s
   * @param {object} settings
   * @returns {string|void|*}
   */
  static _convertToNumericString(s, settings) {
    s = this._removeBrackets(s, settings, false);
    s = this._normalizeCurrencySuffixAndNegativeSignCharacters(s, settings);
    s = s.replace(new RegExp(`[${settings.digitGroupSeparator}]`, "g"), "");
    if (settings.decimalCharacter !== ".") {
      s = s.replace(settings.decimalCharacter, ".");
    }
    if (AutoNumericHelper.isNegative(s) && s.lastIndexOf("-") === s.length - 1) {
      s = s.replace("-", "");
      s = `-${s}`;
    }
    if (settings.showPositiveSign) {
      s = s.replace(settings.positiveSignCharacter, "");
    }
    const convertToNumber = settings.leadingZero !== _AutoNumeric.options.leadingZero.keep;
    const temp = AutoNumericHelper.arabicToLatinNumbers(s, convertToNumber, false, false);
    if (!isNaN(temp)) {
      s = temp.toString();
    }
    return s;
  }
  /**
   * Removes the currency symbol and the suffix text from the given string, and replace the custom negative sign with a hyphen.
   *
   * @param {string} s
   * @param {object} settings
   * @returns {string | *}
   * @private
   */
  static _normalizeCurrencySuffixAndNegativeSignCharacters(s, settings) {
    s = String(s);
    if (settings.currencySymbol !== _AutoNumeric.options.currencySymbol.none) {
      s = s.replace(settings.currencySymbol, "");
    }
    if (settings.suffixText !== _AutoNumeric.options.suffixText.none) {
      s = s.replace(settings.suffixText, "");
    }
    if (settings.negativeSignCharacter !== _AutoNumeric.options.negativeSignCharacter.hyphen) {
      s = s.replace(settings.negativeSignCharacter, "-");
    }
    return s;
  }
  /**
   * Converts the ISO numeric string to the locale decimal and minus sign placement.
   * See the "outputFormat" option definition for more details.
   * Note: If the `outputFormat` is set to a number, the custom `negativeSignCharacter` is ignored.
   *
   * @param {string|null} value The unformatted value
   * @param {string|null} locale
   * @param {object} settings
   * @returns {*}
   */
  static _toLocale(value, locale, settings) {
    if (AutoNumericHelper.isNull(locale) || locale === _AutoNumeric.options.outputFormat.string) {
      return value;
    }
    let result;
    switch (locale) {
      case _AutoNumeric.options.outputFormat.number:
        result = Number(value);
        break;
      case _AutoNumeric.options.outputFormat.dotNegative:
        result = AutoNumericHelper.isNegative(value) ? value.replace("-", "") + "-" : value;
        break;
      case _AutoNumeric.options.outputFormat.comma:
      case _AutoNumeric.options.outputFormat.negativeComma:
        result = value.replace(".", ",");
        break;
      case _AutoNumeric.options.outputFormat.commaNegative:
        result = value.replace(".", ",");
        result = AutoNumericHelper.isNegative(result) ? result.replace("-", "") + "-" : result;
        break;
      case _AutoNumeric.options.outputFormat.dot:
      case _AutoNumeric.options.outputFormat.negativeDot:
        result = value;
        break;
      default:
        AutoNumericHelper.throwError(`The given outputFormat [${locale}] option is not recognized.`);
    }
    if (locale !== _AutoNumeric.options.outputFormat.number && settings.negativeSignCharacter !== "-") {
      result = result.replace("-", settings.negativeSignCharacter);
    }
    return result;
  }
  /**
   * Modify the negative sign and the decimal character of the given string value to a hyphen (-) and a dot (.) in order to make that value 'typecastable' to a real number.
   *
   * @param {string} s The formatted value
   * @returns {string} The value with the 'normal' minus sign and decimal character
   */
  _modifyNegativeSignAndDecimalCharacterForRawValue(s) {
    if (this.settings.decimalCharacter !== ".") {
      s = s.replace(this.settings.decimalCharacter, ".");
    }
    if (this.settings.negativeSignCharacter !== "-" && this.settings.isNegativeSignAllowed) {
      s = s.replace(this.settings.negativeSignCharacter, "-");
    }
    if (!s.match(/\d/)) {
      s += "0";
    }
    return s;
  }
  /**
   * Modify the negative sign and the decimal character to use those defined in the settings.
   *
   * @param {string} s
   * @param {object} settings
   * @returns {string}
   */
  static _modifyNegativeSignAndDecimalCharacterForFormattedValue(s, settings) {
    if (settings.negativeSignCharacter !== "-") {
      s = s.replace("-", settings.negativeSignCharacter);
    }
    if (settings.decimalCharacter !== ".") {
      s = s.replace(".", settings.decimalCharacter);
    }
    return s;
  }
  /**
   * Return `true` if the given value is empty or is equal to the negative sign character defined in the given settings.
   *
   * @param {string} value
   * @param {object} settings
   * @returns {boolean}
   * @private
   */
  static _isElementValueEmptyOrOnlyTheNegativeSign(value, settings) {
    return value === "" || value === settings.negativeSignCharacter;
  }
  /**
   * Return the value with the currency symbol and the suffix text ordered according to the given settings.
   *
   * @param {string} value
   * @param {object} settings
   * @param {boolean} signOnEmpty
   * @returns {*}
   * @private
   */
  static _orderValueCurrencySymbolAndSuffixText(value, settings, signOnEmpty) {
    let result;
    if (settings.emptyInputBehavior === _AutoNumeric.options.emptyInputBehavior.always || signOnEmpty) {
      switch (settings.negativePositiveSignPlacement) {
        case _AutoNumeric.options.negativePositiveSignPlacement.left:
        case _AutoNumeric.options.negativePositiveSignPlacement.prefix:
        case _AutoNumeric.options.negativePositiveSignPlacement.none:
          result = value + settings.currencySymbol + settings.suffixText;
          break;
        default:
          result = settings.currencySymbol + value + settings.suffixText;
      }
    } else {
      result = value;
    }
    return result;
  }
  /**
   * Modify the input value by adding the group separators, as defined in the settings, and the negative brackets if needed.
   *
   * @param {string} inputValue The formatted value (i.e. with the `decimalCharacter` defined in the settings, not the raw value)
   * @param {object} settings
   * @param {boolean} isFocused
   * @param {number|string|null} currentRawValue The object current raw value (`this.rawValue`)
   * @param {number|string|null} forcedRawValue If this is set, then this rawValue is used instead of the one passed through the `settings` object. This is useful is some very specific cases where we need to set the raw value *after* settings the formatted value, using the `_addGroupSeparators()` method.
   * @returns {*}
   */
  static _addGroupSeparators(inputValue, settings, isFocused, currentRawValue, forcedRawValue = null) {
    let isValueNegative;
    if (!AutoNumericHelper.isNull(forcedRawValue)) {
      isValueNegative = forcedRawValue < 0;
    } else {
      isValueNegative = AutoNumericHelper.isNegative(inputValue, settings.negativeSignCharacter) || AutoNumericHelper.isNegativeWithBrackets(inputValue, settings.firstBracket, settings.lastBracket);
    }
    inputValue = this._stripAllNonNumberCharactersExceptCustomDecimalChar(inputValue, settings, false, isFocused);
    if (this._isElementValueEmptyOrOnlyTheNegativeSign(inputValue, settings)) {
      return this._orderValueCurrencySymbolAndSuffixText(inputValue, settings, true);
    }
    const isZeroOrHasNoValue = AutoNumericHelper.isZeroOrHasNoValue(inputValue);
    if (isValueNegative) {
      inputValue = inputValue.replace("-", "");
    }
    let [integerPart, decimalPart] = inputValue.split(settings.decimalCharacter);
    if (settings.decimalCharacterAlternative && AutoNumericHelper.isUndefined(decimalPart)) {
      [integerPart, decimalPart] = inputValue.split(settings.decimalCharacterAlternative);
    }
    if (settings.digitGroupSeparator !== "") {
      settings.digitalGroupSpacing = settings.digitalGroupSpacing.toString();
      let digitalGroup;
      switch (settings.digitalGroupSpacing) {
        case _AutoNumeric.options.digitalGroupSpacing.twoThree:
          digitalGroup = /(\d)((\d)(\d{2}?)+)$/;
          break;
        case _AutoNumeric.options.digitalGroupSpacing.twoScaled:
          digitalGroup = /(\d)((?:\d{2}){0,2}\d{3}(?:(?:\d{2}){2}\d{3})*?)$/;
          break;
        case _AutoNumeric.options.digitalGroupSpacing.two:
        case _AutoNumeric.options.digitalGroupSpacing.three:
        case _AutoNumeric.options.digitalGroupSpacing.four:
        default:
          digitalGroup = new RegExp(`(\\d)((\\d{${settings.digitalGroupSpacing}}?)+)$`);
      }
      while (digitalGroup.test(integerPart)) {
        integerPart = integerPart.replace(digitalGroup, `$1${settings.digitGroupSeparator}$2`);
      }
    }
    let decimalPlacesToRoundTo;
    if (isFocused) {
      decimalPlacesToRoundTo = settings.decimalPlacesShownOnFocus;
    } else {
      decimalPlacesToRoundTo = settings.decimalPlacesShownOnBlur;
    }
    if (decimalPlacesToRoundTo !== 0 && !AutoNumericHelper.isUndefined(decimalPart)) {
      if (decimalPart.length > decimalPlacesToRoundTo) {
        decimalPart = decimalPart.substring(0, decimalPlacesToRoundTo);
      }
      inputValue = `${integerPart}${settings.decimalCharacter}${decimalPart}`;
    } else {
      inputValue = integerPart;
    }
    inputValue = _AutoNumeric._mergeCurrencySignNegativePositiveSignAndValue(inputValue, settings, isValueNegative, isZeroOrHasNoValue);
    if (AutoNumericHelper.isNull(forcedRawValue)) {
      forcedRawValue = currentRawValue;
    }
    if (settings.negativeBracketsTypeOnBlur !== null && (forcedRawValue < 0 || AutoNumericHelper.isNegativeStrict(inputValue, settings.negativeSignCharacter))) {
      inputValue = this._toggleNegativeBracket(inputValue, settings, isFocused);
    }
    let result;
    if (settings.suffixText) {
      result = `${inputValue}${settings.suffixText}`;
    } else {
      result = inputValue;
    }
    return result;
  }
  /**
   * Return a semi-formatted string where the input value, the negative or positive sign, and the currency symbol are stitched together at the right positions, using the options set in the `settings` object.
   * Note : the `inputValue` is usually not a numeric string since the grouping symbols are already added to it at this point.
   *
   * @param {string} inputValue
   * @param {object} settings
   * @param {boolean} isValueNegative
   * @param {boolean} isZeroOrHasNoValue
   * @returns {*}
   * @throws
   * @private
   */
  static _mergeCurrencySignNegativePositiveSignAndValue(inputValue, settings, isValueNegative, isZeroOrHasNoValue) {
    let signToUse = "";
    if (isValueNegative) {
      signToUse = settings.negativeSignCharacter;
    } else if (settings.showPositiveSign && !isZeroOrHasNoValue) {
      signToUse = settings.positiveSignCharacter;
    }
    let result;
    if (settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.prefix) {
      if (settings.negativePositiveSignPlacement !== _AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && settings.showPositiveSign && !isZeroOrHasNoValue)) {
        switch (settings.negativePositiveSignPlacement) {
          case _AutoNumeric.options.negativePositiveSignPlacement.prefix:
          case _AutoNumeric.options.negativePositiveSignPlacement.left:
            result = `${signToUse}${settings.currencySymbol}${inputValue}`;
            break;
          case _AutoNumeric.options.negativePositiveSignPlacement.right:
            result = `${settings.currencySymbol}${signToUse}${inputValue}`;
            break;
          case _AutoNumeric.options.negativePositiveSignPlacement.suffix:
            result = `${settings.currencySymbol}${inputValue}${signToUse}`;
            break;
        }
      } else {
        result = settings.currencySymbol + inputValue;
      }
    } else if (settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.suffix) {
      if (settings.negativePositiveSignPlacement !== _AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && settings.showPositiveSign && !isZeroOrHasNoValue)) {
        switch (settings.negativePositiveSignPlacement) {
          case _AutoNumeric.options.negativePositiveSignPlacement.suffix:
          case _AutoNumeric.options.negativePositiveSignPlacement.right:
            result = `${inputValue}${settings.currencySymbol}${signToUse}`;
            break;
          case _AutoNumeric.options.negativePositiveSignPlacement.left:
            result = `${inputValue}${signToUse}${settings.currencySymbol}`;
            break;
          case _AutoNumeric.options.negativePositiveSignPlacement.prefix:
            result = `${signToUse}${inputValue}${settings.currencySymbol}`;
            break;
        }
      } else {
        result = inputValue + settings.currencySymbol;
      }
    }
    return result;
  }
  /**
   * Calculate where to put the caret position on focus if the element content is not selected.
   * This calculation is affected by the `caretPositionOnFocus` option which can be either `null`, `'start'`, `'end'`, `'decimalLeft'` or 'decimalRight'`, and will decide where to put the caret (on the left or right of the value or the decimal character, respectively) :
   * - `null` : the caret position is not forced
   * - `'start'` : the caret is positioned on the left hand side of the value
   * - `'end'` : the caret is positioned on the right hand side of the value
   * - `'decimalLeft'` : the caret is positioned on the left side of the decimal character
   * - `'decimalRight'` : the caret is positioned on the right side of the decimal character
   *
   * @param {string} value The formatted string stripped of the currency symbol and negative/positive sign
   * @returns {number}
   * @throws
   * @private
   */
  _initialCaretPosition(value) {
    if (AutoNumericHelper.isNull(this.settings.caretPositionOnFocus) && this.settings.selectOnFocus === _AutoNumeric.options.selectOnFocus.doNotSelect) {
      AutoNumericHelper.throwError("`_initialCaretPosition()` should never be called when the `caretPositionOnFocus` option is `null`.");
    }
    const isValueNegative = this.rawValue < 0;
    const isZeroOrHasNoValue = AutoNumericHelper.isZeroOrHasNoValue(value);
    const totalLength = value.length;
    let valueSize = 0;
    let integerSize = 0;
    let hasDecimalChar = false;
    let offsetDecimalChar = 0;
    if (this.settings.caretPositionOnFocus !== _AutoNumeric.options.caretPositionOnFocus.start) {
      value = value.replace(this.settings.negativeSignCharacter, "");
      value = value.replace(this.settings.positiveSignCharacter, "");
      value = value.replace(this.settings.currencySymbol, "");
      valueSize = value.length;
      hasDecimalChar = AutoNumericHelper.contains(value, this.settings.decimalCharacter);
      if (this.settings.caretPositionOnFocus === _AutoNumeric.options.caretPositionOnFocus.decimalLeft || this.settings.caretPositionOnFocus === _AutoNumeric.options.caretPositionOnFocus.decimalRight) {
        if (hasDecimalChar) {
          integerSize = value.indexOf(this.settings.decimalCharacter);
          offsetDecimalChar = this.settings.decimalCharacter.length;
        } else {
          integerSize = valueSize;
          offsetDecimalChar = 0;
        }
      }
    }
    let signToUse = "";
    if (isValueNegative) {
      signToUse = this.settings.negativeSignCharacter;
    } else if (this.settings.showPositiveSign && !isZeroOrHasNoValue) {
      signToUse = this.settings.positiveSignCharacter;
    }
    const positiveNegativeSignSize = signToUse.length;
    const currencySymbolSize = this.settings.currencySymbol.length;
    let caretPosition;
    if (this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.prefix) {
      if (this.settings.caretPositionOnFocus === _AutoNumeric.options.caretPositionOnFocus.start) {
        if (this.settings.negativePositiveSignPlacement !== _AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && this.settings.showPositiveSign && !isZeroOrHasNoValue)) {
          switch (this.settings.negativePositiveSignPlacement) {
            case _AutoNumeric.options.negativePositiveSignPlacement.prefix:
            case _AutoNumeric.options.negativePositiveSignPlacement.left:
            case _AutoNumeric.options.negativePositiveSignPlacement.right:
              caretPosition = positiveNegativeSignSize + currencySymbolSize;
              break;
            case _AutoNumeric.options.negativePositiveSignPlacement.suffix:
              caretPosition = currencySymbolSize;
              break;
          }
        } else {
          caretPosition = currencySymbolSize;
        }
      } else if (this.settings.caretPositionOnFocus === _AutoNumeric.options.caretPositionOnFocus.end) {
        if (this.settings.negativePositiveSignPlacement !== _AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && this.settings.showPositiveSign && !isZeroOrHasNoValue)) {
          switch (this.settings.negativePositiveSignPlacement) {
            case _AutoNumeric.options.negativePositiveSignPlacement.prefix:
            case _AutoNumeric.options.negativePositiveSignPlacement.left:
            case _AutoNumeric.options.negativePositiveSignPlacement.right:
              caretPosition = totalLength;
              break;
            case _AutoNumeric.options.negativePositiveSignPlacement.suffix:
              caretPosition = currencySymbolSize + valueSize;
              break;
          }
        } else {
          caretPosition = totalLength;
        }
      } else if (this.settings.caretPositionOnFocus === _AutoNumeric.options.caretPositionOnFocus.decimalLeft) {
        if (this.settings.negativePositiveSignPlacement !== _AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && this.settings.showPositiveSign && !isZeroOrHasNoValue)) {
          switch (this.settings.negativePositiveSignPlacement) {
            case _AutoNumeric.options.negativePositiveSignPlacement.prefix:
            case _AutoNumeric.options.negativePositiveSignPlacement.left:
            case _AutoNumeric.options.negativePositiveSignPlacement.right:
              caretPosition = positiveNegativeSignSize + currencySymbolSize + integerSize;
              break;
            case _AutoNumeric.options.negativePositiveSignPlacement.suffix:
              caretPosition = currencySymbolSize + integerSize;
              break;
          }
        } else {
          caretPosition = currencySymbolSize + integerSize;
        }
      } else if (this.settings.caretPositionOnFocus === _AutoNumeric.options.caretPositionOnFocus.decimalRight) {
        if (this.settings.negativePositiveSignPlacement !== _AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && this.settings.showPositiveSign && !isZeroOrHasNoValue)) {
          switch (this.settings.negativePositiveSignPlacement) {
            case _AutoNumeric.options.negativePositiveSignPlacement.prefix:
            case _AutoNumeric.options.negativePositiveSignPlacement.left:
            case _AutoNumeric.options.negativePositiveSignPlacement.right:
              caretPosition = positiveNegativeSignSize + currencySymbolSize + integerSize + offsetDecimalChar;
              break;
            case _AutoNumeric.options.negativePositiveSignPlacement.suffix:
              caretPosition = currencySymbolSize + integerSize + offsetDecimalChar;
              break;
          }
        } else {
          caretPosition = currencySymbolSize + integerSize + offsetDecimalChar;
        }
      }
    } else if (this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.suffix) {
      if (this.settings.caretPositionOnFocus === _AutoNumeric.options.caretPositionOnFocus.start) {
        if (this.settings.negativePositiveSignPlacement !== _AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && this.settings.showPositiveSign && !isZeroOrHasNoValue)) {
          switch (this.settings.negativePositiveSignPlacement) {
            case _AutoNumeric.options.negativePositiveSignPlacement.suffix:
            case _AutoNumeric.options.negativePositiveSignPlacement.right:
            case _AutoNumeric.options.negativePositiveSignPlacement.left:
              caretPosition = 0;
              break;
            case _AutoNumeric.options.negativePositiveSignPlacement.prefix:
              caretPosition = positiveNegativeSignSize;
              break;
          }
        } else {
          caretPosition = 0;
        }
      } else if (this.settings.caretPositionOnFocus === _AutoNumeric.options.caretPositionOnFocus.end) {
        if (this.settings.negativePositiveSignPlacement !== _AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && this.settings.showPositiveSign && !isZeroOrHasNoValue)) {
          switch (this.settings.negativePositiveSignPlacement) {
            case _AutoNumeric.options.negativePositiveSignPlacement.suffix:
            case _AutoNumeric.options.negativePositiveSignPlacement.right:
            case _AutoNumeric.options.negativePositiveSignPlacement.left:
              caretPosition = valueSize;
              break;
            case _AutoNumeric.options.negativePositiveSignPlacement.prefix:
              caretPosition = positiveNegativeSignSize + valueSize;
              break;
          }
        } else {
          caretPosition = valueSize;
        }
      } else if (this.settings.caretPositionOnFocus === _AutoNumeric.options.caretPositionOnFocus.decimalLeft) {
        if (this.settings.negativePositiveSignPlacement !== _AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && this.settings.showPositiveSign && !isZeroOrHasNoValue)) {
          switch (this.settings.negativePositiveSignPlacement) {
            case _AutoNumeric.options.negativePositiveSignPlacement.suffix:
            case _AutoNumeric.options.negativePositiveSignPlacement.right:
            case _AutoNumeric.options.negativePositiveSignPlacement.left:
              caretPosition = integerSize;
              break;
            case _AutoNumeric.options.negativePositiveSignPlacement.prefix:
              caretPosition = positiveNegativeSignSize + integerSize;
              break;
          }
        } else {
          caretPosition = integerSize;
        }
      } else if (this.settings.caretPositionOnFocus === _AutoNumeric.options.caretPositionOnFocus.decimalRight) {
        if (this.settings.negativePositiveSignPlacement !== _AutoNumeric.options.negativePositiveSignPlacement.none && (isValueNegative || !isValueNegative && this.settings.showPositiveSign && !isZeroOrHasNoValue)) {
          switch (this.settings.negativePositiveSignPlacement) {
            case _AutoNumeric.options.negativePositiveSignPlacement.suffix:
            case _AutoNumeric.options.negativePositiveSignPlacement.right:
            case _AutoNumeric.options.negativePositiveSignPlacement.left:
              caretPosition = integerSize + offsetDecimalChar;
              break;
            case _AutoNumeric.options.negativePositiveSignPlacement.prefix:
              caretPosition = positiveNegativeSignSize + integerSize + offsetDecimalChar;
              break;
          }
        } else {
          caretPosition = integerSize + offsetDecimalChar;
        }
      }
    }
    return caretPosition;
  }
  /**
   * Truncate the trailing zeroes to the given number of decimal places
   *
   * @param {string} roundedInputValue
   * @param {int} decimalPlacesNeeded The number of decimal places to keep
   * @returns {string}
   */
  static _truncateZeros(roundedInputValue, decimalPlacesNeeded) {
    let regex;
    switch (decimalPlacesNeeded) {
      case 0:
        regex = /(\.(?:\d*[1-9])?)0*$/;
        break;
      case 1:
        regex = /(\.\d(?:\d*[1-9])?)0*$/;
        break;
      default:
        regex = new RegExp(`(\\.\\d{${decimalPlacesNeeded}}(?:\\d*[1-9])?)0*`);
    }
    roundedInputValue = roundedInputValue.replace(regex, "$1");
    if (decimalPlacesNeeded === 0) {
      roundedInputValue = roundedInputValue.replace(/\.$/, "");
    }
    return roundedInputValue;
  }
  /**
   * Round the given `value` with the number of decimal places to keep for the raw value.
   *
   * @param {string|null} value An unformatted numeric value
   * @param {object} settings
   * @returns {*}
   * @private
   */
  static _roundRawValue(value, settings) {
    return this._roundValue(value, settings, settings.decimalPlacesRawValue);
  }
  /**
   * Round the given `value` with the number of decimal places to show for the element if focused.
   *
   * @param {string|null} value An unformatted numeric value
   * @param {object} settings
   * @returns {*}
   * @private
   */
  static _roundFormattedValueShownOnFocus(value, settings) {
    return this._roundValue(value, settings, Number(settings.decimalPlacesShownOnFocus));
  }
  /**
   * Round the given `value` with the number of decimal places to show for the element if unfocused.
   *
   * @param {string|null} value An unformatted numeric value
   * @param {object} settings
   * @returns {*}
   * @private
   */
  static _roundFormattedValueShownOnBlur(value, settings) {
    return this._roundValue(value, settings, Number(settings.decimalPlacesShownOnBlur));
  }
  /**
   * Round the given `value` with the number of decimal places to show for the element based on the value of isFocused.
   *
   * @param {string|null} value An unformatted numeric value
   * @param {object} settings
   * @param {boolean} isFocused
   * @returns {*}
   * @private
   */
  static _roundFormattedValueShownOnFocusOrBlur(value, settings, isFocused) {
    if (isFocused) {
      return this._roundFormattedValueShownOnFocus(value, settings);
    } else {
      return this._roundFormattedValueShownOnBlur(value, settings);
    }
  }
  /**
   * Round the input value using the rounding method defined in the settings.
   * This function accepts multiple rounding methods. See the documentation for more details about those.
   *
   * Note : This is handled as text since JavaScript math functions can return inaccurate values.
   *
   * @param {string|null} inputValue An unformatted numeric value
   * @param {object} settings
   * @param {int} decimalPlacesToRoundTo
   * @returns {*}
   */
  static _roundValue(inputValue, settings, decimalPlacesToRoundTo) {
    if (AutoNumericHelper.isNull(inputValue)) {
      return inputValue;
    }
    inputValue = inputValue === "" ? "0" : inputValue.toString();
    if (settings.roundingMethod === _AutoNumeric.options.roundingMethod.toNearest05 || settings.roundingMethod === _AutoNumeric.options.roundingMethod.toNearest05Alt || settings.roundingMethod === _AutoNumeric.options.roundingMethod.upToNext05 || settings.roundingMethod === _AutoNumeric.options.roundingMethod.downToNext05) {
      return this._roundCloseTo05(inputValue, settings);
    }
    const [negativeSign, preparedValue] = _AutoNumeric._prepareValueForRounding(inputValue, settings);
    inputValue = preparedValue;
    const decimalCharacterPosition = inputValue.lastIndexOf(".");
    const inputValueHasNoDot = decimalCharacterPosition === -1;
    const [integerPart, decimalPart] = inputValue.split(".");
    const hasDecimals = decimalPart > 0;
    if (!hasDecimals && (settings.allowDecimalPadding === _AutoNumeric.options.allowDecimalPadding.never || settings.allowDecimalPadding === _AutoNumeric.options.allowDecimalPadding.floats)) {
      return Number(inputValue) === 0 ? integerPart : `${negativeSign}${integerPart}`;
    }
    let temporaryDecimalPlacesOverride;
    if (settings.allowDecimalPadding === _AutoNumeric.options.allowDecimalPadding.always || settings.allowDecimalPadding === _AutoNumeric.options.allowDecimalPadding.floats) {
      temporaryDecimalPlacesOverride = decimalPlacesToRoundTo;
    } else if (settings.allowDecimalPadding > 0) {
      temporaryDecimalPlacesOverride = settings.allowDecimalPadding;
    } else {
      temporaryDecimalPlacesOverride = 0;
    }
    const decimalPositionToUse = inputValueHasNoDot ? inputValue.length - 1 : decimalCharacterPosition;
    let checkDecimalPlaces = inputValue.length - 1 - decimalPositionToUse;
    let inputValueRounded = "";
    if (checkDecimalPlaces <= decimalPlacesToRoundTo) {
      inputValueRounded = inputValue;
      if (checkDecimalPlaces < temporaryDecimalPlacesOverride) {
        if (inputValueHasNoDot) {
          inputValueRounded = `${inputValueRounded}${settings.decimalCharacter}`;
        }
        let zeros = "000000";
        while (checkDecimalPlaces < temporaryDecimalPlacesOverride) {
          zeros = zeros.substring(0, temporaryDecimalPlacesOverride - checkDecimalPlaces);
          inputValueRounded += zeros;
          checkDecimalPlaces += zeros.length;
        }
      } else if (checkDecimalPlaces > temporaryDecimalPlacesOverride) {
        inputValueRounded = this._truncateZeros(inputValueRounded, temporaryDecimalPlacesOverride);
      } else if (checkDecimalPlaces === 0 && temporaryDecimalPlacesOverride === 0) {
        inputValueRounded = inputValueRounded.replace(/\.$/, "");
      }
      return Number(inputValueRounded) === 0 ? inputValueRounded : `${negativeSign}${inputValueRounded}`;
    }
    let roundedStrLength;
    if (inputValueHasNoDot) {
      roundedStrLength = decimalPlacesToRoundTo - 1;
    } else {
      roundedStrLength = Number(decimalPlacesToRoundTo) + Number(decimalCharacterPosition);
    }
    const lastDigit = Number(inputValue.charAt(roundedStrLength + 1));
    let inputValueArray = inputValue.substring(0, roundedStrLength + 1).split("");
    let odd;
    if (inputValue.charAt(roundedStrLength) === ".") {
      odd = inputValue.charAt(roundedStrLength - 1) % 2;
    } else {
      odd = inputValue.charAt(roundedStrLength) % 2;
    }
    if (this._shouldRoundUp(lastDigit, settings, negativeSign, odd)) {
      for (let i = inputValueArray.length - 1; i >= 0; i -= 1) {
        if (inputValueArray[i] !== ".") {
          inputValueArray[i] = +inputValueArray[i] + 1;
          if (inputValueArray[i] < 10) {
            break;
          }
          if (i > 0) {
            inputValueArray[i] = "0";
          }
        }
      }
    }
    inputValueArray = inputValueArray.slice(0, roundedStrLength + 1);
    inputValueRounded = this._truncateZeros(inputValueArray.join(""), temporaryDecimalPlacesOverride);
    return Number(inputValueRounded) === 0 ? inputValueRounded : `${negativeSign}${inputValueRounded}`;
  }
  /**
   * Round the `value` when the rounding method deals with '.05'
   *
   * @param {string} value
   * @param {object} settings
   * @returns {string}
   * @private
   */
  static _roundCloseTo05(value, settings) {
    switch (settings.roundingMethod) {
      case _AutoNumeric.options.roundingMethod.toNearest05:
      case _AutoNumeric.options.roundingMethod.toNearest05Alt:
        value = (Math.round(value * 20) / 20).toString();
        break;
      case _AutoNumeric.options.roundingMethod.upToNext05:
        value = (Math.ceil(value * 20) / 20).toString();
        break;
      default:
        value = (Math.floor(value * 20) / 20).toString();
    }
    let result;
    if (!AutoNumericHelper.contains(value, ".")) {
      result = value + ".00";
    } else if (value.length - value.indexOf(".") < 3) {
      result = value + "0";
    } else {
      result = value;
    }
    return result;
  }
  /**
   * Modify the given `value` in order to make it usable for the rest of the rounding function.
   * This convert the `value` to a positive one, trim any leading zeros and make sure it does not start with a leading dot.
   *
   * @param {string} value The unformatted value
   * @param {object} settings
   * @returns {[string, string]}
   * @private
   */
  static _prepareValueForRounding(value, settings) {
    let negativeSign = "";
    if (AutoNumericHelper.isNegativeStrict(value, "-")) {
      negativeSign = "-";
      value = value.replace("-", "");
    }
    if (!value.match(/^\d/)) {
      value = `0${value}`;
    }
    if (Number(value) === 0) {
      negativeSign = "";
    }
    if (Number(value) > 0 && settings.leadingZero !== _AutoNumeric.options.leadingZero.keep || value.length > 0 && settings.leadingZero === _AutoNumeric.options.leadingZero.allow) {
      value = value.replace(/^0*(\d)/, "$1");
    }
    return [negativeSign, value];
  }
  /**
   * Return `true` if a round up should be done given the last digit, the settings and other information about the value.
   *
   * @param {number} lastDigit
   * @param {object} settings
   * @param {string} negativeSign This variable comes from `_prepareValueForRounding()`, which return `'-'` if the initial value was negative
   * @param {number} odd
   * @returns {boolean}
   * @private
   */
  static _shouldRoundUp(lastDigit, settings, negativeSign, odd) {
    return lastDigit > 4 && settings.roundingMethod === _AutoNumeric.options.roundingMethod.halfUpSymmetric || // Round half up symmetric
    lastDigit > 4 && settings.roundingMethod === _AutoNumeric.options.roundingMethod.halfUpAsymmetric && negativeSign === "" || // Round half up asymmetric positive values
    lastDigit > 5 && settings.roundingMethod === _AutoNumeric.options.roundingMethod.halfUpAsymmetric && negativeSign === "-" || // Round half up asymmetric negative values
    lastDigit > 5 && settings.roundingMethod === _AutoNumeric.options.roundingMethod.halfDownSymmetric || // Round half down symmetric
    lastDigit > 5 && settings.roundingMethod === _AutoNumeric.options.roundingMethod.halfDownAsymmetric && negativeSign === "" || // Round half down asymmetric positive values
    lastDigit > 4 && settings.roundingMethod === _AutoNumeric.options.roundingMethod.halfDownAsymmetric && negativeSign === "-" || // Round half down asymmetric negative values
    lastDigit > 5 && settings.roundingMethod === _AutoNumeric.options.roundingMethod.halfEvenBankersRounding || lastDigit === 5 && settings.roundingMethod === _AutoNumeric.options.roundingMethod.halfEvenBankersRounding && odd === 1 || lastDigit > 0 && settings.roundingMethod === _AutoNumeric.options.roundingMethod.toCeilingTowardPositiveInfinity && negativeSign === "" || lastDigit > 0 && settings.roundingMethod === _AutoNumeric.options.roundingMethod.toFloorTowardNegativeInfinity && negativeSign === "-" || lastDigit > 0 && settings.roundingMethod === _AutoNumeric.options.roundingMethod.upRoundAwayFromZero;
  }
  /**
   * Truncates the decimal part of a number to the given number of decimal places `decimalPlacesToRoundTo`.
   *
   * @param {string} value
   * @param {object} settings
   * @param {boolean} isPaste
   * @param {int} decimalPlacesToRoundTo
   * @returns {*}
   */
  static _truncateDecimalPlaces(value, settings, isPaste, decimalPlacesToRoundTo) {
    if (isPaste) {
      value = this._roundFormattedValueShownOnFocus(value, settings);
    }
    const [integerPart, decimalPart] = value.split(settings.decimalCharacter);
    if (decimalPart && decimalPart.length > decimalPlacesToRoundTo) {
      if (decimalPlacesToRoundTo > 0) {
        const modifiedDecimalPart = decimalPart.substring(0, decimalPlacesToRoundTo);
        value = `${integerPart}${settings.decimalCharacter}${modifiedDecimalPart}`;
      } else {
        value = integerPart;
      }
    }
    return value;
  }
  /**
   * Check if the given value is within the `minimumValue` and `maximumValue` range, while using the override options set with `overrideMinMaxLimits`.
   * The minimum and maximum limit test results are returned in an array like `[isMinimumLimitRespected, isMaximumLimitRespected]`.
   *
   * @param {string} value
   * @param {object} settings
   * @returns {[boolean, boolean]}
   */
  static _checkIfInRangeWithOverrideOption(value, settings) {
    if (AutoNumericHelper.isNull(value) && settings.emptyInputBehavior === _AutoNumeric.options.emptyInputBehavior.null || // When the `null` value is accepted as the `rawValue`, the limits are ignored
    settings.overrideMinMaxLimits === _AutoNumeric.options.overrideMinMaxLimits.ignore || settings.overrideMinMaxLimits === _AutoNumeric.options.overrideMinMaxLimits.invalid) {
      return [true, true];
    }
    value = value.toString();
    value = value.replace(",", ".");
    const minParse = AutoNumericHelper.parseStr(settings.minimumValue);
    const maxParse = AutoNumericHelper.parseStr(settings.maximumValue);
    const valParse = AutoNumericHelper.parseStr(value);
    let result;
    switch (settings.overrideMinMaxLimits) {
      case _AutoNumeric.options.overrideMinMaxLimits.floor:
        result = [AutoNumericHelper.testMinMax(minParse, valParse) > -1, true];
        break;
      case _AutoNumeric.options.overrideMinMaxLimits.ceiling:
        result = [true, AutoNumericHelper.testMinMax(maxParse, valParse) < 1];
        break;
      default:
        result = [AutoNumericHelper.testMinMax(minParse, valParse) > -1, AutoNumericHelper.testMinMax(maxParse, valParse) < 1];
    }
    return result;
  }
  /**
   * Returns `true` if the given value is within the `minimumValue` and `maximumValue` limits, while using the override options set with `overrideMinMaxLimits`, `false` otherwise
   *
   * @param {string} value
   * @param {object} settings
   * @returns {boolean}
   * @private
   */
  static _isWithinRangeWithOverrideOption(value, settings) {
    const [minTest, maxTest] = this._checkIfInRangeWithOverrideOption(value, settings);
    return minTest && maxTest;
  }
  /**
   * Helper function that prepares the value string for the min/max test
   *
   * @param {string} value
   * @returns {{}}
   * @private
   */
  static _cleanValueForRangeParse(value) {
    value = value.toString().replace(",", ".");
    return AutoNumericHelper.parseStr(value);
  }
  /**
   * Returns `true` is the value is superior or equal to the `minimumValue` limit, discarding any override options
   *
   * @param {string} value
   * @param {object} settings
   * @returns {boolean}
   * @private
   */
  static _isMinimumRangeRespected(value, settings) {
    return AutoNumericHelper.testMinMax(AutoNumericHelper.parseStr(settings.minimumValue), this._cleanValueForRangeParse(value)) > -1;
  }
  /**
   * Returns `true` is the value is inferior or equal to the `maximumValue` limit, discarding any override options
   *
   * @param {string} value
   * @param {object} settings
   * @returns {boolean}
   * @private
   */
  static _isMaximumRangeRespected(value, settings) {
    return AutoNumericHelper.testMinMax(AutoNumericHelper.parseStr(settings.maximumValue), this._cleanValueForRangeParse(value)) < 1;
  }
  /**
   * Helper function that triggers the range events if they are needed
   *
   * @param {boolean} minTest
   * @param {boolean} maxTest
   * @private
   */
  _triggerRangeEvents(minTest, maxTest) {
    if (!minTest) {
      this._triggerEvent(_AutoNumeric.events.minRangeExceeded, this.domElement);
    }
    if (!maxTest) {
      this._triggerEvent(_AutoNumeric.events.maxRangeExceeded, this.domElement);
    }
  }
  /**
   * Set the invalid state on the AutoNumeric element.
   * If the element is not an input, and therefore a contenteditable-enabled element, its validity state cannot be changed.
   * In that case, the invalid css class defined with the `settings.invalidClass` option is added to the element.
   * The 'autoNumeric:invalidValue' event is always sent when this function is called.
   *
   * @private
   */
  _setInvalidState() {
    if (this.isInputElement) {
      AutoNumericHelper.setInvalidState(this.domElement);
    } else {
      this._addCSSClass(this.settings.invalidClass);
    }
    this._triggerEvent(_AutoNumeric.events.invalidValue, this.domElement);
    this.validState = false;
  }
  /**
   * Set the valid state on the AutoNumeric element.
   * If the element is not an input, and therefore a contenteditable-enabled element, its validity state cannot be changed.
   * In that case, the invalid css class defined with the `settings.invalidClass` option is removed.
   * The 'autoNumeric:correctedValue' event is sent if the element state is invalid when this is called.
   *
   * @private
   */
  _setValidState() {
    if (this.isInputElement) {
      AutoNumericHelper.setValidState(this.domElement);
    } else {
      this._removeCSSClass(this.settings.invalidClass);
    }
    if (!this.validState) {
      this._triggerEvent(_AutoNumeric.events.correctedValue, this.domElement);
    }
    this.validState = true;
  }
  /**
   * Sets the valid or invalid state on the DOM element, if the value is within the range set by the minimum and maximum value
   *
   * @param {string} value
   * @private
   */
  _setValidOrInvalidState(value) {
    if (this.settings.overrideMinMaxLimits === _AutoNumeric.options.overrideMinMaxLimits.invalid) {
      const minRangeOk = this.constructor._isMinimumRangeRespected(value, this.settings);
      const maxRangeOk = this.constructor._isMaximumRangeRespected(value, this.settings);
      if (minRangeOk && maxRangeOk) {
        this._setValidState();
      } else {
        this._setInvalidState();
      }
      this._triggerRangeEvents(minRangeOk, maxRangeOk);
    }
  }
  /**
   * Original settings saved for use when the `decimalPlacesShownOnFocus` and `showOnlyNumbersOnFocus` options are used.
   * Those original settings are used exclusively in the `focusin` and `focusout` event handlers.
   */
  _keepAnOriginalSettingsCopy() {
    this.originalDigitGroupSeparator = this.settings.digitGroupSeparator;
    this.originalCurrencySymbol = this.settings.currencySymbol;
    this.originalSuffixText = this.settings.suffixText;
  }
  /**
   * Removes any zeros in excess in the front and back of the given `value`, according to the `settings`.
   * This also manages the cases where the decimal point is on the far left or far right of the `value`.
   *
   * @param {string} value
   * @returns {string|null}
   */
  _trimLeadingAndTrailingZeros(value) {
    if (value === "" || value === null) {
      return value;
    }
    if (this.settings.leadingZero !== _AutoNumeric.options.leadingZero.keep) {
      if (Number(value) === 0) {
        return "0";
      }
      value = value.replace(/^(-)?0+(?=\d)/g, "$1");
    }
    if (AutoNumericHelper.contains(value, ".")) {
      value = value.replace(/(\.[0-9]*?)0+$/, "$1");
    }
    value = value.replace(/\.$/, "");
    return value;
  }
  /**
   * Generate the name for the persistent stored data variable
   * @private
   */
  _setPersistentStorageName() {
    if (this.settings.saveValueToSessionStorage) {
      if (this.domElement.name !== "" && !AutoNumericHelper.isUndefined(this.domElement.name)) {
        this.rawValueStorageName = `${this.storageNamePrefix}${decodeURIComponent(this.domElement.name)}`;
      } else {
        this.rawValueStorageName = `${this.storageNamePrefix}${this.domElement.id}`;
      }
    }
  }
  /**
   * Save the raw Value into sessionStorage or a cookie depending on what the browser is supporting.
   * @private
   */
  _saveValueToPersistentStorage() {
    if (this.settings.saveValueToSessionStorage) {
      sessionStorage.setItem(this.rawValueStorageName, this.rawValue);
    }
  }
  /**
   * Retrieve the raw value from sessionStorage or the cookie depending on what the browser is supporting.
   *
   * @returns {*}
   * @private
   */
  _getValueFromPersistentStorage() {
    if (this.settings.saveValueToSessionStorage) {
      return sessionStorage.getItem(this.rawValueStorageName);
    }
    AutoNumericHelper.warning("`_getValueFromPersistentStorage()` is called but `settings.saveValueToSessionStorage` is false. There must be an error that needs fixing.", this.settings.showWarnings);
    return null;
  }
  /**
   * Remove the raw value data from sessionStorage or the cookie depending on what the browser is supporting.
   * @private
   */
  _removeValueFromPersistentStorage() {
    if (this.settings.saveValueToSessionStorage) {
      sessionStorage.removeItem(this.rawValueStorageName);
    }
  }
  /**
   * Get the default value from the html `value` attribute.
   * Return the empty string if such attribute is not found.
   *
   * @param {HTMLElement} domElement
   *
   * @returns {string}
   * @private
   */
  _getDefaultValue(domElement) {
    const value = domElement.getAttribute("value");
    if (AutoNumericHelper.isNull(value)) {
      return "";
    }
    return value;
  }
  /**
   * Handler for 'focusin' and 'mouseenter' events
   * On focusin, multiple things happens :
   * - If `Alt` is pressed, unformat
   * - Remove the separators if `showOnlyNumbersOnFocus` is set
   * - Depending on `emptyInputBehavior`, reformat the empty formatted value
   * - Display the correct number of decimal places (on focus/blur)
   * - Place the caret correctly if the element is empty
   *
   * Note: On focusin, the `rawValue` is never changed. Only the formatted value can be modified.
   *
   * @param {KeyboardEvent|MouseEvent} e
   * @private
   */
  _onFocusInAndMouseEnter(e) {
    this.isEditing = false;
    if (!this.formulaMode && this.settings.unformatOnHover && e.type === "mouseenter" && e.altKey) {
      this.constructor._unformatAltHovered(this);
      return;
    }
    if (e.type === "focus") {
      this.isFocused = true;
      this.rawValueOnFocus = this.rawValue;
    }
    if (e.type === "focus" && this.settings.unformatOnHover && this.hoveredWithAlt) {
      this.constructor._reformatAltHovered(this);
    }
    if (e.type === "focus" || e.type === "mouseenter" && !this.isFocused) {
      let elementValueToSet = null;
      if (this.settings.emptyInputBehavior === _AutoNumeric.options.emptyInputBehavior.focus && this.rawValue < 0 && this.settings.negativeBracketsTypeOnBlur !== null && this.settings.isNegativeSignAllowed) {
        elementValueToSet = this.constructor._removeBrackets(AutoNumericHelper.getElementValue(this.domElement), this.settings);
      }
      const rawValueToFormat = this._getRawValueToFormat(this.rawValue);
      if (rawValueToFormat !== "") {
        const roundedValue = this.constructor._roundFormattedValueShownOnFocusOrBlur(rawValueToFormat, this.settings, this.isFocused);
        if (this.settings.showOnlyNumbersOnFocus === _AutoNumeric.options.showOnlyNumbersOnFocus.onlyNumbers) {
          this.settings.digitGroupSeparator = "";
          this.settings.currencySymbol = "";
          this.settings.suffixText = "";
          elementValueToSet = roundedValue.replace(".", this.settings.decimalCharacter);
        } else {
          let formattedValue;
          if (AutoNumericHelper.isNull(roundedValue)) {
            formattedValue = "";
          } else {
            formattedValue = this.constructor._addGroupSeparators(roundedValue.replace(".", this.settings.decimalCharacter), this.settings, this.isFocused, rawValueToFormat);
          }
          elementValueToSet = formattedValue;
        }
      }
      if (AutoNumericHelper.isNull(elementValueToSet)) {
        this.valueOnFocus = "";
      } else {
        this.valueOnFocus = elementValueToSet;
      }
      this.lastVal = this.valueOnFocus;
      const isEmptyValue = this.constructor._isElementValueEmptyOrOnlyTheNegativeSign(this.valueOnFocus, this.settings);
      const orderedValue = this.constructor._orderValueCurrencySymbolAndSuffixText(this.valueOnFocus, this.settings, true);
      const orderedValueTest = isEmptyValue && orderedValue !== "" && this.settings.emptyInputBehavior === _AutoNumeric.options.emptyInputBehavior.focus;
      if (orderedValueTest) {
        elementValueToSet = orderedValue;
      }
      if (!AutoNumericHelper.isNull(elementValueToSet)) {
        this._setElementValue(elementValueToSet);
      }
      if (orderedValueTest && orderedValue === this.settings.currencySymbol && this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.suffix) {
        AutoNumericHelper.setElementSelection(e.target, 0);
      }
    }
  }
  /**
   * Handler for the 'focus' event.
   * We update the info of the focused state in the `this.isFocused` variable when the element gets focused.
   * @private
   */
  _onFocus() {
    if (this.settings.isCancellable) {
      this._saveCancellableValue();
    }
  }
  /**
   * Handler for the 'focusin' event.
   * This is called before the 'focus' event, and is necessary to change the selection on focus under Firefox for instance.
   *
   * @param {Event} e
   * @private
   */
  _onFocusIn(e) {
    if (this.settings.selectOnFocus) {
      this.select();
    } else {
      if (!AutoNumericHelper.isNull(this.settings.caretPositionOnFocus)) {
        AutoNumericHelper.setElementSelection(e.target, this._initialCaretPosition(AutoNumericHelper.getElementValue(this.domElement)));
      }
    }
  }
  /**
   * Enter the special 'formula mode' where users can enter a math expression that will be evaluated on blur and `enter`
   * @private
   */
  _enterFormulaMode() {
    if (this.settings.formulaMode) {
      this.formulaMode = true;
      AutoNumericHelper.setElementValue(this.domElement, "=");
      AutoNumericHelper.setElementSelection(this.domElement, 1);
    }
  }
  /**
   * Exit the formula mode
   * Tries to parse and evaluate the math expression, then `set()` the result if it's correct, otherwise reformat with the previous `rawValue`
   * @private
   */
  _exitFormulaMode() {
    let formula = AutoNumericHelper.getElementValue(this.domElement);
    formula = formula.replace(/^\s*=/, "");
    let result;
    try {
      const ast = new Parser(formula, this.settings.decimalCharacter);
      result = new Evaluator().evaluate(ast);
    } catch (e) {
      this._triggerEvent(_AutoNumeric.events.invalidFormula, this.domElement, {
        formula,
        aNElement: this
      });
      this.reformat();
      this.formulaMode = false;
      return;
    }
    this._triggerEvent(_AutoNumeric.events.validFormula, this.domElement, {
      formula,
      result,
      aNElement: this
    });
    this.set(result);
    this.formulaMode = false;
  }
  /**
   * Returns `true` if the non-printable key is accepted in formula mode
   *
   * @returns {boolean}
   * @private
   */
  _acceptNonPrintableKeysInFormulaMode() {
    return this.eventKey === AutoNumericEnum.keyName.Backspace || this.eventKey === AutoNumericEnum.keyName.Delete || this.eventKey === AutoNumericEnum.keyName.LeftArrow || this.eventKey === AutoNumericEnum.keyName.RightArrow || this.eventKey === AutoNumericEnum.keyName.Home || this.eventKey === AutoNumericEnum.keyName.End;
  }
  /**
   * Handler for 'keydown' events.
   * The user just started pushing any key, hence one event is sent.
   *
   * Note :
   * By default a 'normal' input output those events in the right order when inputting a character key (i.e. 'a') :
   * - keydown
   * - keypress
   * - input
   * - keyup
   *
   * ...when inputting a modifier key (i.e. 'ctrl') :
   * - keydown
   * - keyup
   *
   * If 'delete' or 'backspace' are entered 'normally', the following events are sent :
   * - keydown
   * - input
   * - keyup
   *
   * If 'delete' or 'backspace' are entered continuously (with the key still pressed), the following events are sent :
   * - keydown
   * - input
   * [- keydown
   * - input] x times
   * - keyup
   *
   * If 'enter' is entered and the value has not changed, the following events are sent :
   * - keydown
   * - keypress
   * - keyup
   *
   * If 'enter' is entered and the value has been changed, the following events are sent :
   * - keydown
   * - keypress
   * - change
   * - keyup
   *
   * When a paste is done, the following events are sent :
   * - input (if paste is done with the mouse)
   *
   * - keydown (if paste is done with ctrl+v)
   * - keydown
   * - input
   * - keyup
   * - keyup
   *
   * @param {KeyboardEvent} e
   */
  _onKeydown(e) {
    this.formatted = false;
    this.isEditing = true;
    if (!this.formulaMode && !this.isFocused && this.settings.unformatOnHover && e.altKey && this.domElement === AutoNumericHelper.getHoveredElement()) {
      this.constructor._unformatAltHovered(this);
      return;
    }
    this._updateEventKeyInfo(e);
    this.keydownEventCounter += 1;
    if (this.keydownEventCounter === 1) {
      this.initialValueOnFirstKeydown = AutoNumericHelper.getElementValue(e.target);
      this.initialRawValueOnFirstKeydown = this.rawValue;
    }
    if (this.formulaMode) {
      if (this.eventKey === AutoNumericEnum.keyName.Esc) {
        this.formulaMode = false;
        this.reformat();
        return;
      }
      if (this.eventKey === AutoNumericEnum.keyName.Enter) {
        this._exitFormulaMode();
        return;
      }
      if (this._acceptNonPrintableKeysInFormulaMode()) {
        return;
      }
    } else {
      if (this.eventKey === AutoNumericEnum.keyName.Equal) {
        this._enterFormulaMode();
        return;
      }
      if (this.settings.modifyValueOnUpDownArrow && (this.eventKey === AutoNumericEnum.keyName.UpArrow || this.eventKey === AutoNumericEnum.keyName.DownArrow)) {
        this.upDownArrowAction(e);
        return;
      }
    }
    if (this.domElement.readOnly || this.settings.readOnly || this.domElement.disabled) {
      this.processed = true;
      return;
    }
    if (this.eventKey === AutoNumericEnum.keyName.Esc) {
      e.preventDefault();
      if (this.settings.isCancellable) {
        if (this.rawValue !== this.savedCancellableValue) {
          this.set(this.savedCancellableValue);
          this._triggerEvent(_AutoNumeric.events.native.input, e.target);
        }
      }
      this.select();
    }
    let targetValue = AutoNumericHelper.getElementValue(e.target);
    if (this.eventKey === AutoNumericEnum.keyName.Enter && this.rawValue !== this.rawValueOnFocus) {
      this._triggerEvent(_AutoNumeric.events.native.change, e.target);
      this.valueOnFocus = targetValue;
      this.rawValueOnFocus = this.rawValue;
      if (this.settings.isCancellable) {
        this._saveCancellableValue();
      }
    }
    this._updateInternalProperties(e);
    if (this._processNonPrintableKeysAndShortcuts(e)) {
      this.processed = true;
      return;
    }
    if (this.eventKey === AutoNumericEnum.keyName.Backspace || this.eventKey === AutoNumericEnum.keyName.Delete) {
      const isDeletionAllowed = this._processCharacterDeletion(e);
      this.processed = true;
      if (!isDeletionAllowed) {
        e.preventDefault();
        return;
      }
      this._formatValue(e);
      targetValue = AutoNumericHelper.getElementValue(e.target);
      if (targetValue !== this.lastVal && this.throwInput) {
        this._triggerEvent(_AutoNumeric.events.native.input, e.target);
        e.preventDefault();
      }
      this.lastVal = targetValue;
      this.throwInput = true;
    }
  }
  /**
   * Handler for 'keypress' events.
   * The user is still pressing the key, which will output a character (i.e. '2') continuously until he releases the key.
   * Note: 'keypress' events are not sent for delete keys like Backspace/Delete.
   *
   * @param {KeyboardEvent} e
   */
  _onKeypress(e) {
    if (this.formulaMode) {
      if (this._acceptNonPrintableKeysInFormulaMode()) {
        return;
      }
      if (this.settings.formulaChars.test(this.eventKey)) {
        return;
      } else {
        e.preventDefault();
      }
      return;
    }
    if (this.eventKey === AutoNumericEnum.keyName.Insert) {
      return;
    }
    const processed = this.processed;
    this._updateInternalProperties(e);
    if (this._processNonPrintableKeysAndShortcuts(e)) {
      return;
    }
    if (processed) {
      e.preventDefault();
      return;
    }
    const isCharacterInsertionAllowed = this._processCharacterInsertion();
    if (isCharacterInsertionAllowed) {
      this._formatValue(e);
      const targetValue = AutoNumericHelper.getElementValue(e.target);
      if (targetValue !== this.lastVal && this.throwInput) {
        this._triggerEvent(_AutoNumeric.events.native.input, e.target);
        e.preventDefault();
      } else {
        if ((this.eventKey === this.settings.decimalCharacter || this.eventKey === this.settings.decimalCharacterAlternative) && AutoNumericHelper.getElementSelection(e.target).start === AutoNumericHelper.getElementSelection(e.target).end && AutoNumericHelper.getElementSelection(e.target).start === targetValue.indexOf(this.settings.decimalCharacter)) {
          const position = AutoNumericHelper.getElementSelection(e.target).start + 1;
          AutoNumericHelper.setElementSelection(e.target, position);
        }
        e.preventDefault();
      }
      this.lastVal = AutoNumericHelper.getElementValue(e.target);
      this.throwInput = true;
      this._setValidOrInvalidState(this.rawValue);
      return;
    }
    e.preventDefault();
  }
  /**
   * Handler for 'keyup' events.
   * The user just released any key, hence one event is sent.
   *
   * @param {KeyboardEvent} e
   */
  _onKeyup(e) {
    this.isEditing = false;
    this.keydownEventCounter = 0;
    if (this.formulaMode) {
      return;
    }
    if (this.settings.isCancellable && this.eventKey === AutoNumericEnum.keyName.Esc) {
      e.preventDefault();
      return;
    }
    this._updateEventKeyInfo(e);
    if (this.eventKey === AutoNumericEnum.keyName.Z || this.eventKey === AutoNumericEnum.keyName.z) {
      if (e.ctrlKey && e.shiftKey) {
        e.preventDefault();
        this._historyTableRedo();
        this._triggerEvent(_AutoNumeric.events.native.input, e.target);
        this.onGoingRedo = true;
        return;
      } else if (e.ctrlKey && !e.shiftKey) {
        if (this.onGoingRedo) {
          this.onGoingRedo = false;
        } else {
          e.preventDefault();
          this._historyTableUndo();
          this._triggerEvent(_AutoNumeric.events.native.input, e.target);
          return;
        }
      }
    } else if ((this.eventKey === AutoNumericEnum.keyName.Y || this.eventKey === AutoNumericEnum.keyName.y) && e.ctrlKey) {
      e.preventDefault();
      this._historyTableRedo();
      this._triggerEvent(_AutoNumeric.events.native.input, e.target);
      this.onGoingRedo = true;
      return;
    }
    if (this.onGoingRedo && (e.ctrlKey || e.shiftKey)) {
      this.onGoingRedo = false;
    }
    if ((e.ctrlKey || e.metaKey) && (this.eventKey === AutoNumericEnum.keyName.X || this.eventKey === AutoNumericEnum.keyName.x)) {
      const caretPosition = AutoNumericHelper.getElementSelection(this.domElement).start;
      const cutNumber = this.constructor._toNumericValue(AutoNumericHelper.getElementValue(e.target), this.settings);
      this.set(cutNumber);
      this._setCaretPosition(caretPosition);
    }
    if (this.eventKey === AutoNumericEnum.keyName.Alt && this.settings.unformatOnHover && this.hoveredWithAlt) {
      this.constructor._reformatAltHovered(this);
      return;
    }
    if ((e.ctrlKey || e.metaKey) && (this.eventKey === AutoNumericEnum.keyName.Backspace || this.eventKey === AutoNumericEnum.keyName.Delete)) {
      const targetValue2 = AutoNumericHelper.getElementValue(e.target);
      this._setRawValue(this._formatOrUnformatOther(false, targetValue2));
      return;
    }
    this._updateInternalProperties(e);
    const skip = this._processNonPrintableKeysAndShortcuts(e);
    delete this.valuePartsBeforePaste;
    const targetValue = AutoNumericHelper.getElementValue(e.target);
    if (skip || targetValue === "" && this.initialValueOnFirstKeydown === "") {
      return;
    }
    if (targetValue === this.settings.currencySymbol) {
      if (this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.suffix) {
        AutoNumericHelper.setElementSelection(e.target, 0);
      } else {
        AutoNumericHelper.setElementSelection(e.target, this.settings.currencySymbol.length);
      }
    } else if (this.eventKey === AutoNumericEnum.keyName.Tab) {
      AutoNumericHelper.setElementSelection(e.target, 0, targetValue.length);
    }
    if (targetValue === this.settings.suffixText || this.rawValue === "" && this.settings.currencySymbol !== "" && this.settings.suffixText !== "") {
      AutoNumericHelper.setElementSelection(e.target, 0);
    }
    if (this.settings.decimalPlacesShownOnFocus !== null) {
      this._saveValueToPersistentStorage();
    }
    if (!this.formatted) {
      this._formatValue(e);
    }
    this._setValidOrInvalidState(this.rawValue);
    this._saveRawValueForAndroid();
    if (targetValue !== this.initialValueOnFirstKeydown) {
      this._triggerEvent(_AutoNumeric.events.formatted, e.target, {
        oldValue: this.initialValueOnFirstKeydown,
        newValue: targetValue,
        oldRawValue: this.initialRawValueOnFirstKeydown,
        newRawValue: this.rawValue,
        isPristine: this.isPristine(false),
        error: null,
        aNElement: this
      });
    }
    if (this.historyTable.length > 1) {
      const selection = AutoNumericHelper.getElementSelection(this.domElement);
      this.selectionStart = selection.start;
      this.selectionEnd = selection.end;
      this.historyTable[this.historyTableIndex].start = this.selectionStart;
      this.historyTable[this.historyTableIndex].end = this.selectionEnd;
    }
  }
  /**
   * On Android Chrome, the `rawValue` is not updated when the user changes the input value.
   * This function updates the `rawValue` accordingly.
   * @private
   */
  _saveRawValueForAndroid() {
    if (this.eventKey === AutoNumericEnum.keyName.AndroidDefault) {
      let normalizedValue = this.constructor._stripAllNonNumberCharactersExceptCustomDecimalChar(this.getFormatted(), this.settings, true, this.isFocused);
      normalizedValue = this.constructor._convertToNumericString(normalizedValue, this.settings);
      this._setRawValue(normalizedValue);
    }
  }
  /**
   * Handler for 'focusout' events
   * On focusout, multiple things happens :
   * - The element value is formatted back if the `Alt` key was pressed,
   * - The element value is formatted back if `showOnlyNumbersOnFocus` was set to only show numbers,
   * - The element value is multiplied by `rawValueDivisor` on `blur`
   *
   * Note: On focusout, the `rawValue` is never changed. Only the formatted value can be modified.
   *
   * @param {Event} e
   */
  _onFocusOutAndMouseLeave(e) {
    this.isEditing = false;
    if (e.type === "mouseleave" && this.formulaMode) {
      return;
    }
    if (this.settings.unformatOnHover && e.type === "mouseleave" && this.hoveredWithAlt) {
      this.constructor._reformatAltHovered(this);
      return;
    }
    if (e.type === "mouseleave" && !this.isFocused || e.type === "blur") {
      if (e.type === "blur" && this.formulaMode) {
        this._exitFormulaMode();
      }
      this._saveValueToPersistentStorage();
      if (this.settings.showOnlyNumbersOnFocus === _AutoNumeric.options.showOnlyNumbersOnFocus.onlyNumbers) {
        this.settings.digitGroupSeparator = this.originalDigitGroupSeparator;
        this.settings.currencySymbol = this.originalCurrencySymbol;
        this.settings.suffixText = this.originalSuffixText;
      }
      const rawValueToFormat = this._getRawValueToFormat(this.rawValue);
      const isRawValueNull = AutoNumericHelper.isNull(rawValueToFormat);
      const [minTest, maxTest] = this.constructor._checkIfInRangeWithOverrideOption(rawValueToFormat, this.settings);
      let elementValueIsAlreadySet = false;
      if (rawValueToFormat !== "" && !isRawValueNull) {
        this._triggerRangeEvents(minTest, maxTest);
        if (this.settings.valuesToStrings && this._checkValuesToStrings(rawValueToFormat)) {
          this._setElementValue(this.settings.valuesToStrings[rawValueToFormat]);
          elementValueIsAlreadySet = true;
        }
      }
      if (!elementValueIsAlreadySet) {
        let value;
        if (isRawValueNull || rawValueToFormat === "") {
          value = rawValueToFormat;
        } else {
          value = String(rawValueToFormat);
        }
        if (rawValueToFormat !== "" && !isRawValueNull) {
          if (minTest && maxTest && !this.constructor._isElementValueEmptyOrOnlyTheNegativeSign(rawValueToFormat, this.settings)) {
            value = this._modifyNegativeSignAndDecimalCharacterForRawValue(value);
            if (this.settings.divisorWhenUnfocused && !AutoNumericHelper.isNull(value)) {
              value = value / this.settings.divisorWhenUnfocused;
              value = value.toString();
            }
            value = this.constructor._roundFormattedValueShownOnBlur(value, this.settings);
            value = this.constructor._modifyNegativeSignAndDecimalCharacterForFormattedValue(value, this.settings);
          } else {
            this._triggerRangeEvents(minTest, maxTest);
          }
        } else if (rawValueToFormat === "") {
          switch (this.settings.emptyInputBehavior) {
            case _AutoNumeric.options.emptyInputBehavior.zero:
              this._setRawValue("0");
              value = this.constructor._roundValue("0", this.settings, 0);
              break;
            case _AutoNumeric.options.emptyInputBehavior.min:
              this._setRawValue(this.settings.minimumValue);
              value = this.constructor._roundFormattedValueShownOnFocusOrBlur(this.settings.minimumValue, this.settings, this.isFocused);
              break;
            case _AutoNumeric.options.emptyInputBehavior.max:
              this._setRawValue(this.settings.maximumValue);
              value = this.constructor._roundFormattedValueShownOnFocusOrBlur(this.settings.maximumValue, this.settings, this.isFocused);
              break;
            default:
              if (AutoNumericHelper.isNumber(this.settings.emptyInputBehavior)) {
                this._setRawValue(this.settings.emptyInputBehavior);
                value = this.constructor._roundFormattedValueShownOnFocusOrBlur(this.settings.emptyInputBehavior, this.settings, this.isFocused);
              }
          }
        }
        let groupedValue = this.constructor._orderValueCurrencySymbolAndSuffixText(value, this.settings, false);
        if (!(this.constructor._isElementValueEmptyOrOnlyTheNegativeSign(value, this.settings) || isRawValueNull && this.settings.emptyInputBehavior === _AutoNumeric.options.emptyInputBehavior.null)) {
          groupedValue = this.constructor._addGroupSeparators(value, this.settings, false, rawValueToFormat);
        }
        if (groupedValue !== rawValueToFormat || rawValueToFormat === "" || // This make sure we get rid on any currency symbol or suffix that might have been added on focus
        this.settings.allowDecimalPadding === _AutoNumeric.options.allowDecimalPadding.never || this.settings.allowDecimalPadding === _AutoNumeric.options.allowDecimalPadding.floats) {
          if (this.settings.symbolWhenUnfocused && rawValueToFormat !== "" && rawValueToFormat !== null) {
            groupedValue = `${groupedValue}${this.settings.symbolWhenUnfocused}`;
          }
          this._setElementValue(groupedValue);
        }
      }
      this._setValidOrInvalidState(this.rawValue);
      if (e.type === "blur") {
        this._onBlur(e);
      }
    }
  }
  /**
   * Handler for 'paste' event
   *
   * @param {Event|ClipboardEvent} e
   */
  _onPaste(e) {
    e.preventDefault();
    if (this.settings.readOnly || this.domElement.readOnly || this.domElement.disabled) {
      return;
    }
    let rawPastedText;
    if (e.clipboardData && e.clipboardData.getData) {
      rawPastedText = e.clipboardData.getData("text/plain");
    } else {
      AutoNumericHelper.throwError("Unable to retrieve the pasted value. Please use a modern browser (i.e. Firefox or Chromium).");
    }
    let eventTarget;
    if (!e.target.tagName) {
      eventTarget = e.explicitOriginalTarget;
    } else {
      eventTarget = e.target;
    }
    const initialFormattedValue = AutoNumericHelper.getElementValue(eventTarget);
    const selectionStart = eventTarget.selectionStart || 0;
    const selectionEnd = eventTarget.selectionEnd || 0;
    const selectionSize = selectionEnd - selectionStart;
    if (selectionSize === initialFormattedValue.length) {
      const untranslatedPastedText2 = this._preparePastedText(rawPastedText);
      const pastedRawValue = AutoNumericHelper.arabicToLatinNumbers(untranslatedPastedText2, false, false, false);
      if (pastedRawValue === "." || pastedRawValue === "" || pastedRawValue !== "." && !AutoNumericHelper.isNumber(pastedRawValue)) {
        this.formatted = true;
        if (this.settings.onInvalidPaste === _AutoNumeric.options.onInvalidPaste.error) {
          AutoNumericHelper.throwError(`The pasted value '${rawPastedText}' is not a valid paste content.`);
        }
        return;
      }
      this.set(pastedRawValue);
      this.formatted = true;
      this._triggerEvent(_AutoNumeric.events.native.input, eventTarget);
      return;
    }
    const isPasteNegative = AutoNumericHelper.isNegativeStrict(rawPastedText, this.settings.negativeSignCharacter);
    if (isPasteNegative) {
      rawPastedText = rawPastedText.slice(1, rawPastedText.length);
    }
    const untranslatedPastedText = this._preparePastedText(rawPastedText);
    let pastedText;
    if (untranslatedPastedText === ".") {
      pastedText = ".";
    } else {
      pastedText = AutoNumericHelper.arabicToLatinNumbers(untranslatedPastedText, false, false, false);
    }
    if (pastedText !== "." && (!AutoNumericHelper.isNumber(pastedText) || pastedText === "")) {
      this.formatted = true;
      if (this.settings.onInvalidPaste === _AutoNumeric.options.onInvalidPaste.error) {
        AutoNumericHelper.throwError(`The pasted value '${rawPastedText}' is not a valid paste content.`);
      }
      return;
    }
    let caretPositionOnInitialTextAfterPasting;
    let isInitialValueNegative = AutoNumericHelper.isNegativeStrict(this.getNumericString(), this.settings.negativeSignCharacter);
    let isPasteNegativeAndInitialValueIsPositive;
    let result;
    if (isPasteNegative && !isInitialValueNegative) {
      isInitialValueNegative = true;
      isPasteNegativeAndInitialValueIsPositive = true;
    } else {
      isPasteNegativeAndInitialValueIsPositive = false;
    }
    const leftFormattedPart = initialFormattedValue.slice(0, selectionStart);
    const rightFormattedPart = initialFormattedValue.slice(selectionEnd, initialFormattedValue.length);
    if (selectionStart !== selectionEnd) {
      result = this._preparePastedText(leftFormattedPart + rightFormattedPart);
    } else {
      result = this._preparePastedText(initialFormattedValue);
    }
    if (isInitialValueNegative) {
      result = AutoNumericHelper.setRawNegativeSign(result);
    }
    caretPositionOnInitialTextAfterPasting = AutoNumericHelper.convertCharacterCountToIndexPosition(AutoNumericHelper.countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, this.settings.decimalCharacter));
    if (isPasteNegativeAndInitialValueIsPositive) {
      caretPositionOnInitialTextAfterPasting++;
    }
    let leftPart = result.slice(0, caretPositionOnInitialTextAfterPasting);
    let rightPart = result.slice(caretPositionOnInitialTextAfterPasting, result.length);
    let leftPartContainedADot = false;
    if (pastedText === ".") {
      if (AutoNumericHelper.contains(leftPart, ".")) {
        leftPartContainedADot = true;
        leftPart = leftPart.replace(".", "");
      }
      rightPart = rightPart.replace(".", "");
    }
    let negativePasteOnNegativeNumber = false;
    if (leftPart === "" && rightPart === "-") {
      leftPart = "-";
      rightPart = "";
      negativePasteOnNegativeNumber = true;
    }
    switch (this.settings.onInvalidPaste) {
      case _AutoNumeric.options.onInvalidPaste.truncate:
      case _AutoNumeric.options.onInvalidPaste.replace:
        const minParse = AutoNumericHelper.parseStr(this.settings.minimumValue);
        const maxParse = AutoNumericHelper.parseStr(this.settings.maximumValue);
        let lastGoodKnownResult = result;
        let pastedTextIndex = 0;
        let modifiedLeftPart = leftPart;
        while (pastedTextIndex < pastedText.length) {
          modifiedLeftPart += pastedText[pastedTextIndex];
          result = modifiedLeftPart + rightPart;
          if (!this.constructor._checkIfInRange(result, minParse, maxParse)) {
            break;
          }
          lastGoodKnownResult = result;
          pastedTextIndex++;
        }
        caretPositionOnInitialTextAfterPasting += pastedTextIndex;
        if (negativePasteOnNegativeNumber) caretPositionOnInitialTextAfterPasting++;
        if (this.settings.onInvalidPaste === _AutoNumeric.options.onInvalidPaste.truncate) {
          result = lastGoodKnownResult;
          if (leftPartContainedADot) {
            caretPositionOnInitialTextAfterPasting--;
          }
          break;
        }
        let lastGoodKnownResultIndex = caretPositionOnInitialTextAfterPasting;
        const lastGoodKnownResultSize = lastGoodKnownResult.length;
        while (pastedTextIndex < pastedText.length && lastGoodKnownResultIndex < lastGoodKnownResultSize) {
          if (lastGoodKnownResult[lastGoodKnownResultIndex] === ".") {
            lastGoodKnownResultIndex++;
            continue;
          }
          result = AutoNumericHelper.replaceCharAt(lastGoodKnownResult, lastGoodKnownResultIndex, pastedText[pastedTextIndex]);
          if (!this.constructor._checkIfInRange(result, minParse, maxParse)) {
            break;
          }
          lastGoodKnownResult = result;
          pastedTextIndex++;
          lastGoodKnownResultIndex++;
        }
        caretPositionOnInitialTextAfterPasting = lastGoodKnownResultIndex;
        if (leftPartContainedADot) {
          caretPositionOnInitialTextAfterPasting--;
        }
        result = lastGoodKnownResult;
        break;
      case _AutoNumeric.options.onInvalidPaste.error:
      case _AutoNumeric.options.onInvalidPaste.ignore:
      case _AutoNumeric.options.onInvalidPaste.clamp:
      default:
        result = `${leftPart}${pastedText}${rightPart}`;
        if (selectionStart === selectionEnd) {
          const indexWherePastedTextHasBeenInserted = AutoNumericHelper.convertCharacterCountToIndexPosition(AutoNumericHelper.countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, this.settings.decimalCharacter));
          caretPositionOnInitialTextAfterPasting = indexWherePastedTextHasBeenInserted + pastedText.length;
        } else if (rightPart === "") {
          caretPositionOnInitialTextAfterPasting = AutoNumericHelper.convertCharacterCountToIndexPosition(AutoNumericHelper.countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionStart, this.settings.decimalCharacter)) + pastedText.length;
          if (negativePasteOnNegativeNumber) caretPositionOnInitialTextAfterPasting++;
        } else {
          const indexSelectionEndInRawValue = AutoNumericHelper.convertCharacterCountToIndexPosition(AutoNumericHelper.countNumberCharactersOnTheCaretLeftSide(initialFormattedValue, selectionEnd, this.settings.decimalCharacter));
          const selectedText = AutoNumericHelper.getElementValue(eventTarget).slice(selectionStart, selectionEnd);
          caretPositionOnInitialTextAfterPasting = indexSelectionEndInRawValue - selectionSize + AutoNumericHelper.countCharInText(this.settings.digitGroupSeparator, selectedText) + pastedText.length;
        }
        if (isPasteNegativeAndInitialValueIsPositive) {
          caretPositionOnInitialTextAfterPasting++;
        }
        if (leftPartContainedADot) {
          caretPositionOnInitialTextAfterPasting--;
        }
    }
    if (!AutoNumericHelper.isNumber(result) || result === "") {
      if (this.settings.onInvalidPaste === _AutoNumeric.options.onInvalidPaste.error) {
        AutoNumericHelper.throwError(`The pasted value '${rawPastedText}' would result into an invalid content '${result}'.`);
      }
      return;
    }
    let valueHasBeenSet = false;
    let valueHasBeenClamped = false;
    try {
      this.set(result);
      valueHasBeenSet = true;
    } catch (error) {
      let clampedValue;
      switch (this.settings.onInvalidPaste) {
        case _AutoNumeric.options.onInvalidPaste.clamp:
          clampedValue = AutoNumericHelper.clampToRangeLimits(result, this.settings);
          try {
            this.set(clampedValue);
          } catch (error2) {
            AutoNumericHelper.throwError(`Fatal error: Unable to set the clamped value '${clampedValue}'.`);
          }
          valueHasBeenClamped = true;
          valueHasBeenSet = true;
          result = clampedValue;
          break;
        case _AutoNumeric.options.onInvalidPaste.error:
        case _AutoNumeric.options.onInvalidPaste.truncate:
        case _AutoNumeric.options.onInvalidPaste.replace:
          AutoNumericHelper.throwError(`The pasted value '${rawPastedText}' results in a value '${result}' that is outside of the minimum [${this.settings.minimumValue}] and maximum [${this.settings.maximumValue}] value range.`);
        case _AutoNumeric.options.onInvalidPaste.ignore:
        default:
          return;
      }
    }
    const targetValue = AutoNumericHelper.getElementValue(eventTarget);
    let caretPositionInFormattedNumber;
    if (valueHasBeenSet) {
      switch (this.settings.onInvalidPaste) {
        case _AutoNumeric.options.onInvalidPaste.clamp:
          if (valueHasBeenClamped) {
            if (this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.suffix) {
              AutoNumericHelper.setElementSelection(eventTarget, targetValue.length - this.settings.currencySymbol.length);
            } else {
              AutoNumericHelper.setElementSelection(eventTarget, targetValue.length);
            }
            break;
          }
        case _AutoNumeric.options.onInvalidPaste.error:
        case _AutoNumeric.options.onInvalidPaste.ignore:
        case _AutoNumeric.options.onInvalidPaste.truncate:
        case _AutoNumeric.options.onInvalidPaste.replace:
        default:
          caretPositionInFormattedNumber = AutoNumericHelper.findCaretPositionInFormattedNumber(result, caretPositionOnInitialTextAfterPasting, targetValue, this.settings.decimalCharacter);
          AutoNumericHelper.setElementSelection(eventTarget, caretPositionInFormattedNumber);
      }
    }
    if (valueHasBeenSet && initialFormattedValue !== targetValue) {
      this._triggerEvent(_AutoNumeric.events.native.input, eventTarget);
    }
  }
  /**
   * When focusing out of the input, we check if the value has changed, and if it has, then we send a `change` event (since the native one would have been prevented by `e.preventDefault()` called in the other event listeners).
   * We also update the info of the focused state in the `this.isFocused` variable.
   *
   * @param {Event} e
   */
  _onBlur(e) {
    this.isFocused = false;
    this.isEditing = false;
    if (AutoNumericHelper.trimPaddedZerosFromDecimalPlaces(this.rawValue) !== AutoNumericHelper.trimPaddedZerosFromDecimalPlaces(this.rawValueOnFocus)) {
      this._triggerEvent(_AutoNumeric.events.native.change, e.target);
    }
    this.rawValueOnFocus = void 0;
  }
  /**
   * Helper function that DRY the similar behaviors of the mousewheel and up/down arrow keys, which increment/decrement the element value, either by a fixed value, or using the 'progressive' heuristic
   *
   * @param {WheelEvent|KeyboardEvent} e The `wheel` or keyboard event
   * @param {boolean} isUp Defines if the event should increment the value
   * @param {boolean} isDown Defines if the event should decrement the value
   * @param {string|number} step The step to be applied to the increment/decrement action
   * @private
   */
  _wheelAndUpDownActions(e, isUp, isDown, step) {
    const selectionStart = e.target.selectionStart || 0;
    const selectionEnd = e.target.selectionEnd || 0;
    const currentUnformattedValue = this.rawValue;
    let result;
    if (AutoNumericHelper.isUndefinedOrNullOrEmpty(currentUnformattedValue)) {
      if (this.settings.minimumValue > 0 || this.settings.maximumValue < 0) {
        if (isUp) {
          result = this.settings.minimumValue;
        } else {
          result = this.settings.maximumValue;
        }
      } else {
        result = 0;
      }
    } else {
      result = currentUnformattedValue;
    }
    result = +result;
    if (AutoNumericHelper.isNumber(step)) {
      const stepToUse = +step;
      if (isUp) {
        result += stepToUse;
      } else if (isDown) {
        result -= stepToUse;
      }
    } else {
      if (isUp) {
        result = AutoNumericHelper.addAndRoundToNearestAuto(result, this.settings.decimalPlacesRawValue);
      } else if (isDown) {
        result = AutoNumericHelper.subtractAndRoundToNearestAuto(result, this.settings.decimalPlacesRawValue);
      }
    }
    result = AutoNumericHelper.clampToRangeLimits(result, this.settings);
    if (result !== +currentUnformattedValue) {
      this.set(result);
      this._triggerEvent(_AutoNumeric.events.native.input, e.target);
    }
    e.preventDefault();
    this._setSelection(selectionStart, selectionEnd);
  }
  /**
   * Handler for up and down arrow keys
   * Increment or decrement the element value according to the `upDownStep` option chosen
   *
   * @param {KeyboardEvent} e
   */
  upDownArrowAction(e) {
    if (this.formulaMode || this.settings.readOnly || this.domElement.readOnly || this.domElement.disabled) {
      return;
    }
    let isUp = false;
    let isDown = false;
    if (this.eventKey === AutoNumericEnum.keyName.UpArrow) {
      isUp = true;
    } else if (this.eventKey === AutoNumericEnum.keyName.DownArrow) {
      isDown = true;
    } else {
      AutoNumericHelper.throwError("Something has gone wrong since neither an Up or Down arrow key is detected, but the function was still called!");
    }
    this._wheelAndUpDownActions(e, isUp, isDown, this.settings.upDownStep);
  }
  /**
   * Handler for 'wheel' event
   *
   * @param {WheelEvent} e
   */
  _onWheel(e) {
    if (this.formulaMode) {
      return;
    }
    if (this.settings.readOnly || this.domElement.readOnly || this.domElement.disabled) {
      return;
    }
    if (this.settings.modifyValueOnWheel) {
      if (this.settings.wheelOn === _AutoNumeric.options.wheelOn.focus) {
        if (this.isFocused) {
          if (!e.shiftKey) {
            this.wheelAction(e);
          }
        } else if (e.shiftKey) {
          this.wheelAction(e);
        }
      } else if (this.settings.wheelOn === _AutoNumeric.options.wheelOn.hover) {
        if (!e.shiftKey) {
          this.wheelAction(e);
        } else {
          e.preventDefault();
          window.scrollBy(0, AutoNumericHelper.isNegativeStrict(String(e.deltaY)) ? -50 : 50);
        }
      } else {
        AutoNumericHelper.throwError("Unknown `wheelOn` option.");
      }
    }
  }
  /**
   * Increment or decrement the element value according to the `wheelStep` option chosen
   *
   * @param {WheelEvent} e The `wheel` event
   */
  wheelAction(e) {
    this.isWheelEvent = true;
    let isUp = false;
    let isDown = false;
    let isDeltaYZero = false;
    if (AutoNumericHelper.isWheelUpEvent(e)) {
      isUp = true;
    } else if (AutoNumericHelper.isWheelDownEvent(e)) {
      isDown = true;
    } else if (AutoNumericHelper.isWheelEventWithZeroDeltaY(e)) {
      isDeltaYZero = true;
    } else {
      AutoNumericHelper.throwError(`The event is not a 'wheel' event.`);
    }
    if (!isDeltaYZero) {
      this._wheelAndUpDownActions(e, isUp, isDown, this.settings.wheelStep);
    }
    this.isWheelEvent = false;
  }
  /**
   * Handler for 'drop' event
   *
   * @param {DragEvent} e
   */
  _onDrop(e) {
    if (this.formulaMode) {
      return;
    }
    this.isDropEvent = true;
    e.preventDefault();
    const droppedText = e.dataTransfer.getData("text/plain");
    const cleanedValue = this.unformatOther(droppedText);
    const previousValue = this.rawValue;
    this.set(cleanedValue);
    this.isDropEvent = false;
    const newValue = this.constructor._toNumericValue(cleanedValue, this.settings);
    if (!isNaN(Number(newValue))) {
      if (AutoNumericHelper.trimPaddedZerosFromDecimalPlaces(previousValue) !== AutoNumericHelper.trimPaddedZerosFromDecimalPlaces(newValue)) {
        this._triggerEvent(_AutoNumeric.events.native.change, this.domElement);
      }
    }
  }
  /**
   * Handler for 'submit' events happening on the parent <form> element.
   * If `unformatOnSubmit` is set to `true`, the element value is first unformatted before the form is submitted.
   *
   * @returns {boolean}
   */
  _onFormSubmit() {
    const inputElements = this._getFormAutoNumericChildren(this.parentForm);
    const aNElements = inputElements.map((aNElement) => this.constructor.getAutoNumericElement(aNElement));
    aNElements.forEach((aNElement) => aNElement._unformatOnSubmit());
    return true;
  }
  /**
   * Handler for 'reset' events caught on the parent <form> element.
   * When such event is detected, then every child AutoNumeric elements must format their default value that the browser is forcing upon them.
   *
   * @private
   */
  _onFormReset() {
    const inputElements = this._getFormAutoNumericChildren(this.parentForm);
    const aNElements = inputElements.map((aNElement) => this.constructor.getAutoNumericElement(aNElement));
    aNElements.forEach((aNElement) => {
      const val = this._getDefaultValue(aNElement.node());
      setTimeout(() => aNElement.set(val), 0);
    });
  }
  /**
   * Unformat the element value according to the `unformatOnSubmit` option
   *
   * @private
   */
  _unformatOnSubmit() {
    if (this.settings.unformatOnSubmit) {
      this._setElementValue(this.rawValue);
    }
  }
  /**
   * Listen for the `alt` key keydown event globally, and if the event is caught, unformat the AutoNumeric element that is hovered by the mouse.
   *
   * @param {KeyboardEvent} e
   * @private
   */
  _onKeydownGlobal(e) {
    if (AutoNumericHelper.character(e) === AutoNumericEnum.keyName.Alt) {
      const hoveredElement = AutoNumericHelper.getHoveredElement();
      if (_AutoNumeric.isManagedByAutoNumeric(hoveredElement)) {
        const anElement = _AutoNumeric.getAutoNumericElement(hoveredElement);
        if (!anElement.formulaMode && anElement.settings.unformatOnHover) {
          this.constructor._unformatAltHovered(anElement);
        }
      }
    }
  }
  /**
   * Listen for the `alt` key keyup event globally, and if the event is caught, reformat the AutoNumeric element that is hovered by the mouse.
   *
   * @param {KeyboardEvent} e
   * @private
   */
  _onKeyupGlobal(e) {
    if (AutoNumericHelper.character(e) === AutoNumericEnum.keyName.Alt) {
      const hoveredElement = AutoNumericHelper.getHoveredElement();
      if (_AutoNumeric.isManagedByAutoNumeric(hoveredElement)) {
        const anElement = _AutoNumeric.getAutoNumericElement(hoveredElement);
        if (anElement.formulaMode || !anElement.settings.unformatOnHover) {
          return;
        }
        this.constructor._reformatAltHovered(anElement);
      }
    }
  }
  /**
   * Return `true` if the DOM element is supported by autoNumeric.
   * A supported element is an element whitelisted in the `allowedTagList`.
   *
   * @returns {boolean}
   * @private
   */
  _isElementTagSupported() {
    if (!AutoNumericHelper.isElement(this.domElement)) {
      AutoNumericHelper.throwError(`The DOM element is not valid, ${this.domElement} given.`);
    }
    return AutoNumericHelper.isInArray(this.domElement.tagName.toLowerCase(), this.allowedTagList);
  }
  /**
   * Return `true` in the DOM element is an <input>.
   *
   * @returns {boolean}
   * @private
   */
  _isInputElement() {
    return this.domElement.tagName.toLowerCase() === "input";
  }
  /**
   * Return `true` if the input type is supported by AutoNumeric
   *
   * @returns {boolean}
   * @throws
   */
  _isInputTypeSupported() {
    return this.domElement.type === "text" || this.domElement.type === "hidden" || this.domElement.type === "tel" || AutoNumericHelper.isUndefinedOrNullOrEmpty(this.domElement.type);
  }
  /**
   * Check if the DOM element is supported by autoNumeric.
   * A supported element is either an <input> element with the correct 'type' attribute, or a tag whitelisted in the `allowedTagList` array.
   * If the check fails, this method throws.
   * This function also sets the info `this.isInputElement` which keep tracks if the DOM element is an <input> or not, and the `this.isContentEditable` if the element has the `contenteditable` attribute set to `true` initially.
   *
   * @throws
   * @private
   */
  _checkElement() {
    const currentElementTag = this.domElement.tagName.toLowerCase();
    if (!this._isElementTagSupported()) {
      AutoNumericHelper.throwError(`The <${currentElementTag}> tag is not supported by autoNumeric`);
    }
    if (this._isInputElement()) {
      if (!this._isInputTypeSupported()) {
        AutoNumericHelper.throwError(`The input type "${this.domElement.type}" is not supported by autoNumeric`);
      }
      this.isInputElement = true;
    } else {
      this.isInputElement = false;
      this.isContentEditable = this._isContentEditable(this.domElement);
    }
  }
  /**
   * Returns `true` if the given DOM element is a contenteditable one (set to `true`)
   *
   * @param {HTMLElement} domElement
   * @returns {boolean}
   */
  _isContentEditable(domElement) {
    return domElement.hasAttribute("contenteditable") && domElement.getAttribute("contenteditable") === "true";
  }
  /**
   * Formats the default value on page load.
   * This is called only if the `formatOnPageLoad` option is set to `true`.
   *
   * @param {number|string|null} forcedInitialValue The value that should be used for initialization, in place on the eventual html one
   */
  _formatDefaultValueOnPageLoad(forcedInitialValue = null) {
    let setValue = true;
    let currentValue;
    if (!AutoNumericHelper.isNull(forcedInitialValue)) {
      currentValue = forcedInitialValue;
    } else {
      currentValue = AutoNumericHelper.getElementValue(this.domElement).trim();
      this.domElement.setAttribute("value", currentValue);
    }
    if (this.isInputElement || this.isContentEditable) {
      const unLocalizedCurrentValue = this.constructor._toNumericValue(currentValue, this.settings);
      if (!this.domElement.hasAttribute("value") || this.domElement.getAttribute("value") === "") {
        if (!isNaN(Number(unLocalizedCurrentValue)) && Infinity !== unLocalizedCurrentValue) {
          this.set(unLocalizedCurrentValue);
          setValue = false;
        } else {
          AutoNumericHelper.throwError(`The value [${currentValue}] used in the input is not a valid value autoNumeric can work with.`);
        }
      } else {
        if (this.settings.defaultValueOverride !== null && this.settings.defaultValueOverride.toString() !== currentValue || this.settings.defaultValueOverride === null && currentValue !== "" && currentValue !== this.domElement.getAttribute("value") || currentValue !== "" && this.domElement.getAttribute("type") === "hidden" && !AutoNumericHelper.isNumber(unLocalizedCurrentValue)) {
          if (this.settings.saveValueToSessionStorage && (this.settings.decimalPlacesShownOnFocus !== null || this.settings.divisorWhenUnfocused)) {
            this._setRawValue(this._getValueFromPersistentStorage());
          }
          if (!this.settings.saveValueToSessionStorage) {
            const toStrip = this.constructor._removeBrackets(currentValue, this.settings);
            if ((this.settings.negativePositiveSignPlacement === _AutoNumeric.options.negativePositiveSignPlacement.suffix || this.settings.negativePositiveSignPlacement !== _AutoNumeric.options.negativePositiveSignPlacement.prefix && this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.suffix) && this.settings.negativeSignCharacter !== "" && AutoNumericHelper.isNegative(currentValue, this.settings.negativeSignCharacter)) {
              this._setRawValue(`-${this.constructor._stripAllNonNumberCharacters(toStrip, this.settings, true, this.isFocused)}`);
            } else {
              this._setRawValue(this.constructor._stripAllNonNumberCharacters(toStrip, this.settings, true, this.isFocused));
            }
          }
          setValue = false;
        }
      }
      if (currentValue === "") {
        switch (this.settings.emptyInputBehavior) {
          case _AutoNumeric.options.emptyInputBehavior.focus:
          case _AutoNumeric.options.emptyInputBehavior.press:
            break;
          case _AutoNumeric.options.emptyInputBehavior.always:
            this._setElementValue(this.settings.currencySymbol);
            break;
          case _AutoNumeric.options.emptyInputBehavior.min:
            this.set(this.settings.minimumValue);
            break;
          case _AutoNumeric.options.emptyInputBehavior.max:
            this.set(this.settings.maximumValue);
            break;
          case _AutoNumeric.options.emptyInputBehavior.zero:
            this.set("0");
            break;
          case _AutoNumeric.options.emptyInputBehavior.null:
            this.set(null);
            break;
          default:
            this.set(this.settings.emptyInputBehavior);
        }
      } else if (setValue && currentValue === this.domElement.getAttribute("value")) {
        this.set(currentValue);
      }
    } else if (this.settings.defaultValueOverride === null || this.settings.defaultValueOverride === currentValue) {
      this.set(currentValue);
    }
  }
  /**
   * Enhance the user experience by modifying the default `negativePositiveSignPlacement` option depending on `currencySymbol` and `currencySymbolPlacement`.
   *
   * If the user has not set the placement of the negative sign (`negativePositiveSignPlacement`), but has set a currency symbol (`currencySymbol`),
   * then we modify the default value of `negativePositiveSignPlacement` in order to keep the resulting output logical by default :
   * - "$-1,234.56" instead of "-$1,234.56" ({currencySymbol: "$", negativePositiveSignPlacement: "r"})
   * - "-1,234.56$" instead of "1,234.56-$" ({currencySymbol: "$", currencySymbolPlacement: "s", negativePositiveSignPlacement: "p"})
   *
   * @param {object} settings
   */
  static _correctNegativePositiveSignPlacementOption(settings) {
    if (!AutoNumericHelper.isNull(settings.negativePositiveSignPlacement)) {
      return;
    }
    if (!AutoNumericHelper.isUndefined(settings) && AutoNumericHelper.isUndefinedOrNullOrEmpty(settings.negativePositiveSignPlacement) && !AutoNumericHelper.isUndefinedOrNullOrEmpty(settings.currencySymbol)) {
      switch (settings.currencySymbolPlacement) {
        case _AutoNumeric.options.currencySymbolPlacement.suffix:
          settings.negativePositiveSignPlacement = _AutoNumeric.options.negativePositiveSignPlacement.prefix;
          break;
        case _AutoNumeric.options.currencySymbolPlacement.prefix:
          settings.negativePositiveSignPlacement = _AutoNumeric.options.negativePositiveSignPlacement.left;
          break;
      }
    } else {
      settings.negativePositiveSignPlacement = _AutoNumeric.options.negativePositiveSignPlacement.left;
    }
  }
  /**
   * Correct the `caretPositionOnFocus` and `selectOnFocus` options, since setting both leads to a conflict.
   * This method directly modifies the `options` object passed as a parameter, then returns it.
   * It returns `null` if the given option is `null`.
   *
   * @param {object} options The options passed as an argument by the user
   * @returns {object|null}
   * @private
   */
  static _correctCaretPositionOnFocusAndSelectOnFocusOptions(options) {
    if (AutoNumericHelper.isNull(options)) {
      return null;
    }
    if (!AutoNumericHelper.isUndefinedOrNullOrEmpty(options.caretPositionOnFocus) && AutoNumericHelper.isUndefinedOrNullOrEmpty(options.selectOnFocus)) {
      options.selectOnFocus = _AutoNumeric.options.selectOnFocus.doNotSelect;
    }
    if (AutoNumericHelper.isUndefinedOrNullOrEmpty(options.caretPositionOnFocus) && !AutoNumericHelper.isUndefinedOrNullOrEmpty(options.selectOnFocus) && options.selectOnFocus === _AutoNumeric.options.selectOnFocus.select) {
      options.caretPositionOnFocus = _AutoNumeric.options.caretPositionOnFocus.doNoForceCaretPosition;
    }
    return options;
  }
  /**
   * Calculate the number de decimal places to be used by the AutoNumeric object, for each of its state, and for its formatted and raw value.
   * By default, the `rawValue` precision is the same as the formatted value one.
   *
   * This method is called during the AutoNumeric object initialization. This assumes some internal variable state.
   *
   * This method set the following options accordingly to their own value and the mandatory `decimalPlaces` option:
   * - decimalPlacesRawValue     (nullable)
   * - decimalPlacesShownOnBlur  (nullable)
   * - decimalPlacesShownOnFocus (nullable)
   *
   * Note: the `decimalPlaces` option is only used here and only serve to define those three previous options value.
   * AutoNumeric will then *only* use `decimalPlacesRawValue`, `decimalPlacesShownOnBlur` and `decimalPlacesShownOnFocus` from there.
   *
   * This method directly modifies the `settings` object passed as a parameter.
   *
   * @param {object} settings This is an object with the new settings to use.
   * @private
   */
  static _calculateDecimalPlacesOnInit(settings) {
    this._validateDecimalPlacesRawValue(settings);
    if (settings.decimalPlacesShownOnFocus === _AutoNumeric.options.decimalPlacesShownOnFocus.useDefault) {
      settings.decimalPlacesShownOnFocus = settings.decimalPlaces;
    }
    if (settings.decimalPlacesShownOnBlur === _AutoNumeric.options.decimalPlacesShownOnBlur.useDefault) {
      settings.decimalPlacesShownOnBlur = settings.decimalPlaces;
    }
    if (settings.decimalPlacesRawValue === _AutoNumeric.options.decimalPlacesRawValue.useDefault) {
      settings.decimalPlacesRawValue = settings.decimalPlaces;
    }
    let additionalDecimalPlacesRawValue = 0;
    if (settings.rawValueDivisor && settings.rawValueDivisor !== _AutoNumeric.options.rawValueDivisor.none) {
      additionalDecimalPlacesRawValue = String(settings.rawValueDivisor).length - 1;
      if (additionalDecimalPlacesRawValue < 0) {
        additionalDecimalPlacesRawValue = 0;
      }
    }
    settings.decimalPlacesRawValue = Math.max(
      Math.max(settings.decimalPlacesShownOnBlur, settings.decimalPlacesShownOnFocus) + additionalDecimalPlacesRawValue,
      Number(settings.originalDecimalPlacesRawValue) + additionalDecimalPlacesRawValue
    );
  }
  /**
   * Recalculate the number de decimal places to be used by the AutoNumeric object, for each of its state, and for its formatted and raw value.
   * By default, the `rawValue` precision is the same as the formatted value one.
   *
   * This method is close to the one called during initialization, `_calculateDecimalPlacesOnInit()`, but with slight difference so that the `decimalPlaces*` options are correctly updated as needed.
   *
   * This methods set the following options accordingly to their own value and the mandatory `decimalPlaces` option:
   * - decimalPlacesRawValue     (nullable)
   * - decimalPlacesShownOnBlur  (nullable)
   * - decimalPlacesShownOnFocus (nullable)
   *
   * Note: the `decimalPlaces` option is only used here and only serve to define those three previous options value.
   * AutoNumeric will then *only* use `decimalPlacesRawValue`, `decimalPlacesShownOnBlur` and `decimalPlacesShownOnFocus` from there.
   *
   * This methods directly modifies the `settings` object passed as a parameter.
   *
   * @param {object} settings This is an object with the new settings to use.
   * @param {object} currentSettings This is the current settings (`this.settings`) used by the element.
   * @private
   */
  static _calculateDecimalPlacesOnUpdate(settings, currentSettings = null) {
    this._validateDecimalPlacesRawValue(settings);
    if (AutoNumericHelper.isNull(currentSettings)) {
      AutoNumericHelper.throwError(`When updating the settings, the previous ones should be passed as an argument.`);
    }
    const decimalPlacesInOptions = "decimalPlaces" in settings;
    if (!(decimalPlacesInOptions || "decimalPlacesRawValue" in settings || "decimalPlacesShownOnFocus" in settings || "decimalPlacesShownOnBlur" in settings || "rawValueDivisor" in settings)) {
      return;
    }
    if (decimalPlacesInOptions) {
      if (!("decimalPlacesShownOnFocus" in settings) || settings.decimalPlacesShownOnFocus === _AutoNumeric.options.decimalPlacesShownOnFocus.useDefault) {
        settings.decimalPlacesShownOnFocus = settings.decimalPlaces;
      }
      if (!("decimalPlacesShownOnBlur" in settings) || settings.decimalPlacesShownOnBlur === _AutoNumeric.options.decimalPlacesShownOnBlur.useDefault) {
        settings.decimalPlacesShownOnBlur = settings.decimalPlaces;
      }
      if (!("decimalPlacesRawValue" in settings) || settings.decimalPlacesRawValue === _AutoNumeric.options.decimalPlacesRawValue.useDefault) {
        settings.decimalPlacesRawValue = settings.decimalPlaces;
      }
    } else {
      if (AutoNumericHelper.isUndefined(settings.decimalPlacesShownOnFocus)) {
        settings.decimalPlacesShownOnFocus = currentSettings.decimalPlacesShownOnFocus;
      }
      if (AutoNumericHelper.isUndefined(settings.decimalPlacesShownOnBlur)) {
        settings.decimalPlacesShownOnBlur = currentSettings.decimalPlacesShownOnBlur;
      }
    }
    let additionalDecimalPlacesRawValue = 0;
    if (settings.rawValueDivisor && settings.rawValueDivisor !== _AutoNumeric.options.rawValueDivisor.none) {
      additionalDecimalPlacesRawValue = String(settings.rawValueDivisor).length - 1;
      if (additionalDecimalPlacesRawValue < 0) {
        additionalDecimalPlacesRawValue = 0;
      }
    }
    if (!settings.decimalPlaces && !settings.decimalPlacesRawValue) {
      settings.decimalPlacesRawValue = Math.max(
        Math.max(settings.decimalPlacesShownOnBlur, settings.decimalPlacesShownOnFocus) + additionalDecimalPlacesRawValue,
        Number(currentSettings.originalDecimalPlacesRawValue) + additionalDecimalPlacesRawValue
      );
    } else {
      settings.decimalPlacesRawValue = Math.max(
        Math.max(settings.decimalPlacesShownOnBlur, settings.decimalPlacesShownOnFocus) + additionalDecimalPlacesRawValue,
        Number(settings.decimalPlacesRawValue) + additionalDecimalPlacesRawValue
      );
    }
  }
  /**
   * Analyze and save the minimumValue and maximumValue integer size for later uses
   * @private
   */
  _calculateVMinAndVMaxIntegerSizes() {
    let [maximumValueIntegerPart] = this.settings.maximumValue.toString().split(".");
    let [minimumValueIntegerPart] = !this.settings.minimumValue && this.settings.minimumValue !== 0 ? [] : this.settings.minimumValue.toString().split(".");
    maximumValueIntegerPart = maximumValueIntegerPart.replace(this.settings.negativeSignCharacter, "");
    minimumValueIntegerPart = minimumValueIntegerPart.replace(this.settings.negativeSignCharacter, "");
    this.settings.mIntPos = Math.max(maximumValueIntegerPart.length, 1);
    this.settings.mIntNeg = Math.max(minimumValueIntegerPart.length, 1);
  }
  /**
   * Calculate once what are the `valuesToStrings` option keys.
   * @private
   */
  _calculateValuesToStringsKeys() {
    if (this.settings.valuesToStrings) {
      this.valuesToStringsKeys = Object.keys(this.settings.valuesToStrings);
    } else {
      this.valuesToStringsKeys = [];
    }
  }
  /**
   * Caches regular expressions for _stripAllNonNumberCharactersExceptCustomDecimalChar
   *
   * @param {object} settings
   * @param {object} regex
   */
  static _cachesUsualRegularExpressions(settings, regex) {
    let negativeSignReg;
    if (settings.negativeSignCharacter !== _AutoNumeric.options.negativeSignCharacter.hyphen) {
      negativeSignReg = `([-\\${settings.negativeSignCharacter}]?)`;
    } else {
      negativeSignReg = "(-?)";
    }
    regex.aNegRegAutoStrip = negativeSignReg;
    settings.allowedAutoStrip = new RegExp(`[^-0123456789\\${settings.decimalCharacter}]`, "g");
    settings.numRegAutoStrip = new RegExp(`${negativeSignReg}(?:\\${settings.decimalCharacter}?([0-9]+\\${settings.decimalCharacter}[0-9]+)|([0-9]*(?:\\${settings.decimalCharacter}[0-9]*)?))`);
    settings.stripReg = new RegExp(`^${regex.aNegRegAutoStrip}0*([0-9])`);
    settings.formulaChars = new RegExp(`[0-9${settings.decimalCharacter}+\\-*/() ]`);
  }
  /**
   * Modify the user settings to make them 'exploitable' later.
   */
  _transformOptionsValuesToDefaultTypes() {
    for (const key in this.settings) {
      if (Object.prototype.hasOwnProperty.call(this.settings, key)) {
        const value = this.settings[key];
        if (value === "true" || value === "false") {
          this.settings[key] = value === "true";
        }
        if (typeof value === "number") {
          this.settings[key] = value.toString();
        }
      }
    }
  }
  /**
   * Convert the old settings options name to new ones.
   *
   * @param {object} options
   */
  static _convertOldOptionsToNewOnes(options) {
    const oldOptionsConverter = {
      // Old option names, with their corresponding new names
      aSep: "digitGroupSeparator",
      nSep: "showOnlyNumbersOnFocus",
      dGroup: "digitalGroupSpacing",
      aDec: "decimalCharacter",
      altDec: "decimalCharacterAlternative",
      aSign: "currencySymbol",
      pSign: "currencySymbolPlacement",
      pNeg: "negativePositiveSignPlacement",
      aSuffix: "suffixText",
      oLimits: "overrideMinMaxLimits",
      vMax: "maximumValue",
      vMin: "minimumValue",
      mDec: "decimalPlacesOverride",
      eDec: "decimalPlacesShownOnFocus",
      scaleDecimal: "decimalPlacesShownOnBlur",
      aStor: "saveValueToSessionStorage",
      mRound: "roundingMethod",
      aPad: "allowDecimalPadding",
      nBracket: "negativeBracketsTypeOnBlur",
      wEmpty: "emptyInputBehavior",
      lZero: "leadingZero",
      aForm: "formatOnPageLoad",
      sNumber: "selectNumberOnly",
      anDefault: "defaultValueOverride",
      unSetOnSubmit: "unformatOnSubmit",
      outputType: "outputFormat",
      debug: "showWarnings",
      // Current options :
      allowDecimalPadding: true,
      alwaysAllowDecimalCharacter: true,
      caretPositionOnFocus: true,
      createLocalList: true,
      currencySymbol: true,
      currencySymbolPlacement: true,
      decimalCharacter: true,
      decimalCharacterAlternative: true,
      decimalPlaces: true,
      decimalPlacesRawValue: true,
      decimalPlacesShownOnBlur: true,
      decimalPlacesShownOnFocus: true,
      defaultValueOverride: true,
      digitalGroupSpacing: true,
      digitGroupSeparator: true,
      divisorWhenUnfocused: true,
      emptyInputBehavior: true,
      eventBubbles: true,
      eventIsCancelable: true,
      failOnUnknownOption: true,
      formatOnPageLoad: true,
      formulaMode: true,
      historySize: true,
      isCancellable: true,
      leadingZero: true,
      maximumValue: true,
      minimumValue: true,
      modifyValueOnUpDownArrow: true,
      modifyValueOnWheel: true,
      negativeBracketsTypeOnBlur: true,
      negativePositiveSignPlacement: true,
      negativeSignCharacter: true,
      negativePositiveSignBehavior: true,
      noEventListeners: true,
      onInvalidPaste: true,
      outputFormat: true,
      overrideMinMaxLimits: true,
      positiveSignCharacter: true,
      rawValueDivisor: true,
      readOnly: true,
      roundingMethod: true,
      saveValueToSessionStorage: true,
      selectNumberOnly: true,
      selectOnFocus: true,
      serializeSpaces: true,
      showOnlyNumbersOnFocus: true,
      showPositiveSign: true,
      showWarnings: true,
      styleRules: true,
      suffixText: true,
      symbolWhenUnfocused: true,
      upDownStep: true,
      unformatOnHover: true,
      unformatOnSubmit: true,
      valuesToStrings: true,
      watchExternalChanges: true,
      wheelOn: true,
      wheelStep: true,
      // Additional information that are added to the `settings` object :
      //TODO Find a way to exclude those internal data from the settings object (ideally by using another object, or better yet, class attributes) -->
      allowedAutoStrip: true,
      formulaChars: true,
      isNegativeSignAllowed: true,
      isPositiveSignAllowed: true,
      mIntNeg: true,
      mIntPos: true,
      numRegAutoStrip: true,
      originalDecimalPlaces: true,
      originalDecimalPlacesRawValue: true,
      stripReg: true
    };
    for (const option in options) {
      if (Object.prototype.hasOwnProperty.call(options, option)) {
        if (oldOptionsConverter[option] === true) {
          continue;
        }
        if (Object.prototype.hasOwnProperty.call(oldOptionsConverter, option)) {
          AutoNumericHelper.warning(`You are using the deprecated option name '${option}'. Please use '${oldOptionsConverter[option]}' instead from now on. The old option name will be dropped very soon™.`, true);
          options[oldOptionsConverter[option]] = options[option];
          delete options[option];
        } else if (options.failOnUnknownOption) {
          AutoNumericHelper.throwError(`Option name '${option}' is unknown. Please fix the options passed to autoNumeric`);
        }
      }
    }
    if ("mDec" in options) {
      AutoNumericHelper.warning("The old `mDec` option has been deprecated in favor of more accurate options ; `decimalPlaces`, `decimalPlacesRawValue`, `decimalPlacesShownOnFocus` and `decimalPlacesShownOnBlur`.", true);
    }
  }
  /**
   * Analyse the settings/options passed by the user, validate and clean them, then set them into `this.settings`.
   * Note: This sets the settings to `null` if somehow the settings objet is undefined or empty
   *       If only `decimalPlaces` is defined in the option, overwrite the other decimalPlaces* options, otherwise, use those options
   *
   * @param {object} options
   * @param {boolean} update - If set to `true`, then the settings already exists and this function only updates them instead of recreating them from scratch
   * @throws
   */
  _setSettings(options, update = false) {
    if (update || !AutoNumericHelper.isNull(options)) {
      this.constructor._convertOldOptionsToNewOnes(options);
    }
    if (update) {
      const decimalPlacesRawValueInOptions = "decimalPlacesRawValue" in options;
      if (decimalPlacesRawValueInOptions) {
        this.settings.originalDecimalPlacesRawValue = options.decimalPlacesRawValue;
      }
      const decimalPlacesInOptions = "decimalPlaces" in options;
      if (decimalPlacesInOptions) {
        this.settings.originalDecimalPlaces = options.decimalPlaces;
      }
      this.constructor._calculateDecimalPlacesOnUpdate(options, this.settings);
      this._mergeSettings(options);
    } else {
      this.settings = {};
      this._mergeSettings(this.constructor.getDefaultConfig(), this.domElement.dataset, options, { rawValue: this.defaultRawValue });
      this.caretFix = false;
      this.throwInput = true;
      this.allowedTagList = AutoNumericEnum.allowedTagList;
      this.runOnce = false;
      this.hoveredWithAlt = false;
    }
    this._transformOptionsValuesToDefaultTypes();
    this._runCallbacksFoundInTheSettingsObject();
    this.constructor._correctNegativePositiveSignPlacementOption(this.settings);
    this.constructor._correctCaretPositionOnFocusAndSelectOnFocusOptions(this.settings);
    this.constructor._setNegativePositiveSignPermissions(this.settings);
    if (!update) {
      if (AutoNumericHelper.isNull(options) || !options.decimalPlaces) {
        this.settings.originalDecimalPlaces = null;
      } else {
        this.settings.originalDecimalPlaces = options.decimalPlaces;
      }
      this.settings.originalDecimalPlacesRawValue = this.settings.decimalPlacesRawValue;
      this.constructor._calculateDecimalPlacesOnInit(this.settings);
    }
    this._calculateVMinAndVMaxIntegerSizes();
    this._setTrailingNegativeSignInfo();
    this.regex = {};
    this.constructor._cachesUsualRegularExpressions(this.settings, this.regex);
    this.constructor._setBrackets(this.settings);
    this._calculateValuesToStringsKeys();
    if (AutoNumericHelper.isEmptyObj(this.settings)) {
      AutoNumericHelper.throwError("Unable to set the settings, those are invalid ; an empty object was given.");
    }
    this.constructor.validate(this.settings, false, options);
    this._keepAnOriginalSettingsCopy();
  }
  /**
   * Define if the negative or positive signs are allowed, and update the given settings object directly.
   *
   * @param {object} settings
   * @private
   */
  static _setNegativePositiveSignPermissions(settings) {
    settings.isNegativeSignAllowed = settings.minimumValue < 0;
    settings.isPositiveSignAllowed = settings.maximumValue >= 0;
  }
  /**
   * Convert the `value` parameter that can either be :
   * - a real number,
   * - a number represented in the scientific notation (i.e. -123.4567e-6)
   * - a string representing a real number, or
   * - a string representing a localized number (with specific group separators and decimal character),
   * ...to a string representing a real 'javascript' number (i.e. '1234' or '1234.567').
   *
   * This function returns `NaN` if such conversion fails.
   *
   * @param {int|float|string} value
   * @param {object} settings
   * @returns {string|NaN}
   */
  static _toNumericValue(value, settings) {
    let result;
    if (AutoNumericHelper.isNumber(Number(value))) {
      if (!AutoNumericHelper.isNumberStrict(value)) {
        value = String(value).trim();
      }
      result = AutoNumericHelper.scientificToDecimal(value);
    } else {
      result = this._convertToNumericString(value.toString(), settings);
      if (!AutoNumericHelper.isNumber(Number(result))) {
        AutoNumericHelper.warning(`The given value "${value}" cannot be converted to a numeric one and therefore cannot be used appropriately.`, settings.showWarnings);
        result = NaN;
      }
    }
    return result;
  }
  /**
   * Return the pasted text that will be used, by stripping most non-numeric characters
   *
   * @param {string} text
   * @returns {string}
   */
  _preparePastedText(text) {
    return this.constructor._stripAllNonNumberCharacters(text, this.settings, true, this.isFocused);
  }
  /**
   * Return TRUE if the given value (a number as a string) is within the range set in the settings `minimumValue` and `maximumValue`, FALSE otherwise.
   *
   * @param {string} value
   * @param {object} parsedMinValue Parsed via the `parseStr()` function
   * @param {object} parsedMaxValue Parsed via the `parseStr()` function
   * @returns {boolean}
   */
  static _checkIfInRange(value, parsedMinValue, parsedMaxValue) {
    const parsedValue = AutoNumericHelper.parseStr(value);
    return AutoNumericHelper.testMinMax(parsedMinValue, parsedValue) > -1 && AutoNumericHelper.testMinMax(parsedMaxValue, parsedValue) < 1;
  }
  /**
   * Update the selection values as well as resets the internal state of the current AutoNumeric object.
   * This keeps tracks of the current selection and resets the 'processed' state.
   *
   * Note : This state can change between the keydown, keypress and keyup events, that's why
   *        this function is called on each event handler.
   *
   * @private
   */
  _updateInternalProperties() {
    this.selection = AutoNumericHelper.getElementSelection(this.domElement);
    this.processed = false;
  }
  /**
   * Update the `event.key` attribute that triggered the given event.
   *
   * `event.key` describes:
   * - the key name (if a non-printable character),
   * - or directly the character that result from the key press used to trigger the event.
   *
   * @link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key
   * The key list is described here:
   * @link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values
   *
   * @param {Event|KeyboardEvent} e
   * @private
   */
  _updateEventKeyInfo(e) {
    this.eventKey = AutoNumericHelper.character(e);
  }
  /**
   * Save the unformatted element value.
   * This is used in the 'cancellable' feature where the element value is saved on focus and input validation, to be used if the user wants to cancel his modifications by hitting the 'Escape' key.
   *
   * @private
   */
  _saveCancellableValue() {
    this.savedCancellableValue = this.rawValue;
  }
  /**
   * Set the text selection inside the input with the given start and end position.
   *
   * @param {int} start
   * @param {int} end
   * @private
   */
  _setSelection(start, end) {
    start = Math.max(start, 0);
    end = Math.min(end, AutoNumericHelper.getElementValue(this.domElement).length);
    this.selection = {
      start,
      end,
      length: end - start
    };
    AutoNumericHelper.setElementSelection(this.domElement, start, end);
  }
  /**
   * Set the caret position inside the input at the given position.
   *
   * @param {int} position
   * @private
   */
  _setCaretPosition(position) {
    this._setSelection(position, position);
  }
  /**
   * Return an array containing the string parts located on the left and right side of the caret or selection.
   * Those parts are left 'untouched', i.e. formatted by autoNumeric.
   *
   * @returns {[string, string]} The parts on the left and right of the caret or selection
   * @private
   */
  _getLeftAndRightPartAroundTheSelection() {
    const value = AutoNumericHelper.getElementValue(this.domElement);
    const left = value.substring(0, this.selection.start);
    const right = value.substring(this.selection.end, value.length);
    return [left, right];
  }
  /**
   * Return an array containing the string parts located on the left and right side of the caret or selection.
   * Those parts are unformatted (stripped) of any non-numbers characters, and any trailing negative character is put back on the left hand side of the number.
   *
   * @returns {[string, string]} The parts on the left and right of the caret or selection, unformatted.
   * @private
   */
  _getUnformattedLeftAndRightPartAroundTheSelection() {
    let [left, right] = this._getLeftAndRightPartAroundTheSelection();
    if (left === "" && right === "") {
      return ["", ""];
    }
    let stripZeros = true;
    if ((this.eventKey === AutoNumericEnum.keyName.Hyphen || this.eventKey === AutoNumericEnum.keyName.Minus) && Number(left) === 0) {
      stripZeros = false;
    }
    if (this.isTrailingNegative && (AutoNumericHelper.isNegative(right, this.settings.negativeSignCharacter) && // The caret is placed on the left of the negative sign
    !AutoNumericHelper.isNegative(left, this.settings.negativeSignCharacter) || right === "" && // ...or the caret is placed on the far right of the input (Fix issue #481)
    AutoNumericHelper.isNegative(left, this.settings.negativeSignCharacter, true))) {
      left = left.replace(this.settings.negativeSignCharacter, "");
      right = right.replace(this.settings.negativeSignCharacter, "");
      left = left.replace("-", "");
      right = right.replace("-", "");
      left = `-${left}`;
    }
    left = _AutoNumeric._stripAllNonNumberCharactersExceptCustomDecimalChar(left, this.settings, stripZeros, this.isFocused);
    right = _AutoNumeric._stripAllNonNumberCharactersExceptCustomDecimalChar(right, this.settings, false, this.isFocused);
    return [left, right];
  }
  /**
   * Strip parts from excess characters and leading zeros.
   *
   * @param {string} left
   * @param {string} right
   * @returns {[*,*,*]}
   * @private
   */
  _normalizeParts(left, right) {
    let stripZeros = true;
    if ((this.eventKey === AutoNumericEnum.keyName.Hyphen || this.eventKey === AutoNumericEnum.keyName.Minus) && Number(left) === 0) {
      stripZeros = false;
    }
    if (this.isTrailingNegative && AutoNumericHelper.isNegative(right, this.settings.negativeSignCharacter) && !AutoNumericHelper.isNegative(left, this.settings.negativeSignCharacter)) {
      left = `-${left}`;
      right = right.replace(this.settings.negativeSignCharacter, "");
    }
    left = _AutoNumeric._stripAllNonNumberCharactersExceptCustomDecimalChar(left, this.settings, stripZeros, this.isFocused);
    right = _AutoNumeric._stripAllNonNumberCharactersExceptCustomDecimalChar(right, this.settings, false, this.isFocused);
    if (this.settings.leadingZero === _AutoNumeric.options.leadingZero.deny && (this.eventKey === AutoNumericEnum.keyName.num0 || this.eventKey === AutoNumericEnum.keyName.numpad0) && Number(left) === 0 && // If `right` is not empty and the first character is not `decimalCharacter`
    !AutoNumericHelper.contains(left, this.settings.decimalCharacter) && right !== "") {
      left = left.substring(0, left.length - 1);
    }
    let newValue = left + right;
    if (this.settings.decimalCharacter) {
      const m2 = newValue.match(new RegExp(`^${this.regex.aNegRegAutoStrip}\\${this.settings.decimalCharacter}`));
      if (m2) {
        left = left.replace(m2[1], m2[1] + "0");
        newValue = left + right;
      }
    }
    return [left, right, newValue];
  }
  /**
   * Set the formatted element value as well as the `rawValue`.
   * This returns `true` if the element and raw value have been modified, `false` otherwise.
   * This method also adjust the caret position according to the `leadingZero` option and the normalized value. //TODO What about the cursor *selection*?
   *
   * @param {string} left
   * @param {string} right
   * @param {boolean} isPaste
   * @returns {boolean}
   * @private
   */
  _setValueParts(left, right, isPaste = false) {
    const [normalizedLeft, normalizedRight, normalizedNewValue] = this._normalizeParts(left, right);
    const [minTest, maxTest] = _AutoNumeric._checkIfInRangeWithOverrideOption(normalizedNewValue, this.settings);
    if (minTest && maxTest) {
      const roundedRawValue = _AutoNumeric._truncateDecimalPlaces(normalizedNewValue, this.settings, isPaste, this.settings.decimalPlacesRawValue);
      const testValue = roundedRawValue.replace(this.settings.decimalCharacter, ".");
      if (testValue === "" || testValue === this.settings.negativeSignCharacter) {
        let valueToSetOnEmpty;
        switch (this.settings.emptyInputBehavior) {
          case _AutoNumeric.options.emptyInputBehavior.focus:
          case _AutoNumeric.options.emptyInputBehavior.press:
          case _AutoNumeric.options.emptyInputBehavior.always:
            valueToSetOnEmpty = "";
            break;
          case _AutoNumeric.options.emptyInputBehavior.min:
            valueToSetOnEmpty = this.settings.minimumValue;
            break;
          case _AutoNumeric.options.emptyInputBehavior.max:
            valueToSetOnEmpty = this.settings.maximumValue;
            break;
          case _AutoNumeric.options.emptyInputBehavior.zero:
            valueToSetOnEmpty = "0";
            break;
          case _AutoNumeric.options.emptyInputBehavior.null:
            valueToSetOnEmpty = null;
            break;
          default:
            valueToSetOnEmpty = this.settings.emptyInputBehavior;
        }
        this._setRawValue(valueToSetOnEmpty);
      } else {
        this._setRawValue(this._trimLeadingAndTrailingZeros(testValue));
      }
      const roundedValueToShow = _AutoNumeric._truncateDecimalPlaces(normalizedNewValue, this.settings, isPaste, this.settings.decimalPlacesShownOnFocus);
      let position = normalizedLeft.length;
      if (position > roundedValueToShow.length) {
        position = roundedValueToShow.length;
      }
      if (position === 1 && normalizedLeft === "0" && this.settings.leadingZero === _AutoNumeric.options.leadingZero.deny) {
        if (normalizedRight === "" || normalizedLeft === "0" && normalizedRight !== "") {
          position = 1;
        } else {
          position = 0;
        }
      }
      this._setElementValue(roundedValueToShow, false);
      this._setCaretPosition(position);
      return true;
    }
    this._triggerRangeEvents(minTest, maxTest);
    return false;
  }
  /**
   * Helper function for `_expandSelectionOnSign()`.
   *
   * @returns {Array} Array containing [signPosition, currencySymbolPosition] of a formatted value
   * @private
   */
  _getSignPosition() {
    let result;
    if (this.settings.currencySymbol) {
      const currencySymbolLen = this.settings.currencySymbol.length;
      const value = AutoNumericHelper.getElementValue(this.domElement);
      if (this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.prefix) {
        const hasNeg = this.settings.negativeSignCharacter && value && value.charAt(0) === this.settings.negativeSignCharacter;
        if (hasNeg) {
          result = [1, currencySymbolLen + 1];
        } else {
          result = [0, currencySymbolLen];
        }
      } else {
        const valueLen = value.length;
        result = [valueLen - currencySymbolLen, valueLen];
      }
    } else {
      result = [1e3, -1];
    }
    return result;
  }
  /**
   * Expands selection to cover whole sign
   * Prevents partial deletion/copying/overwriting of a sign
   * @private
   */
  _expandSelectionOnSign() {
    const [signPosition, currencySymbolPosition] = this._getSignPosition();
    const selection = this.selection;
    if (selection.start < currencySymbolPosition && selection.end > signPosition) {
      if ((selection.start < signPosition || selection.end > currencySymbolPosition) && AutoNumericHelper.getElementValue(this.domElement).substring(Math.max(selection.start, signPosition), Math.min(selection.end, currencySymbolPosition)).match(/^\s*$/)) {
        if (selection.start < signPosition) {
          this._setSelection(selection.start, signPosition);
        } else {
          this._setSelection(currencySymbolPosition, selection.end);
        }
      } else {
        this._setSelection(Math.min(selection.start, signPosition), Math.max(selection.end, currencySymbolPosition));
      }
    }
  }
  /**
   * Try to strip pasted value to digits
   */
  _checkPaste() {
    if (this.formatted) {
      return;
    }
    if (!AutoNumericHelper.isUndefined(this.valuePartsBeforePaste)) {
      const oldParts = this.valuePartsBeforePaste;
      const [left, right] = this._getLeftAndRightPartAroundTheSelection();
      delete this.valuePartsBeforePaste;
      const modifiedLeftPart = left.substr(0, oldParts[0].length) + _AutoNumeric._stripAllNonNumberCharactersExceptCustomDecimalChar(left.substr(oldParts[0].length), this.settings, true, this.isFocused);
      if (!this._setValueParts(modifiedLeftPart, right, true)) {
        this._setElementValue(oldParts.join(""), false);
        this._setCaretPosition(oldParts[0].length);
      }
    }
  }
  /**
   * Return `true` if the given key should be ignored or not.
   *
   * @param {string} eventKeyName
   * @returns {boolean}
   * @private
   */
  static _shouldSkipEventKey(eventKeyName) {
    const isFnKeys = AutoNumericHelper.isInArray(eventKeyName, AutoNumericEnum.keyName._allFnKeys);
    const isOSKeys = eventKeyName === AutoNumericEnum.keyName.OSLeft || eventKeyName === AutoNumericEnum.keyName.OSRight;
    const isContextMenu = eventKeyName === AutoNumericEnum.keyName.ContextMenu;
    const isSomeNonPrintableKeys = AutoNumericHelper.isInArray(eventKeyName, AutoNumericEnum.keyName._someNonPrintableKeys);
    const isOtherNonPrintableKeys = eventKeyName === AutoNumericEnum.keyName.NumLock || eventKeyName === AutoNumericEnum.keyName.ScrollLock || eventKeyName === AutoNumericEnum.keyName.Insert || eventKeyName === AutoNumericEnum.keyName.Command;
    const isUnrecognizableKeys = eventKeyName === AutoNumericEnum.keyName.Unidentified;
    return isFnKeys || isOSKeys || isContextMenu || isSomeNonPrintableKeys || isUnrecognizableKeys || isOtherNonPrintableKeys;
  }
  /**
   * Process copying, cutting and pasting, as well as undo/redoing and cursor moving.
   * Return `true` if further processing should not be performed.
   *
   * @param {KeyboardEvent} e
   * @returns {boolean}
   * @private
   */
  _processNonPrintableKeysAndShortcuts(e) {
    if ((e.ctrlKey || e.metaKey) && e.type === "keyup" && !AutoNumericHelper.isUndefined(this.valuePartsBeforePaste) || e.shiftKey && this.eventKey === AutoNumericEnum.keyName.Insert) {
      this._checkPaste();
      return false;
    }
    if (this.constructor._shouldSkipEventKey(this.eventKey)) {
      return true;
    }
    if ((e.ctrlKey || e.metaKey) && this.eventKey === AutoNumericEnum.keyName.a) {
      if (this.settings.selectNumberOnly) {
        e.preventDefault();
        this.selectNumber();
      }
      return true;
    }
    if ((e.ctrlKey || e.metaKey) && (this.eventKey === AutoNumericEnum.keyName.c || this.eventKey === AutoNumericEnum.keyName.v || this.eventKey === AutoNumericEnum.keyName.x)) {
      if (e.type === "keydown") {
        this._expandSelectionOnSign();
      }
      if (this.eventKey === AutoNumericEnum.keyName.v || this.eventKey === AutoNumericEnum.keyName.Insert) {
        if (e.type === "keydown" || e.type === "keypress") {
          if (AutoNumericHelper.isUndefined(this.valuePartsBeforePaste)) {
            this.valuePartsBeforePaste = this._getLeftAndRightPartAroundTheSelection();
          }
        } else {
          this._checkPaste();
        }
      }
      return e.type === "keydown" || e.type === "keypress" || this.eventKey === AutoNumericEnum.keyName.c;
    }
    if (e.ctrlKey || e.metaKey) {
      return !(this.eventKey === AutoNumericEnum.keyName.Z || this.eventKey === AutoNumericEnum.keyName.z);
    }
    if (this.eventKey === AutoNumericEnum.keyName.LeftArrow || this.eventKey === AutoNumericEnum.keyName.RightArrow) {
      if (e.type === "keydown" && !e.shiftKey) {
        const value = AutoNumericHelper.getElementValue(this.domElement);
        if (this.eventKey === AutoNumericEnum.keyName.LeftArrow && (value.charAt(this.selection.start - 2) === this.settings.digitGroupSeparator || value.charAt(this.selection.start - 2) === this.settings.decimalCharacter)) {
          this._setCaretPosition(this.selection.start - 1);
        } else if (this.eventKey === AutoNumericEnum.keyName.RightArrow && (value.charAt(this.selection.start + 1) === this.settings.digitGroupSeparator || value.charAt(this.selection.start + 1) === this.settings.decimalCharacter)) {
          this._setCaretPosition(this.selection.start + 1);
        }
      }
      return true;
    }
    return AutoNumericHelper.isInArray(this.eventKey, AutoNumericEnum.keyName._directionKeys);
  }
  /**
   * Process deletion of characters when the minus sign is to the right of the numeric characters.
   *
   * @param {string[]} leftAndRight The parts on the left and on the right of the caret or selection as an array with [left, right]
   * @returns {string[]} Processed left and right as an array with [left, right]
   * @private
   */
  _processCharacterDeletionIfTrailingNegativeSign([left, right]) {
    const value = AutoNumericHelper.getElementValue(this.domElement);
    const isValNegative = AutoNumericHelper.isNegative(value, this.settings.negativeSignCharacter);
    if (this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.prefix && this.settings.negativePositiveSignPlacement === _AutoNumeric.options.negativePositiveSignPlacement.suffix) {
      if (this.eventKey === AutoNumericEnum.keyName.Backspace) {
        this.caretFix = this.selection.start >= value.indexOf(this.settings.suffixText) && this.settings.suffixText !== "";
        if (value.charAt(this.selection.start - 1) === "-") {
          left = left.substring(1);
        } else if (this.selection.start <= value.length - this.settings.suffixText.length) {
          left = left.substring(0, left.length - 1);
        }
      } else {
        this.caretFix = this.selection.start >= value.indexOf(this.settings.suffixText) && this.settings.suffixText !== "";
        if (this.selection.start >= value.indexOf(this.settings.currencySymbol) + this.settings.currencySymbol.length) {
          right = right.substring(1, right.length);
        }
        if (AutoNumericHelper.isNegative(left, this.settings.negativeSignCharacter) && value.charAt(this.selection.start) === "-") {
          left = left.substring(1);
        }
      }
    }
    if (this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.suffix) {
      switch (this.settings.negativePositiveSignPlacement) {
        case _AutoNumeric.options.negativePositiveSignPlacement.left:
          this.caretFix = this.selection.start >= value.indexOf(this.settings.negativeSignCharacter) + this.settings.negativeSignCharacter.length;
          if (this.eventKey === AutoNumericEnum.keyName.Backspace) {
            if (this.selection.start === value.indexOf(this.settings.negativeSignCharacter) + this.settings.negativeSignCharacter.length && isValNegative) {
              left = left.substring(1);
            } else if (left !== "-" && (this.selection.start <= value.indexOf(this.settings.negativeSignCharacter) || !isValNegative)) {
              left = left.substring(0, left.length - 1);
            }
          } else {
            if (left[0] === "-") {
              right = right.substring(1);
            }
            if (this.selection.start === value.indexOf(this.settings.negativeSignCharacter) && isValNegative) {
              left = left.substring(1);
            }
          }
          break;
        case _AutoNumeric.options.negativePositiveSignPlacement.right:
          this.caretFix = this.selection.start >= value.indexOf(this.settings.negativeSignCharacter) + this.settings.negativeSignCharacter.length;
          if (this.eventKey === AutoNumericEnum.keyName.Backspace) {
            if (this.selection.start === value.indexOf(this.settings.negativeSignCharacter) + this.settings.negativeSignCharacter.length) {
              left = left.substring(1);
            } else if (left !== "-" && this.selection.start <= value.indexOf(this.settings.negativeSignCharacter) - this.settings.currencySymbol.length) {
              left = left.substring(0, left.length - 1);
            } else if (left !== "" && !isValNegative) {
              left = left.substring(0, left.length - 1);
            }
          } else {
            this.caretFix = this.selection.start >= value.indexOf(this.settings.currencySymbol) && this.settings.currencySymbol !== "";
            if (this.selection.start === value.indexOf(this.settings.negativeSignCharacter)) {
              left = left.substring(1);
            }
            right = right.substring(1);
          }
          break;
      }
    }
    return [left, right];
  }
  /**
   * Process the deletion of characters.
   * Returns `true` if the deletion is allowed (within the min and max range, according to the `overrideMinMaxLimits` option), `false` otherwise.
   *
   * @param {Event} e
   * @returns {boolean}
   */
  _processCharacterDeletion(e) {
    let left;
    let right;
    if (!this.selection.length) {
      [left, right] = this._getUnformattedLeftAndRightPartAroundTheSelection();
      if (left === "" && right === "") {
        this.throwInput = false;
      }
      if (this.isTrailingNegative && AutoNumericHelper.isNegative(AutoNumericHelper.getElementValue(this.domElement), this.settings.negativeSignCharacter)) {
        [left, right] = this._processCharacterDeletionIfTrailingNegativeSign([left, right]);
      } else {
        if (this.eventKey === AutoNumericEnum.keyName.Backspace) {
          left = left.substring(0, left.length - 1);
        } else {
          right = right.substring(1, right.length);
        }
      }
    } else {
      this._expandSelectionOnSign();
      [left, right] = this._getUnformattedLeftAndRightPartAroundTheSelection();
    }
    if (!this.constructor._isWithinRangeWithOverrideOption(`${left}${right}`, this.settings)) {
      return false;
    }
    if (AutoNumericHelper.getElementValue(e.target) === this.settings.currencySymbol) {
      return false;
    }
    this._setValueParts(left, right);
    return true;
  }
  /**
   * Return `true` if a decimal character is allowed to be typed.
   * If the number of decimal places shown on focus is zero, then the decimal character is not allowed.
   *
   * @returns {boolean}
   * @private
   */
  _isDecimalCharacterInsertionAllowed() {
    return String(this.settings.decimalPlacesShownOnFocus) !== String(_AutoNumeric.options.decimalPlacesShownOnFocus.none) && String(this.settings.decimalPlaces) !== String(_AutoNumeric.options.decimalPlaces.none);
  }
  /**
   * Return `true` if the key is allowed.
   * This function decides if the key pressed should be dropped or accepted, and modify the value 'on-the-fly' accordingly.
   * //TODO This should use another function in order to separate the test and the modification
   *
   * @returns {boolean}
   */
  _processCharacterInsertion() {
    let [left, right] = this._getUnformattedLeftAndRightPartAroundTheSelection();
    if (this.eventKey !== AutoNumericEnum.keyName.AndroidDefault) {
      this.throwInput = true;
    }
    if (this.eventKey === this.settings.decimalCharacter || this.settings.decimalCharacterAlternative && this.eventKey === this.settings.decimalCharacterAlternative) {
      if (!this._isDecimalCharacterInsertionAllowed() || !this.settings.decimalCharacter) {
        return false;
      }
      if (this.settings.alwaysAllowDecimalCharacter) {
        left = left.replace(this.settings.decimalCharacter, "");
        right = right.replace(this.settings.decimalCharacter, "");
      } else {
        if (AutoNumericHelper.contains(left, this.settings.decimalCharacter)) {
          return true;
        }
        if (right.indexOf(this.settings.decimalCharacter) > 0) {
          return true;
        }
        if (right.indexOf(this.settings.decimalCharacter) === 0) {
          right = right.substr(1);
        }
      }
      if (this.settings.negativeSignCharacter && AutoNumericHelper.contains(right, this.settings.negativeSignCharacter)) {
        left = `${this.settings.negativeSignCharacter}${left}`;
        right = right.replace(this.settings.negativeSignCharacter, "");
      }
      this._setValueParts(left + this.settings.decimalCharacter, right);
      return true;
    }
    if ((this.eventKey === "-" || this.eventKey === "+") && this.settings.isNegativeSignAllowed) {
      if (left === "" && AutoNumericHelper.contains(right, "-")) {
        if (this.settings.negativePositiveSignBehavior || !this.settings.negativePositiveSignBehavior && this.eventKey === "+") {
          right = right.replace("-", "");
        }
      } else if (AutoNumericHelper.isNegativeStrict(left, "-")) {
        if (this.settings.negativePositiveSignBehavior || !this.settings.negativePositiveSignBehavior && this.eventKey === "+") {
          left = left.replace("-", "");
        }
      } else if (this.settings.negativePositiveSignBehavior || !this.settings.negativePositiveSignBehavior && this.eventKey === "-") {
        left = `${this.settings.negativeSignCharacter}${left}`;
      }
      this._setValueParts(left, right);
      return true;
    }
    const eventNumber = Number(this.eventKey);
    if (eventNumber >= 0 && eventNumber <= 9) {
      if (this.settings.isNegativeSignAllowed && left === "" && AutoNumericHelper.contains(right, "-")) {
        left = "-";
        right = right.substring(1, right.length);
      }
      if (this.settings.maximumValue <= 0 && this.settings.minimumValue < this.settings.maximumValue && !AutoNumericHelper.contains(AutoNumericHelper.getElementValue(this.domElement), this.settings.negativeSignCharacter) && this.eventKey !== "0") {
        left = `-${left}`;
      }
      this._setValueParts(`${left}${this.eventKey}`, right);
      return true;
    }
    this.throwInput = false;
    return false;
  }
  /**
   * Formatting of just processed value while keeping the cursor position
   *
   * @param {Event} e
   * @private
   */
  _formatValue(e) {
    const elementValue = AutoNumericHelper.getElementValue(this.domElement);
    let [left] = this._getUnformattedLeftAndRightPartAroundTheSelection();
    if ((this.settings.digitGroupSeparator === "" || this.settings.digitGroupSeparator !== "" && !AutoNumericHelper.contains(elementValue, this.settings.digitGroupSeparator)) && (this.settings.currencySymbol === "" || this.settings.currencySymbol !== "" && !AutoNumericHelper.contains(elementValue, this.settings.currencySymbol))) {
      let [subParts] = elementValue.split(this.settings.decimalCharacter);
      let negativeSign = "";
      if (AutoNumericHelper.isNegative(subParts, this.settings.negativeSignCharacter)) {
        negativeSign = this.settings.negativeSignCharacter;
        subParts = subParts.replace(this.settings.negativeSignCharacter, "");
        left = left.replace("-", "");
      }
      if (negativeSign === "" && subParts.length > this.settings.mIntPos && left.charAt(0) === "0") {
        left = left.slice(1);
      }
      if (negativeSign === this.settings.negativeSignCharacter && subParts.length > this.settings.mIntNeg && left.charAt(0) === "0") {
        left = left.slice(1);
      }
      if (!this.isTrailingNegative) {
        left = `${negativeSign}${left}`;
      }
    }
    const value = this.constructor._addGroupSeparators(elementValue, this.settings, this.isFocused, this.rawValue);
    let position = value.length;
    if (value) {
      const leftAr = left.split("");
      if ((this.settings.negativePositiveSignPlacement === _AutoNumeric.options.negativePositiveSignPlacement.suffix || this.settings.negativePositiveSignPlacement !== _AutoNumeric.options.negativePositiveSignPlacement.prefix && this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.suffix) && leftAr[0] === this.settings.negativeSignCharacter && !this.settings.isNegativeSignAllowed) {
        leftAr.shift();
        if ((this.eventKey === AutoNumericEnum.keyName.Backspace || this.eventKey === AutoNumericEnum.keyName.Delete) && this.caretFix) {
          if (this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.suffix && this.settings.negativePositiveSignPlacement === _AutoNumeric.options.negativePositiveSignPlacement.left || this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.prefix && this.settings.negativePositiveSignPlacement === _AutoNumeric.options.negativePositiveSignPlacement.suffix) {
            leftAr.push(this.settings.negativeSignCharacter);
            this.caretFix = e.type === "keydown";
          }
          if (this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.suffix && this.settings.negativePositiveSignPlacement === _AutoNumeric.options.negativePositiveSignPlacement.right) {
            const signParts = this.settings.currencySymbol.split("");
            const escapeChr = ["\\", "^", "$", ".", "|", "?", "*", "+", "(", ")", "["];
            const escapedParts = [];
            signParts.forEach((i, miniParts) => {
              miniParts = signParts[i];
              if (AutoNumericHelper.isInArray(miniParts, escapeChr)) {
                escapedParts.push("\\" + miniParts);
              } else {
                escapedParts.push(miniParts);
              }
            });
            if (this.eventKey === AutoNumericEnum.keyName.Backspace && this.settings.negativeSignCharacter === "-") {
              escapedParts.push("-");
            }
            leftAr.push(escapedParts.join(""));
            this.caretFix = e.type === "keydown";
          }
        }
      }
      for (let i = 0; i < leftAr.length; i++) {
        if (!leftAr[i].match("\\d")) {
          leftAr[i] = "\\" + leftAr[i];
        }
      }
      let leftReg;
      if (this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.suffix) {
        leftReg = new RegExp(`^.*?${leftAr.join(".*?")}`);
      } else {
        leftReg = new RegExp(`^.*?[${this.settings.currencySymbol}]*${leftAr.join(".*?")}`);
      }
      const newLeft = value.match(leftReg);
      if (newLeft) {
        position = newLeft[0].length;
        if (this.settings.showPositiveSign) {
          if (position === 0 && newLeft.input.charAt(0) === this.settings.positiveSignCharacter) {
            position = newLeft.input.indexOf(this.settings.currencySymbol) === 1 ? this.settings.currencySymbol.length + 1 : 1;
          }
          if (position === 0 && newLeft.input.charAt(this.settings.currencySymbol.length) === this.settings.positiveSignCharacter) {
            position = this.settings.currencySymbol.length + 1;
          }
        }
        if ((position === 0 && value.charAt(0) !== this.settings.negativeSignCharacter || position === 1 && value.charAt(0) === this.settings.negativeSignCharacter) && this.settings.currencySymbol && this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.prefix) {
          position = this.settings.currencySymbol.length + (AutoNumericHelper.isNegativeStrict(value, this.settings.negativeSignCharacter) ? 1 : 0);
        }
      } else {
        if (this.settings.currencySymbol && this.settings.currencySymbolPlacement === _AutoNumeric.options.currencySymbolPlacement.suffix) {
          position -= this.settings.currencySymbol.length;
        }
        if (this.settings.suffixText) {
          position -= this.settings.suffixText.length;
        }
      }
    }
    if (value !== elementValue) {
      this._setElementValue(value, false);
      this._setCaretPosition(position);
    }
    this.formatted = true;
  }
  /**
   * Serialize the form child <input> element values to a string, or an Array.
   * The output format is defined with the `formatType` argument.
   * This is loosely based upon http://stackoverflow.com/a/40705993/2834898.
   *
   * @param {HTMLFormElement} form
   * @param {boolean} intoAnArray If `true`, instead of generating a string, it generates an Array.
   * @param {string} formatType If `'unformatted'`, then the AutoNumeric elements values are unformatted, if `'localized'`, then the AutoNumeric elements values are localized, and if `'formatted'`, then the AutoNumeric elements values are kept formatted. In either way, this function does not modify the value of each DOM element, but only affect the value that is returned by that serialize function.
   * @param {string} serializedSpaceCharacter Can either be the '+' character, or the '%20' string.
   * @param {string|null} forcedOutputFormat If set, then this is the format that is used for the localization, instead of the default `outputFormat` option.
   * @returns {string|Array}
   * @private
   */
  static _serialize(form, intoAnArray = false, formatType = "unformatted", serializedSpaceCharacter = "+", forcedOutputFormat = null) {
    const result = [];
    if (typeof form === "object" && form.nodeName.toLowerCase() === "form") {
      Array.prototype.slice.call(form.elements).forEach((element) => {
        if (element.name && !element.disabled && ["file", "reset", "submit", "button"].indexOf(element.type) === -1) {
          if (element.type === "select-multiple") {
            Array.prototype.slice.call(element.options).forEach((option) => {
              if (option.selected) {
                if (intoAnArray) {
                  result.push({ name: element.name, value: option.value });
                } else {
                  result.push(`${encodeURIComponent(element.name)}=${encodeURIComponent(option.value)}`);
                }
              }
            });
          } else if (["checkbox", "radio"].indexOf(element.type) === -1 || element.checked) {
            let valueResult;
            if (this.isManagedByAutoNumeric(element)) {
              let anObject;
              switch (formatType) {
                case "unformatted":
                  anObject = this.getAutoNumericElement(element);
                  if (!AutoNumericHelper.isNull(anObject)) {
                    valueResult = this.unformat(element, anObject.getSettings());
                  }
                  break;
                case "localized":
                  anObject = this.getAutoNumericElement(element);
                  if (!AutoNumericHelper.isNull(anObject)) {
                    const currentSettings = AutoNumericHelper.cloneObject(anObject.getSettings());
                    if (!AutoNumericHelper.isNull(forcedOutputFormat)) {
                      currentSettings.outputFormat = forcedOutputFormat;
                    }
                    valueResult = this.localize(element, currentSettings);
                  }
                  break;
                case "formatted":
                default:
                  valueResult = element.value;
              }
            } else {
              valueResult = element.value;
            }
            if (AutoNumericHelper.isUndefined(valueResult)) {
              AutoNumericHelper.throwError("This error should never be hit. If it has, something really wrong happened!");
            }
            if (intoAnArray) {
              result.push({ name: element.name, value: valueResult });
            } else {
              result.push(`${encodeURIComponent(element.name)}=${encodeURIComponent(valueResult)}`);
            }
          }
        }
      });
    }
    let finalResult;
    if (intoAnArray) {
      finalResult = result;
    } else {
      finalResult = result.join("&");
      if ("+" === serializedSpaceCharacter) {
        finalResult = finalResult.replace(/%20/g, "+");
      }
    }
    return finalResult;
  }
  /**
   * Serialize the form values to a string, outputting numeric strings for each AutoNumeric-managed element values.
   *
   * @param {HTMLFormElement} form
   * @param {string} serializedSpaceCharacter
   * @returns {string}
   */
  static _serializeNumericString(form, serializedSpaceCharacter = "+") {
    return this._serialize(form, false, "unformatted", serializedSpaceCharacter);
  }
  /**
   * Serialize the form values to a string, outputting the formatted value as strings for each AutoNumeric-managed elements.
   *
   * @param {HTMLFormElement} form
   * @param {string} serializedSpaceCharacter
   * @returns {string}
   */
  static _serializeFormatted(form, serializedSpaceCharacter = "+") {
    return this._serialize(form, false, "formatted", serializedSpaceCharacter);
  }
  /**
   * Serialize the form values to a string, outputting localized strings for each AutoNumeric-managed element values.
   *
   * @param {HTMLFormElement} form
   * @param {string} serializedSpaceCharacter
   * @param {string|null} forcedOutputFormat If set, then this is the format that is used for the localization, instead of the default `outputFormat` option.
   * @returns {string}
   */
  static _serializeLocalized(form, serializedSpaceCharacter = "+", forcedOutputFormat = null) {
    return this._serialize(form, false, "localized", serializedSpaceCharacter, forcedOutputFormat);
  }
  /**
   * Generate an Array with the form values, outputting numeric strings for each AutoNumeric-managed element values.
   *
   * @param {HTMLFormElement} form
   * @param {string} serializedSpaceCharacter
   * @returns {Array}
   */
  static _serializeNumericStringArray(form, serializedSpaceCharacter = "+") {
    return this._serialize(form, true, "unformatted", serializedSpaceCharacter);
  }
  /**
   * Generate an Array with the form values, outputting the formatted value as strings for each AutoNumeric-managed elements.
   *
   * @param {HTMLFormElement} form
   * @param {string} serializedSpaceCharacter
   * @returns {Array}
   */
  static _serializeFormattedArray(form, serializedSpaceCharacter = "+") {
    return this._serialize(form, true, "formatted", serializedSpaceCharacter);
  }
  /**
   * Generate an Array with the form values, outputting localized strings for each AutoNumeric-managed element values.
   *
   * @param {HTMLFormElement} form
   * @param {string} serializedSpaceCharacter
   * @param {string|null} forcedOutputFormat If set, then this is the format that is used for the localization, instead of the default `outputFormat` option.
   * @returns {Array}
   */
  static _serializeLocalizedArray(form, serializedSpaceCharacter = "+", forcedOutputFormat = null) {
    return this._serialize(form, true, "localized", serializedSpaceCharacter, forcedOutputFormat);
  }
};
__publicField(_AutoNumeric, "options");
// Those static declarations are only used by the IDE, to prevent error messages not finding those fields declarations
__publicField(_AutoNumeric, "events");
__publicField(_AutoNumeric, "defaultSettings");
__publicField(_AutoNumeric, "predefinedOptions");
let AutoNumeric = _AutoNumeric;
AutoNumeric.multiple = (arg1, initialValue = null, options = null) => {
  const result = [];
  if (AutoNumericHelper.isObject(initialValue)) {
    options = initialValue;
    initialValue = null;
  }
  if (AutoNumericHelper.isString(arg1)) {
    arg1 = [...document.querySelectorAll(arg1)];
  } else if (AutoNumericHelper.isObject(arg1)) {
    if (!Object.prototype.hasOwnProperty.call(arg1, "rootElement")) {
      AutoNumericHelper.throwError(`The object passed to the 'multiple' function is invalid ; no 'rootElement' attribute found.`);
    }
    const elements = [...arg1.rootElement.querySelectorAll("input")];
    if (Object.prototype.hasOwnProperty.call(arg1, "exclude")) {
      if (!Array.isArray(arg1.exclude)) {
        AutoNumericHelper.throwError(`The 'exclude' array passed to the 'multiple' function is invalid.`);
      }
      arg1 = AutoNumericHelper.filterOut(elements, arg1.exclude);
    } else {
      arg1 = elements;
    }
  } else if (!AutoNumericHelper.isArray(arg1)) {
    AutoNumericHelper.throwError(`The given parameters to the 'multiple' function are invalid.`);
  }
  if (arg1.length === 0) {
    let showWarnings = true;
    if (!AutoNumericHelper.isNull(options) && AutoNumericHelper.isBoolean(options.showWarnings)) {
      showWarnings = options.showWarnings;
    }
    AutoNumericHelper.warning(`No valid DOM elements were given hence no AutoNumeric objects were instantiated.`, showWarnings);
    return [];
  }
  const isInitialValueArray = AutoNumericHelper.isArray(initialValue);
  const isInitialValueArrayAndNotEmpty = isInitialValueArray && initialValue.length >= 1;
  let secondArgumentIsInitialValueArray = false;
  let secondArgumentIsOptionArray = false;
  if (isInitialValueArrayAndNotEmpty) {
    const typeOfFirstArrayElement = typeof Number(initialValue[0]);
    secondArgumentIsInitialValueArray = typeOfFirstArrayElement === "number" && !isNaN(Number(initialValue[0]));
    if (!secondArgumentIsInitialValueArray) {
      if (typeOfFirstArrayElement === "string" || isNaN(typeOfFirstArrayElement) || typeOfFirstArrayElement === "object") {
        secondArgumentIsOptionArray = true;
      }
    }
  }
  const isOptionsArrayAndNotEmpty = AutoNumericHelper.isArray(options) && options.length >= 1;
  let thirdArgumentIsOptionArray = false;
  if (isOptionsArrayAndNotEmpty) {
    const typeOfFirstArrayElement = typeof options[0];
    if (typeOfFirstArrayElement === "string" || typeOfFirstArrayElement === "object") {
      thirdArgumentIsOptionArray = true;
    }
  }
  let optionsToUse;
  if (secondArgumentIsOptionArray) {
    optionsToUse = AutoNumeric.mergeOptions(initialValue);
  } else if (thirdArgumentIsOptionArray) {
    optionsToUse = AutoNumeric.mergeOptions(options);
  } else {
    optionsToUse = options;
  }
  const isInitialValueNumber = AutoNumericHelper.isNumber(initialValue);
  let initialValueArraySize;
  if (secondArgumentIsInitialValueArray) {
    initialValueArraySize = initialValue.length;
  }
  arg1.forEach((domElement, index) => {
    if (isInitialValueNumber) {
      result.push(new AutoNumeric(domElement, initialValue, optionsToUse));
    } else if (secondArgumentIsInitialValueArray && index <= initialValueArraySize) {
      result.push(new AutoNumeric(domElement, initialValue[index], optionsToUse));
    } else {
      result.push(new AutoNumeric(domElement, null, optionsToUse));
    }
  });
  return result;
};
AutoNumeric.events = {
  correctedValue: "autoNumeric:correctedValue",
  initialized: "autoNumeric:initialized",
  invalidFormula: "autoNumeric:invalidFormula",
  invalidValue: "autoNumeric:invalidValue",
  formatted: "autoNumeric:formatted",
  rawValueModified: "autoNumeric:rawValueModified",
  minRangeExceeded: "autoNumeric:minExceeded",
  maxRangeExceeded: "autoNumeric:maxExceeded",
  native: {
    input: "input",
    change: "change"
  },
  validFormula: "autoNumeric:validFormula"
};
Object.freeze(AutoNumeric.events.native);
Object.freeze(AutoNumeric.events);
Object.defineProperty(AutoNumeric, "events", { configurable: false, writable: false });
AutoNumeric.options = {
  /* Defines if the decimal places should be padded with zeroes
   * `true`     : always pad decimals with zeros (ie. '12.3400')
   * `false`    : never pad with zeros (ie. '12.34')
   * `'floats'` : pad with zeroes only when there are decimals (ie. '12' and '12.3400')
   * Note: setting allowDecimalPadding to 'false' will override the 'decimalPlaces' setting.
   */
  allowDecimalPadding: {
    always: true,
    never: false,
    floats: "floats"
  },
  /* Defines if the decimal character or decimal character alternative should be accepted when there is already a decimal character shown in the element.
   * If set to `true`, any decimal character input will be accepted and will subsequently modify the decimal character position, as well as the `rawValue`.
   * If set to `false`, the decimal character and its alternative key will be dropped as before. This is the default setting.
   */
  alwaysAllowDecimalCharacter: {
    alwaysAllow: true,
    doNotAllow: false
  },
  /* Defines where should be positioned the caret on focus
   * null : Do not enforce any caret positioning on focus (this is needed when using `selectOnFocus`)
   * `'start'` : put the caret of the far left side of the value (excluding the positive/negative sign and currency symbol, if any)
   * `'end'` : put the caret of the far right side of the value (excluding the positive/negative sign and currency symbol, if any)
   * `'decimalLeft'` : put the caret of the left of the decimal character if any
   * `'decimalRight'` : put the caret of the right of the decimal character if any
   */
  caretPositionOnFocus: {
    start: "start",
    end: "end",
    decimalLeft: "decimalLeft",
    decimalRight: "decimalRight",
    doNoForceCaretPosition: null
  },
  /* Defines if a local list of AutoNumeric objects should be kept when initializing this object.
   * This list is used by the `global.*` functions.
   */
  createLocalList: {
    createList: true,
    doNotCreateList: false
  },
  /* Defines the currency symbol string.
   * It can be a string of more than one character (allowing for instance to use a space on either side of it, example: '$ ' or ' $')
   * cf. https://en.wikipedia.org/wiki/Currency_symbol
   */
  currencySymbol: {
    none: "",
    currencySign: "¤",
    austral: "₳",
    // ARA
    australCentavo: "¢",
    baht: "฿",
    // THB
    cedi: "₵",
    // GHS
    cent: "¢",
    colon: "₡",
    // CRC
    cruzeiro: "₢",
    // BRB - Not used anymore since 1993
    dollar: "$",
    dong: "₫",
    // VND
    drachma: "₯",
    // GRD (or 'Δρχ.' or 'Δρ.')
    dram: "​֏",
    // AMD
    european: "₠",
    // XEU (old currency before the Euro)
    euro: "€",
    // EUR
    florin: "ƒ",
    franc: "₣",
    // FRF
    guarani: "₲",
    // PYG
    hryvnia: "₴",
    // грн
    kip: "₭",
    // LAK
    att: "ອັດ",
    // cents of the Kip
    lepton: "Λ.",
    // cents of the Drachma
    lira: "₺",
    // TRY
    liraOld: "₤",
    lari: "₾",
    // GEL
    mark: "ℳ",
    mill: "₥",
    naira: "₦",
    // NGN
    peseta: "₧",
    peso: "₱",
    // PHP
    pfennig: "₰",
    // cents of the Mark
    pound: "£",
    real: "R$ ",
    // Brazilian real
    riel: "៛",
    // KHR
    ruble: "₽",
    // RUB
    rupee: "₹",
    // INR
    rupeeOld: "₨",
    shekel: "₪",
    shekelAlt: "ש״ח‎‎",
    taka: "৳",
    // BDT
    tenge: "₸",
    // KZT
    togrog: "₮",
    // MNT
    won: "₩",
    yen: "¥"
  },
  /* Defines where the currency symbol should be placed (before of after the numbers)
   * for prefix currencySymbolPlacement: "p" (default)
   * for suffix currencySymbolPlacement: "s"
   */
  currencySymbolPlacement: {
    prefix: "p",
    suffix: "s"
  },
  /* Defines what decimal separator character is used
   */
  decimalCharacter: {
    comma: ",",
    dot: ".",
    middleDot: "·",
    arabicDecimalSeparator: "٫",
    decimalSeparatorKeySymbol: "⎖"
  },
  /* Allow to declare an alternative decimal separator which is automatically replaced by `decimalCharacter` when typed.
   * This is used by countries that use a comma ',' as the decimal character and have keyboards with a numeric pads that have
   * a period 'full stop' as the decimal character (France or Spain for instance).
   */
  decimalCharacterAlternative: {
    none: null,
    comma: ",",
    dot: "."
  },
  /* Defines the default number of decimal places to show on the formatted value, and keep for the precision.
   * Incidentally, since we need to be able to show that many decimal places, this also defines the raw value precision by default.
   */
  decimalPlaces: {
    none: 0,
    one: 1,
    two: 2,
    three: 3,
    four: 4,
    five: 5,
    six: 6
  },
  /* Defines how many decimal places should be kept for the raw value (ie. This is the precision for float values).
   *
   * If this option is set to `null` (which is the default), then the value of `decimalPlaces` is used for `decimalPlacesRawValue` as well.
   * Note: Setting this to a lower number of decimal places than the one to be shown will lead to confusion for the users.
   */
  decimalPlacesRawValue: {
    useDefault: null,
    none: 0,
    one: 1,
    two: 2,
    three: 3,
    four: 4,
    five: 5,
    six: 6
  },
  /* Defines how many decimal places should be visible when the element is unfocused.
   * If this is set to `null`, then this option is ignored, and the `decimalPlaces` option value will be used instead.
   * This means this is optional ; if omitted the decimal places will be the same when the input has the focus.
   *
   * This option can be used in conjonction with the two other `scale*` options, which allows to display a different formatted value when the element is unfocused, while another formatted value is shown when focused.
   * For those `scale*` options to have any effect, `divisorWhenUnfocused` must not be `null`.
   */
  decimalPlacesShownOnBlur: {
    useDefault: null,
    none: 0,
    one: 1,
    two: 2,
    three: 3,
    four: 4,
    five: 5,
    six: 6
  },
  /* Defines how many decimal places should be visible when the element has the focus.
   * If this is set to `null`, then this option is ignored, and the `decimalPlaces` option value will be used instead.
   *
   * Example:
   * For instance if `decimalPlacesShownOnFocus` is set to `5` and the default number of decimal places is `2`, then on focus `1,000.12345` will be shown, while without focus `1,000.12` will be set back.
   * Note 1: the results depends on the rounding method used.
   * Note 2: the `getNumericString()` method returns the extended decimal places
   */
  decimalPlacesShownOnFocus: {
    useDefault: null,
    none: 0,
    one: 1,
    two: 2,
    three: 3,
    four: 4,
    five: 5,
    six: 6
  },
  /* Helper option for ASP.NET postback
   * This should be set as the value of the unformatted default value
   * examples:
   * no default value="" {defaultValueOverride: ""}
   * value=1234.56 {defaultValueOverride: '1234.56'}
   */
  defaultValueOverride: {
    doNotOverride: null
  },
  /* Defines how many numbers should be grouped together (usually for the thousand separator)
   * - "2",  results in 99,99,99,99 Group by two
   * - "2t", results in 99,99,99,999 India's lakhs
   * - "2s", results in 99,999,99,99,999 India's lakhs scaled
   * - "3",  results in 999,999,999 (default)
   * - "4",  results in 9999,9999,9999 used in some Asian countries
   * Note: This option does not accept other grouping choice.
   */
  digitalGroupSpacing: {
    two: "2",
    twoThree: "2t",
    twoScaled: "2s",
    three: "3",
    four: "4"
  },
  /* Defines the thousand grouping separator character
   * Example : If `'.'` is set, then you'll get `'1.234.567'`
   */
  digitGroupSeparator: {
    comma: ",",
    dot: ".",
    normalSpace: " ",
    thinSpace: " ",
    narrowNoBreakSpace: " ",
    noBreakSpace: " ",
    noSeparator: "",
    apostrophe: `'`,
    arabicThousandsSeparator: "٬",
    dotAbove: "˙",
    privateUseTwo: "’"
    // \u0092
  },
  /* The `divisorWhenUnfocused` divide the element value on focus.
   * On blur, the element value is multiplied back.
   *
   * Example : Display percentages using { divisorWhenUnfocused: 100 } (or directly in the Html with `<input data-divisor-when-unfocused="100">`)
   * The divisor value does not need to be an integer, but please understand that Javascript has limited accuracy in math ; use with caution.
   * Note: The `getNumericString` method returns the full value, including the 'hidden' decimals.
   */
  divisorWhenUnfocused: {
    none: null,
    percentage: 100,
    permille: 1e3,
    basisPoint: 1e4
  },
  /* Defines what should be displayed in the element if the raw value is an empty string ('').
   * - 'focus'  : The currency sign is displayed when the input receives focus (default)
   * - 'press'  : The currency sign is displayed whenever a key is being pressed
   * - 'always' : The currency sign is always displayed
   * - 'zero'   : A zero is displayed ('rounded' with or without a currency sign) if the input has no value on focus out
   * - 'min'    : The minimum value is displayed if the input has no value on focus out
   * - 'max'    : The maximum value is displayed if the input has no value on focus out
   * - 'null'   : When the element is empty, the `rawValue` and the element value/text is set to `null`. This also allows to set the value to `null` using `anElement.set(null)`.
   */
  emptyInputBehavior: {
    focus: "focus",
    press: "press",
    always: "always",
    zero: "zero",
    min: "min",
    max: "max",
    null: "null"
  },
  /* Defines if the custom and native events triggered by AutoNumeric should bubble up or not.
   */
  eventBubbles: {
    bubbles: true,
    doesNotBubble: false
  },
  /* Defines if the custom and native events triggered by AutoNumeric should be cancelable.
   */
  eventIsCancelable: {
    isCancelable: true,
    isNotCancelable: false
  },
  /* This option is the 'strict mode' (aka 'debug' mode), which allows autoNumeric to strictly analyse the options passed, and fails if an unknown options is used in the settings object.
   * You should set that to `true` if you want to make sure you are only using 'pure' autoNumeric settings objects in your code.
   * If you see uncaught errors in the console and your code starts to fail, this means somehow those options gets polluted by another program (which usually happens when using frameworks).
   */
  failOnUnknownOption: {
    fail: true,
    ignore: false
  },
  /* Determine if the default value will be formatted on initialization.
   */
  formatOnPageLoad: {
    format: true,
    // automatically formats the default value on initialization
    doNotFormat: false
    // will not format the default value on initialization
  },
  /* Defines if the 'formula mode' can be activated by the user.
   * If set to `true`, then the user can enter the formula mode by entering the '=' character.
   * He will then be allowed to enter any simple math formula using numeric characters as well as the following operators +, -, *, /, ( and ).
   * The formula mode is closed when the user either validate their math expression using the `Enter` key, or when the element is blurred.
   * If the formula is invalid, the previous valid `rawValue` is set back, and the `autoNumeric:invalidFormula` event is sent.
   * When a valid formula is accepted, then its result is `set()`, and the `autoNumeric:validFormula` event is sent.
   *
   * By default, this mode is disabled.
   */
  formulaMode: {
    enabled: true,
    disabled: false
  },
  /* Set the undo/redo history table size.
   * Each record keeps the raw value as well and the last known caret/selection positions.
   */
  historySize: {
    verySmall: 5,
    small: 10,
    medium: 20,
    large: 50,
    veryLarge: 100,
    insane: Number.MAX_SAFE_INTEGER
  },
  /* Defines the name of the CSS class to use on contenteditable-enabled elements when the value is invalid
   * This is not used when the HTML element used is an input.
   */
  invalidClass: "an-invalid",
  /* Allow the user to 'cancel' and undo the changes he made to the given autonumeric-managed element, by pressing the 'Escape' key.
   * Whenever the user 'validate' the input (either by hitting 'Enter', or blurring the element), the new value is saved for subsequent 'cancellation'.
   *
   * The process :
   *   - save the input value on focus
   *   - if the user change the input value, and hit `Escape`, then the initial value saved on focus is set back
   *   - on the other hand if the user either have used `Enter` to validate (`Enter` throws a change event) his entries, or if the input value has been changed by another script in the mean time, then we save the new input value
   *   - on a successful 'cancel', select the whole value (while respecting the `selectNumberOnly` option)
   *   - bonus; if the value has not changed, hitting 'Esc' just select all the input value (while respecting the `selectNumberOnly` option)
   */
  isCancellable: {
    cancellable: true,
    notCancellable: false
  },
  /* Controls the leading zero behavior
   * - 'allow' : allows leading zeros to be entered. Zeros will be truncated when entering additional digits. On focusout zeros will be deleted
   * - 'deny'  : allows only one leading zero on values that are between 1 and -1
   * - 'keep'  : allows leading zeros to be entered. on focusout zeros will be retained
   */
  leadingZero: {
    allow: "allow",
    deny: "deny",
    keep: "keep"
  },
  /* Defines the maximum possible value a user can enter.
   * Notes:
   * - this value must be a string and use the period for the decimal point
   * - this value needs to be larger than `minimumValue`
   */
  maximumValue: {
    tenTrillions: "10000000000000",
    // 10000 billions
    oneBillion: "1000000000",
    zero: "0"
  },
  /* Defines the minimum possible value a user can enter.
   * Notes:
   * - this value must be a string and use the period for the decimal point
   * - this value needs to be smaller than `maximumValue`
   * - if this is superior to 0, then you'll effectively prevent your user to entirely delete the content of your element
   */
  minimumValue: {
    tenTrillions: "-10000000000000",
    // 10000 billions
    oneBillion: "-1000000000",
    zero: "0"
  },
  /* Allows the user to increment or decrement the element value with the up and down arrow keys.
   * The behavior is similar to the mouse wheel one.
   * The up and down arrow keys behavior can be modified by the `upDownStep` option.
   * This `upDownStep` option can be used in two ways, either by setting:
   * - a 'fixed' step value (`upDownStep : 1000`), or
   * - the 'progressive' string (`upDownStep : 'progressive'`), which will then activate a special mode where the step is automatically calculated based on the element value size.
   */
  modifyValueOnUpDownArrow: {
    modifyValue: true,
    doNothing: false
  },
  /* Allows the user to increment or decrement the element value with the mouse wheel.
   * The behavior is similar to the up/down arrow one.
   * The wheel behavior can be modified by the `wheelStep` option.
   * This `wheelStep` option can be used in two ways, either by setting:
   * - a 'fixed' step value (`wheelStep : 1000`), or
   * - the 'progressive' string (`wheelStep : 'progressive'`), which will then activate a special mode where the step is automatically calculated based on the element value size.
   *
   * Note :
   * You can activate/deactivate the wheel event for each `wheelOn` option value by using the 'Shift' modifier key while using the mouse wheel.
   */
  modifyValueOnWheel: {
    modifyValue: true,
    doNothing: false
  },
  /* Adds brackets on negative values (ie. transforms '-$ 999.99' to '($999.99)')
   * Those brackets are visible only when the field does NOT have the focus.
   * The left and right symbols should be enclosed in quotes and separated by a comma.
   */
  negativeBracketsTypeOnBlur: {
    parentheses: "(,)",
    brackets: "[,]",
    chevrons: "<,>",
    curlyBraces: "{,}",
    angleBrackets: "〈,〉",
    japaneseQuotationMarks: "｢,｣",
    halfBrackets: "⸤,⸥",
    whiteSquareBrackets: "⟦,⟧",
    quotationMarks: "‹,›",
    guillemets: "«,»",
    none: null
    // This is the default value, which deactivate this feature
  },
  /* Placement of the negative/positive sign relative to the `currencySymbol` option.
   *
   * Example:
   * // Default values
   * -1,234.56  => default no options required
   * $-1,234.56 => {currencySymbol: "$", negativePositiveSignPlacement: "r"} // Default if negativePositiveSignPlacement is 'null' and currencySymbol is not empty
   *
   * // Sign on the left hand side of the whole number
   * -$1,234.56 => {currencySymbol: "$"} or {currencySymbol: "$", negativePositiveSignPlacement: "l"}
   * -1,234.56$ => {currencySymbol: "$", currencySymbolPlacement: "s", negativePositiveSignPlacement: "p"} // Default if negativePositiveSignPlacement is 'null' and currencySymbol is not empty
   *
   * // Sign on the right hand side of the whole number
   * 1,234.56-  => {negativePositiveSignPlacement: "s"}
   * $1,234.56- => {currencySymbol: "$", negativePositiveSignPlacement: "s"}
   * 1,234.56-$ => {currencySymbol: "$", currencySymbolPlacement: "s"}
   * 1,234.56$- => {currencySymbol: "$", currencySymbolPlacement: "s", negativePositiveSignPlacement: "r"}
   */
  negativePositiveSignPlacement: {
    prefix: "p",
    suffix: "s",
    left: "l",
    right: "r",
    none: null
  },
  /* Defines the negative sign symbol.
   * It can be a string of only one character.
   */
  negativeSignCharacter: {
    hyphen: "-",
    minus: "−",
    heavyMinus: "➖",
    fullWidthHyphen: "－",
    circledMinus: "⊖",
    squaredMinus: "⊟",
    triangleMinus: "⨺",
    plusMinus: "±",
    minusPlus: "∓",
    dotMinus: "∸",
    minusTilde: "≂",
    not: "¬"
  },
  /*
   * Defines if the negative sign should be toggled when hitting the negative or positive key multiple times.
   * When `toggle` is used, using the same '-' on '+' key will toggle between a positive and negative value.
   * When `doNotToggle` is used, using '-' will always set the value negative, and '+' will always set the value positive.
   */
  negativePositiveSignBehavior: {
    toggle: true,
    doNotToggle: false
  },
  /* Defines if the element should have event listeners activated on it.
   * By default, those event listeners are only added to <input> elements and html element with the `contenteditable` attribute set to `true`, but not on the other html tags.
   * This allows to initialize elements without any event listeners.
   * Warning: Since AutoNumeric will not check the input content after its initialization, using some autoNumeric methods afterwards *will* probably leads to formatting problems.
   */
  noEventListeners: {
    noEvents: true,
    addEvents: false
  },
  /* Manage how autoNumeric react when the user tries to paste an invalid number.
   * - 'error'    : (This is the default behavior) The input value is not changed and an error is output in the console.
   * - 'ignore'   : idem than 'error', but fail silently without outputting any error/warning in the console.
   * - 'clamp'    : if the pasted value is either too small or too big regarding the minimumValue and maximumValue range, then the result is clamped to those limits.
   * - 'truncate' : autoNumeric will insert as many pasted numbers it can at the initial caret/selection, until everything is pasted, or the range limit is hit.
   *                The non-pasted numbers are dropped and therefore not used at all.
   * - 'replace'  : autoNumeric will first insert as many pasted numbers it can at the initial caret/selection, then if the range limit is hit, it will try
   *                to replace one by one the remaining initial numbers (on the right side of the caret) with the rest of the pasted numbers.
   *
   * Note 1 : A paste content starting with a negative sign '-' will be accepted anywhere in the input, and will set the resulting value as a negative number
   * Note 2 : A paste content starting with a number will be accepted, even if the rest is gibberish (ie. '123foobar456').
   *          Only the first number will be used (here '123').
   * Note 3 : The paste event works with the `decimalPlacesShownOnFocus` option too.
   */
  onInvalidPaste: {
    error: "error",
    ignore: "ignore",
    clamp: "clamp",
    truncate: "truncate",
    replace: "replace"
  },
  /* Defines how the value should be formatted when wanting a 'localized' version of it.
   * - null or 'string' => 'nnnn.nn' or '-nnnn.nn' as text type. This is the default behavior.
   * - 'number'         => nnnn.nn or -nnnn.nn as a Number (Warning: this works only for integers inferior to Number.MAX_SAFE_INTEGER)
   * - ',' or '-,'      => 'nnnn,nn' or '-nnnn,nn'
   * - '.-'             => 'nnnn.nn' or 'nnnn.nn-'
   * - ',-'             => 'nnnn,nn' or 'nnnn,nn-'
   *
   * Note: The hyphen '-' is translated to the custom negative sign defined in `negativeSignCharacter`
   */
  outputFormat: {
    string: "string",
    number: "number",
    dot: ".",
    negativeDot: "-.",
    comma: ",",
    negativeComma: "-,",
    dotNegative: ".-",
    commaNegative: ",-",
    none: null
  },
  /* Defines if AutoNumeric should let the user override the minimum and/or maximum limits when he types numbers in the element.
   * - 'ceiling' Strictly adheres to `maximumValue` and ignores the `minimumValue` settings
   *             It allows the user to enter anything between -∞ `and maximumValue`
   *             If `maximumValue` is less than 0, then it will prevent the user emptying the field or typing value above `maximumValue`, making sure the value entered is always valid
   * - 'floor'   Strictly adheres to `minimumValue` and ignores the `maximumValue` settings
   *             It allows the user to enter anything between `minimumValue` and +∞
   *             If `minimumValue` is higher than 0, then it will prevent the user emptying the field or typing value below `minimumValue`, making sure the value entered is always valid
   * - 'ignore'  Ignores both the `minimumValue` and `maximumValue` settings
   *             When using this option, the field will always be valid range-wise
   * - 'invalid' The user can temporarily type out-of-bound values. In doing so, the invalid state is set on the field.
   *             Whenever an invalid value is typed, an 'autoNumeric:invalidValue' event is sent
   *             When the value is correctly set back within the limit boundaries, the invalid state is removed, and the 'autoNumeric:correctedValue' event is sent
   * - 'doNotOverride' Strictly adheres to the `maximumValue` and `minimumValue` settings
   *                   This is the default behavior
   *                   If `0` is out of the min/max range, this will prevent the user clearing the input field, making sure the value entered is always valid
   */
  overrideMinMaxLimits: {
    ceiling: "ceiling",
    floor: "floor",
    ignore: "ignore",
    invalid: "invalid",
    doNotOverride: null
  },
  /* Defines the positive sign symbol.
   * It can be a string of only one character.
   * This is shown only if `showPositiveSign` is set to `true`.
   */
  positiveSignCharacter: {
    plus: "+",
    fullWidthPlus: "＋",
    heavyPlus: "➕",
    doublePlus: "⧺",
    triplePlus: "⧻",
    circledPlus: "⊕",
    squaredPlus: "⊞",
    trianglePlus: "⨹",
    plusMinus: "±",
    minusPlus: "∓",
    dotPlus: "∔",
    altHebrewPlus: "﬩",
    normalSpace: " ",
    thinSpace: " ",
    narrowNoBreakSpace: " ",
    noBreakSpace: " "
  },
  /* The `rawValueDivisor` divides the formatted value shown in the AutoNumeric element and store the result in `rawValue`.
   * @example { rawValueDivisor: '100' } or <input data-raw-value-divisor="100">
   * Given the `0.01234` raw value, the formatted value will be displayed as `'1.234'`.
   * This is useful when displaying percentage for instance, and avoid the need to divide/multiply by 100 between the number shown and the raw value.
   */
  rawValueDivisor: {
    none: null,
    percentage: 100,
    permille: 1e3,
    basisPoint: 1e4
  },
  /* Defines if the element (`<input>` or another allowed html tag) should be set as read-only on initialization.
   * When set to `true`, then:
   * - the `readonly` html property is added to the <input> element on initialization, or
   * - the `contenteditable` attribute is set to `false` on non-input elements.
   */
  readOnly: {
    readOnly: true,
    readWrite: false
  },
  /* Defines the rounding method to use.
   * roundingMethod: "S", Round-Half-Up Symmetric (default)
   * roundingMethod: "A", Round-Half-Up Asymmetric
   * roundingMethod: "s", Round-Half-Down Symmetric (lower case s)
   * roundingMethod: "a", Round-Half-Down Asymmetric (lower case a)
   * roundingMethod: "B", Round-Half-Even "Bankers Rounding"
   * roundingMethod: "U", Round Up "Round-Away-From-Zero"
   * roundingMethod: "D", Round Down "Round-Toward-Zero" - same as truncate
   * roundingMethod: "C", Round to Ceiling "Toward Positive Infinity"
   * roundingMethod: "F", Round to Floor "Toward Negative Infinity"
   * roundingMethod: "N05" Rounds to the nearest .05 => same as "CHF" used in 1.9X and still valid
   * roundingMethod: "U05" Rounds up to next .05
   * roundingMethod: "D05" Rounds down to next .05
   */
  roundingMethod: {
    halfUpSymmetric: "S",
    halfUpAsymmetric: "A",
    halfDownSymmetric: "s",
    halfDownAsymmetric: "a",
    halfEvenBankersRounding: "B",
    upRoundAwayFromZero: "U",
    downRoundTowardZero: "D",
    toCeilingTowardPositiveInfinity: "C",
    toFloorTowardNegativeInfinity: "F",
    toNearest05: "N05",
    toNearest05Alt: "CHF",
    upToNext05: "U05",
    downToNext05: "D05"
  },
  /* Set to `true` to allow the `decimalPlacesShownOnFocus` value to be saved with sessionStorage
   * If IE 6 or 7 is detected, the value will be saved as a session cookie.
   */
  saveValueToSessionStorage: {
    save: true,
    doNotSave: false
  },
  /* Determine if the select all keyboard command will select the complete input text, or only the input numeric value
   * Note : If the currency symbol is between the numeric value and the negative sign, only the numeric value will be selected
   */
  selectNumberOnly: {
    selectNumbersOnly: true,
    selectAll: false
  },
  /* Defines if the element value should be selected on focus.
   * Note: The selection is done using the `selectNumberOnly` option.
   */
  selectOnFocus: {
    select: true,
    doNotSelect: false
  },
  /* Defines how the serialize functions should treat the spaces.
   * Those spaces ' ' can either be converted to the plus sign '+', which is the default, or to '%20'.
   * Both values being valid per the spec (http://www.w3.org/Addressing/URL/uri-spec.html).
   * Also see the summed up answer on http://stackoverflow.com/a/33939287.
   *
   * tl;dr : Spaces should be converted to '%20' before the '?' sign, then converted to '+' after.
   * In our case since we serialize the query, we use '+' as the default (but allow the user to get back the old *wrong* behavior).
   */
  serializeSpaces: {
    plus: "+",
    percent: "%20"
  },
  /* Defines if the element value should be converted to the raw value on focus (and back to the formatted on blur).
   * If set to `true`, then autoNumeric remove the thousand separator, currency symbol and suffix on focus.
   * Example:
   * If the input value is '$ 1,999.88 suffix', on focus it becomes '1999.88' and back to '$ 1,999.88 suffix' on blur.
   */
  showOnlyNumbersOnFocus: {
    onlyNumbers: true,
    showAll: false
  },
  /* Allow the positive sign symbol `+` to be displayed for positive numbers.
   * By default, this positive sign is not shown.
   * The sign placement is controlled by the 'negativePositiveSignPlacement' option, mimicking the negative sign placement rules.
   */
  showPositiveSign: {
    show: true,
    hide: false
  },
  /* Defines if warnings should be shown in the console.
   * Those warnings can be ignored, but are usually printed when something could be improved by the user (ie. option conflicts).
   */
  showWarnings: {
    show: true,
    // All warning are shown
    hide: false
    // No warnings are shown, only the thrown errors
  },
  /* Defines the rules that calculate the CSS class(es) to apply on the element, based on the raw unformatted value.
   * This can also be used to call callbacks whenever the `rawValue` is updated.
   * Important: all callbacks must return `null` if no ranges/userDefined classes are selected
   * @example
   * {
   *     positive   : 'autoNumeric-positive', // Or `null` to not use it
   *     negative   : 'autoNumeric-negative',
   *     ranges     : [
   *         { min: 0, max: 25, class: 'autoNumeric-red' },
   *         { min: 25, max: 50, class: 'autoNumeric-orange' },
   *         { min: 50, max: 75, class: 'autoNumeric-yellow' },
   *         { min: 75, max: Number.MAX_SAFE_INTEGER, class: 'autoNumeric-green' },
   *     ],
   *     userDefined: [
   *         // If 'classes' is a string, set it if `true`, remove it if `false`
   *         { callback: rawValue => { return true; }, classes: 'thisIsTrue' },
   *         // If 'classes' is an array with only 2 elements, set the first class if `true`, the second if `false`
   *         { callback: rawValue => rawValue % 2 === 0, classes: ['autoNumeric-even', 'autoNumeric-odd'] },
   *         // Return only one index to use on the `classes` array (here, 'class3')
   *         { callback: rawValue => { return 2; }, classes: ['class1', 'class2', 'class3'] },
   *         // Return an array of indexes to use on the `classes` array (here, 'class1' and 'class3')
   *         { callback: rawValue => { return [0, 2]; }, classes: ['class1', 'class2', 'class3'] },
   *         // If 'classes' is `undefined` or `null`, then the callback is called with the AutoNumeric object passed as a parameter
   *         { callback: anElement => { return anElement.getFormatted(); } },
   *     ],
   * }
   */
  styleRules: {
    none: null,
    positiveNegative: {
      positive: "autoNumeric-positive",
      negative: "autoNumeric-negative"
    },
    range0To100With4Steps: {
      ranges: [
        { min: 0, max: 25, class: "autoNumeric-red" },
        { min: 25, max: 50, class: "autoNumeric-orange" },
        { min: 50, max: 75, class: "autoNumeric-yellow" },
        { min: 75, max: 100, class: "autoNumeric-green" }
      ]
    },
    evenOdd: {
      userDefined: [
        { callback: (rawValue) => rawValue % 2 === 0, classes: ["autoNumeric-even", "autoNumeric-odd"] }
      ]
    },
    rangeSmallAndZero: {
      userDefined: [
        {
          callback: (rawValue) => {
            if (rawValue >= -1 && rawValue < 0) {
              return 0;
            }
            if (Number(rawValue) === 0) {
              return 1;
            }
            if (rawValue > 0 && rawValue <= 1) {
              return 2;
            }
            return null;
          },
          classes: [
            "autoNumeric-small-negative",
            "autoNumeric-zero",
            "autoNumeric-small-positive"
          ]
        }
      ]
    }
  },
  /* Add a text on the right hand side of the element value.
   * This suffix text can have any characters in its string, except numeric characters and the negative/positive sign.
   * Example: ' dollars'
   */
  suffixText: {
    none: "",
    percentage: "%",
    permille: "‰",
    basisPoint: "‱"
  },
  /* The three options (divisorWhenUnfocused, decimalPlacesShownOnBlur & symbolWhenUnfocused) handle scaling of the input when the input does not have focus
   * Please note that the non-scaled value is held in data and it is advised that you use the `saveValueToSessionStorage` option to ensure retaining the value
   * ["divisor", "decimal places", "symbol"]
   * Example: with the following options set {divisorWhenUnfocused: '1000', decimalPlacesShownOnBlur: '1', symbolWhenUnfocused: ' K'}
   * Example: focusin value "1,111.11" focusout value "1.1 K"
   */
  /* The `symbolWhenUnfocused` option is a symbol placed as a suffix when not in focus.
   * This is optional too.
   */
  symbolWhenUnfocused: {
    none: null,
    percentage: "%",
    permille: "‰",
    basisPoint: "‱"
  },
  /* Defines if the element value should be unformatted when the user hover his mouse over it while holding the `Alt` key.
   * Unformatting there means that this removes any non-number characters and displays the *raw* value, as understood by Javascript (ie. `12.34` is a valid number, while `12,34` is not).
   *
   * We reformat back before anything else if :
   * - the user focus on the element by tabbing or clicking into it,
   * - the user releases the `Alt` key, and
   * - if we detect a mouseleave event.
   *
   * We unformat again if :
   * - while the mouse is over the element, the user hit `Alt` again
   */
  unformatOnHover: {
    unformat: true,
    doNotUnformat: false
    //TODO Rename to `keepFormat`
  },
  /* Removes the formatting and use the raw value in each autoNumeric elements of the parent form element, on the form `submit` event.
   * The output format is a numeric string (nnnn.nn or -nnnn.nn).
   */
  unformatOnSubmit: {
    unformat: true,
    keepCurrentValue: false
  },
  /* That option is linked to the `modifyValueOnUpDownArrow` one and will only be used if the latter is set to `true`.
   * This option will modify the up/down arrow behavior and can be used in two ways, either by setting :
   * - a 'fixed' step value (a positive float or integer number (ex: `1000`)), or
   * - the `'progressive'` string.
   *
   * The 'fixed' mode always increment/decrement the element value by that amount, while respecting the `minimumValue` and `maximumValue` settings.
   * The 'progressive' mode will increment/decrement the element value based on its current value. The bigger the number, the bigger the step, and vice versa.
   */
  upDownStep: {
    progressive: "progressive"
  },
  /* Provides a way for automatically replacing the formatted value with a pre-defined string, when the raw value is equal to a specific value
   * Here you can specify as many 'conversion' as needed.
   */
  valuesToStrings: {
    none: null,
    zeroDash: {
      0: "-"
    },
    oneAroundZero: {
      "-1": "Min",
      1: "Max"
    }
  },
  /* Defines if the AutoNumeric element should watch external changes made without using `.set()`, but by using the basic `aNElement.node().value = 42` notation.
   * If set to `watch`, then AutoNumeric will format the new value using `.set()` internally.
   * Otherwise it will neither format it, nor save it in the history.
   */
  watchExternalChanges: {
    watch: true,
    doNotWatch: false
  },
  /* Defines when the wheel event will increment or decrement the element value.
   * When set to `'focus'`, the AutoNumeric-managed element needs to be focused for the wheel event to change the value.
   * When set to `'hover'`, using the wheel event while the mouse is hovering the element is sufficient (no focus needed).
   *
   * Note :
   * When `wheelOn` is set to `'focus'`, you can use the 'Shift' modifier key while using the mouse wheel in order to temporarily activate the increment/decrement feature even if the element is not focused.
   * When `wheelOn` is set to `'hover'`, you can use the 'Shift' modifier key while using the mouse wheel in order to temporarily disable the increment/decrement feature even if the element is not hovered.
   */
  wheelOn: {
    focus: "focus",
    hover: "hover"
  },
  /* That option is linked to the `modifyValueOnWheel` one and will only be used if the latter is set to `true`.
   * This option will modify the wheel behavior and can be used in two ways, either by setting :
   * - a 'fixed' step value (a positive float or integer (ex: number `1000`)), or
   * - the `'progressive'` string.
   *
   * The 'fixed' mode always increment/decrement the element value by that amount, while respecting the `minimumValue` and `maximumValue` settings.
   * The 'progressive' mode will increment/decrement the element value based on its current value. The bigger the number, the bigger the step, and vice versa.
   */
  wheelStep: {
    progressive: "progressive"
  }
};
function freezeOptions(options) {
  Object.getOwnPropertyNames(options).forEach((optionName) => {
    if (optionName === "valuesToStrings") {
      const vsProps = Object.getOwnPropertyNames(options.valuesToStrings);
      vsProps.forEach((valuesToStringObjectName) => {
        if (options.valuesToStrings[valuesToStringObjectName] !== null) {
          Object.freeze(options.valuesToStrings[valuesToStringObjectName]);
        }
      });
    } else if (optionName !== "styleRules") {
      if (options[optionName] !== null) {
        Object.freeze(options[optionName]);
      }
    }
  });
  return Object.freeze(options);
}
freezeOptions(AutoNumeric.options);
Object.defineProperty(AutoNumeric, "options", { configurable: false, writable: false });
AutoNumeric.defaultSettings = {
  allowDecimalPadding: AutoNumeric.options.allowDecimalPadding.always,
  alwaysAllowDecimalCharacter: AutoNumeric.options.alwaysAllowDecimalCharacter.doNotAllow,
  caretPositionOnFocus: AutoNumeric.options.caretPositionOnFocus.doNoForceCaretPosition,
  createLocalList: AutoNumeric.options.createLocalList.createList,
  currencySymbol: AutoNumeric.options.currencySymbol.none,
  currencySymbolPlacement: AutoNumeric.options.currencySymbolPlacement.prefix,
  decimalCharacter: AutoNumeric.options.decimalCharacter.dot,
  decimalCharacterAlternative: AutoNumeric.options.decimalCharacterAlternative.none,
  decimalPlaces: AutoNumeric.options.decimalPlaces.two,
  decimalPlacesRawValue: AutoNumeric.options.decimalPlacesRawValue.useDefault,
  decimalPlacesShownOnBlur: AutoNumeric.options.decimalPlacesShownOnBlur.useDefault,
  decimalPlacesShownOnFocus: AutoNumeric.options.decimalPlacesShownOnFocus.useDefault,
  defaultValueOverride: AutoNumeric.options.defaultValueOverride.doNotOverride,
  digitalGroupSpacing: AutoNumeric.options.digitalGroupSpacing.three,
  digitGroupSeparator: AutoNumeric.options.digitGroupSeparator.comma,
  divisorWhenUnfocused: AutoNumeric.options.divisorWhenUnfocused.none,
  emptyInputBehavior: AutoNumeric.options.emptyInputBehavior.focus,
  eventBubbles: AutoNumeric.options.eventBubbles.bubbles,
  eventIsCancelable: AutoNumeric.options.eventIsCancelable.isCancelable,
  failOnUnknownOption: AutoNumeric.options.failOnUnknownOption.ignore,
  formatOnPageLoad: AutoNumeric.options.formatOnPageLoad.format,
  formulaMode: AutoNumeric.options.formulaMode.disabled,
  historySize: AutoNumeric.options.historySize.medium,
  invalidClass: AutoNumeric.options.invalidClass,
  isCancellable: AutoNumeric.options.isCancellable.cancellable,
  leadingZero: AutoNumeric.options.leadingZero.deny,
  maximumValue: AutoNumeric.options.maximumValue.tenTrillions,
  minimumValue: AutoNumeric.options.minimumValue.tenTrillions,
  modifyValueOnUpDownArrow: AutoNumeric.options.modifyValueOnUpDownArrow.modifyValue,
  modifyValueOnWheel: AutoNumeric.options.modifyValueOnWheel.modifyValue,
  negativeBracketsTypeOnBlur: AutoNumeric.options.negativeBracketsTypeOnBlur.none,
  negativePositiveSignPlacement: AutoNumeric.options.negativePositiveSignPlacement.none,
  negativeSignCharacter: AutoNumeric.options.negativeSignCharacter.hyphen,
  negativePositiveSignBehavior: AutoNumeric.options.negativePositiveSignBehavior.doNotToggle,
  noEventListeners: AutoNumeric.options.noEventListeners.addEvents,
  //TODO Shouldn't we use `truncate` as the default value?
  onInvalidPaste: AutoNumeric.options.onInvalidPaste.error,
  outputFormat: AutoNumeric.options.outputFormat.none,
  overrideMinMaxLimits: AutoNumeric.options.overrideMinMaxLimits.doNotOverride,
  positiveSignCharacter: AutoNumeric.options.positiveSignCharacter.plus,
  rawValueDivisor: AutoNumeric.options.rawValueDivisor.none,
  readOnly: AutoNumeric.options.readOnly.readWrite,
  roundingMethod: AutoNumeric.options.roundingMethod.halfUpSymmetric,
  saveValueToSessionStorage: AutoNumeric.options.saveValueToSessionStorage.doNotSave,
  selectNumberOnly: AutoNumeric.options.selectNumberOnly.selectNumbersOnly,
  selectOnFocus: AutoNumeric.options.selectOnFocus.select,
  serializeSpaces: AutoNumeric.options.serializeSpaces.plus,
  showOnlyNumbersOnFocus: AutoNumeric.options.showOnlyNumbersOnFocus.showAll,
  showPositiveSign: AutoNumeric.options.showPositiveSign.hide,
  showWarnings: AutoNumeric.options.showWarnings.show,
  styleRules: AutoNumeric.options.styleRules.none,
  suffixText: AutoNumeric.options.suffixText.none,
  symbolWhenUnfocused: AutoNumeric.options.symbolWhenUnfocused.none,
  unformatOnHover: AutoNumeric.options.unformatOnHover.unformat,
  unformatOnSubmit: AutoNumeric.options.unformatOnSubmit.keepCurrentValue,
  upDownStep: "1",
  // To mimic the behavior of 'numeric'-typed input
  valuesToStrings: AutoNumeric.options.valuesToStrings.none,
  watchExternalChanges: AutoNumeric.options.watchExternalChanges.doNotWatch,
  wheelOn: AutoNumeric.options.wheelOn.focus,
  wheelStep: AutoNumeric.options.wheelStep.progressive
};
Object.freeze(AutoNumeric.defaultSettings);
Object.defineProperty(AutoNumeric, "defaultSettings", { configurable: false, writable: false });
const euro = {
  // Français
  digitGroupSeparator: AutoNumeric.options.digitGroupSeparator.dot,
  // or '\u202f'
  decimalCharacter: AutoNumeric.options.decimalCharacter.comma,
  decimalCharacterAlternative: AutoNumeric.options.decimalCharacterAlternative.dot,
  currencySymbol: " €",
  currencySymbolPlacement: AutoNumeric.options.currencySymbolPlacement.suffix,
  negativePositiveSignPlacement: AutoNumeric.options.negativePositiveSignPlacement.prefix
};
const dollar = {
  digitGroupSeparator: AutoNumeric.options.digitGroupSeparator.comma,
  decimalCharacter: AutoNumeric.options.decimalCharacter.dot,
  currencySymbol: AutoNumeric.options.currencySymbol.dollar,
  currencySymbolPlacement: AutoNumeric.options.currencySymbolPlacement.prefix,
  negativePositiveSignPlacement: AutoNumeric.options.negativePositiveSignPlacement.right
};
const japanese = {
  // 日本語
  digitGroupSeparator: AutoNumeric.options.digitGroupSeparator.comma,
  decimalCharacter: AutoNumeric.options.decimalCharacter.dot,
  currencySymbol: AutoNumeric.options.currencySymbol.yen,
  currencySymbolPlacement: AutoNumeric.options.currencySymbolPlacement.prefix,
  negativePositiveSignPlacement: AutoNumeric.options.negativePositiveSignPlacement.right
};
const euroF = AutoNumericHelper.cloneObject(euro);
euroF.formulaMode = AutoNumeric.options.formulaMode.enabled;
const euroPos = AutoNumericHelper.cloneObject(euro);
euroPos.minimumValue = 0;
const euroNeg = AutoNumericHelper.cloneObject(euro);
euroNeg.maximumValue = 0;
euroNeg.negativePositiveSignPlacement = AutoNumeric.options.negativePositiveSignPlacement.prefix;
const euroSpace = AutoNumericHelper.cloneObject(euro);
euroSpace.digitGroupSeparator = AutoNumeric.options.digitGroupSeparator.normalSpace;
const euroSpacePos = AutoNumericHelper.cloneObject(euroSpace);
euroSpacePos.minimumValue = 0;
const euroSpaceNeg = AutoNumericHelper.cloneObject(euroSpace);
euroSpaceNeg.maximumValue = 0;
euroSpaceNeg.negativePositiveSignPlacement = AutoNumeric.options.negativePositiveSignPlacement.prefix;
const percentageEU2dec = AutoNumericHelper.cloneObject(euro);
percentageEU2dec.currencySymbol = AutoNumeric.options.currencySymbol.none;
percentageEU2dec.suffixText = ` ${AutoNumeric.options.suffixText.percentage}`;
percentageEU2dec.wheelStep = 1e-4;
percentageEU2dec.rawValueDivisor = AutoNumeric.options.rawValueDivisor.percentage;
const percentageEU2decPos = AutoNumericHelper.cloneObject(percentageEU2dec);
percentageEU2decPos.minimumValue = 0;
const percentageEU2decNeg = AutoNumericHelper.cloneObject(percentageEU2dec);
percentageEU2decNeg.maximumValue = 0;
percentageEU2decNeg.negativePositiveSignPlacement = AutoNumeric.options.negativePositiveSignPlacement.prefix;
const percentageEU3dec = AutoNumericHelper.cloneObject(percentageEU2dec);
percentageEU3dec.decimalPlaces = 3;
const percentageEU3decPos = AutoNumericHelper.cloneObject(percentageEU2decPos);
percentageEU3decPos.decimalPlaces = 3;
const percentageEU3decNeg = AutoNumericHelper.cloneObject(percentageEU2decNeg);
percentageEU3decNeg.decimalPlaces = 3;
const dollarF = AutoNumericHelper.cloneObject(dollar);
dollarF.formulaMode = AutoNumeric.options.formulaMode.enabled;
const dollarPos = AutoNumericHelper.cloneObject(dollar);
dollarPos.minimumValue = 0;
const dollarNeg = AutoNumericHelper.cloneObject(dollar);
dollarNeg.maximumValue = 0;
dollarNeg.negativePositiveSignPlacement = AutoNumeric.options.negativePositiveSignPlacement.prefix;
const dollarNegBrackets = AutoNumericHelper.cloneObject(dollarNeg);
dollarNegBrackets.negativeBracketsTypeOnBlur = AutoNumeric.options.negativeBracketsTypeOnBlur.parentheses;
const percentageUS2dec = AutoNumericHelper.cloneObject(dollar);
percentageUS2dec.currencySymbol = AutoNumeric.options.currencySymbol.none;
percentageUS2dec.suffixText = AutoNumeric.options.suffixText.percentage;
percentageUS2dec.wheelStep = 1e-4;
percentageUS2dec.rawValueDivisor = AutoNumeric.options.rawValueDivisor.percentage;
const percentageUS2decPos = AutoNumericHelper.cloneObject(percentageUS2dec);
percentageUS2decPos.minimumValue = 0;
const percentageUS2decNeg = AutoNumericHelper.cloneObject(percentageUS2dec);
percentageUS2decNeg.maximumValue = 0;
percentageUS2decNeg.negativePositiveSignPlacement = AutoNumeric.options.negativePositiveSignPlacement.prefix;
const percentageUS3dec = AutoNumericHelper.cloneObject(percentageUS2dec);
percentageUS3dec.decimalPlaces = 3;
const percentageUS3decPos = AutoNumericHelper.cloneObject(percentageUS2decPos);
percentageUS3decPos.decimalPlaces = 3;
const percentageUS3decNeg = AutoNumericHelper.cloneObject(percentageUS2decNeg);
percentageUS3decNeg.decimalPlaces = 3;
const turkish = AutoNumericHelper.cloneObject(euro);
turkish.currencySymbol = AutoNumeric.options.currencySymbol.lira;
AutoNumeric.predefinedOptions = {
  euro,
  euroPos,
  euroNeg,
  euroSpace,
  euroSpacePos,
  euroSpaceNeg,
  percentageEU2dec,
  percentageEU2decPos,
  percentageEU2decNeg,
  percentageEU3dec,
  percentageEU3decPos,
  percentageEU3decNeg,
  dollar,
  dollarPos,
  dollarNeg,
  dollarNegBrackets,
  percentageUS2dec,
  percentageUS2decPos,
  percentageUS2decNeg,
  percentageUS3dec,
  percentageUS3decPos,
  percentageUS3decNeg,
  French: euro,
  // Français
  Spanish: euro,
  // Español
  NorthAmerican: dollar,
  British: {
    digitGroupSeparator: AutoNumeric.options.digitGroupSeparator.comma,
    decimalCharacter: AutoNumeric.options.decimalCharacter.dot,
    currencySymbol: AutoNumeric.options.currencySymbol.pound,
    currencySymbolPlacement: AutoNumeric.options.currencySymbolPlacement.prefix,
    negativePositiveSignPlacement: AutoNumeric.options.negativePositiveSignPlacement.right
  },
  Swiss: {
    // Suisse
    digitGroupSeparator: AutoNumeric.options.digitGroupSeparator.apostrophe,
    decimalCharacter: AutoNumeric.options.decimalCharacter.dot,
    currencySymbol: " CHF",
    currencySymbolPlacement: AutoNumeric.options.currencySymbolPlacement.suffix,
    negativePositiveSignPlacement: AutoNumeric.options.negativePositiveSignPlacement.prefix
  },
  Japanese: japanese,
  // 日本語
  Chinese: japanese,
  // 中国語 (Chinese)
  Brazilian: {
    digitGroupSeparator: AutoNumeric.options.digitGroupSeparator.dot,
    decimalCharacter: AutoNumeric.options.decimalCharacter.comma,
    currencySymbol: AutoNumeric.options.currencySymbol.real,
    currencySymbolPlacement: AutoNumeric.options.currencySymbolPlacement.prefix,
    negativePositiveSignPlacement: AutoNumeric.options.negativePositiveSignPlacement.right
  },
  Turkish: turkish,
  dotDecimalCharCommaSeparator: {
    digitGroupSeparator: AutoNumeric.options.digitGroupSeparator.comma,
    decimalCharacter: AutoNumeric.options.decimalCharacter.dot
  },
  commaDecimalCharDotSeparator: {
    digitGroupSeparator: AutoNumeric.options.digitGroupSeparator.dot,
    decimalCharacter: AutoNumeric.options.decimalCharacter.comma,
    decimalCharacterAlternative: AutoNumeric.options.decimalCharacterAlternative.dot
  },
  integer: {
    decimalPlaces: 0
  },
  integerPos: {
    minimumValue: AutoNumeric.options.minimumValue.zero,
    decimalPlaces: 0
  },
  integerNeg: {
    maximumValue: AutoNumeric.options.maximumValue.zero,
    decimalPlaces: 0
  },
  float: {
    allowDecimalPadding: AutoNumeric.options.allowDecimalPadding.never
  },
  floatPos: {
    allowDecimalPadding: AutoNumeric.options.allowDecimalPadding.never,
    minimumValue: AutoNumeric.options.minimumValue.zero,
    maximumValue: AutoNumeric.options.maximumValue.tenTrillions
  },
  floatNeg: {
    allowDecimalPadding: AutoNumeric.options.allowDecimalPadding.never,
    minimumValue: AutoNumeric.options.minimumValue.tenTrillions,
    maximumValue: AutoNumeric.options.maximumValue.zero
  },
  numeric: {
    digitGroupSeparator: AutoNumeric.options.digitGroupSeparator.noSeparator,
    decimalCharacter: AutoNumeric.options.decimalCharacter.dot,
    currencySymbol: AutoNumeric.options.currencySymbol.none
  },
  numericPos: {
    digitGroupSeparator: AutoNumeric.options.digitGroupSeparator.noSeparator,
    decimalCharacter: AutoNumeric.options.decimalCharacter.dot,
    currencySymbol: AutoNumeric.options.currencySymbol.none,
    minimumValue: AutoNumeric.options.minimumValue.zero,
    maximumValue: AutoNumeric.options.maximumValue.tenTrillions
  },
  numericNeg: {
    digitGroupSeparator: AutoNumeric.options.digitGroupSeparator.noSeparator,
    decimalCharacter: AutoNumeric.options.decimalCharacter.dot,
    currencySymbol: AutoNumeric.options.currencySymbol.none,
    minimumValue: AutoNumeric.options.minimumValue.tenTrillions,
    maximumValue: AutoNumeric.options.maximumValue.zero
  }
};
Object.getOwnPropertyNames(AutoNumeric.predefinedOptions).forEach((optionName) => {
  Object.freeze(AutoNumeric.predefinedOptions[optionName]);
});
Object.freeze(AutoNumeric.predefinedOptions);
Object.defineProperty(AutoNumeric, "predefinedOptions", { configurable: false, writable: false });
const _hoisted_1$4 = ["id", "name"];
const _sfc_main$5 = {
  __name: "simple-numeric",
  props: /* @__PURE__ */ mergeModels({
    id: {
      type: String,
      default: null
    },
    numericType: {
      type: String,
      default: "float"
    }
  }, {
    "modelValue": {},
    "modelModifiers": {},
    "formattedValue": {},
    "formattedValueModifiers": {}
  }),
  emits: ["update:modelValue", "update:formattedValue"],
  setup(__props) {
    const props = __props;
    const inputValue = useModel(__props, "modelValue");
    const formattedValue = useModel(__props, "formattedValue");
    const inputElem = ref(null);
    const autoNumericObject = ref(null);
    const autoNumericOptions = computed(() => {
      let options = {
        maximumValue: "100000000000000000",
        emptyInputBehavior: "null"
      };
      if (props.numericType === "integer") {
        options.minimumValue = "0";
        options.decimalPlaces = 0;
        options.decimalCharacter = ",";
        options.digitGroupSeparator = " ";
      } else if (props.numericType === "code") {
        options.minimumValue = "0";
        options.decimalPlaces = 0;
        options.digitGroupSeparator = "";
      } else if (props.numericType === "float" || props.numericType === "numeric") {
        options.decimalCharacter = ",";
        options.digitGroupSeparator = " ";
      } else if (props.numericType === "currency") {
        options.decimalCharacter = ",";
        options.digitGroupSeparator = " ";
      }
      return options;
    });
    onBeforeMount(() => {
      formattedValue.value = JSON.parse(JSON.stringify(inputValue.value));
    });
    onMounted(() => {
      autoNumericObject.value = new AutoNumeric(inputElem.value, autoNumericOptions.value);
    });
    watch(formattedValue, async (newValue, oldValue) => {
      if (typeof oldValue !== "undefined" && newValue !== oldValue) {
        inputValue.value = JSON.parse(JSON.stringify(
          autoNumericObject.value.getNumber()
        ));
      }
    });
    return (_ctx, _cache) => {
      return withDirectives((openBlock(), createElementBlock("input", {
        type: "text",
        id: __props.id,
        name: __props.id,
        "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => formattedValue.value = $event),
        class: normalizeClass(["field-edit", { "field-numeric": __props.numericType !== "code" }]),
        autocomplete: "off",
        ref_key: "inputElem",
        ref: inputElem,
        "on:autoNumeric:rawValueModified": _cache[1] || (_cache[1] = (...args) => _ctx.update && _ctx.update(...args))
      }, null, 42, _hoisted_1$4)), [
        [vModelText, formattedValue.value]
      ]);
    };
  }
};
const simpleNumeric = /* @__PURE__ */ _export_sfc(_sfc_main$5, [["__scopeId", "data-v-7f57c829"]]);
const _hoisted_1$3 = { class: "toggle" };
const _hoisted_2$3 = ["onClick"];
const _hoisted_3$3 = ["id"];
const _sfc_main$4 = {
  __name: "toggle",
  props: /* @__PURE__ */ mergeModels({
    id: {
      type: String,
      default: null
    },
    dataValues: {
      type: String,
      default: "{}"
    }
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props) {
    const { sortList } = useList({});
    const props = __props;
    const inputValue = useModel(__props, "modelValue");
    let list = ref([]);
    onBeforeMount(() => {
      list = initializeOptions();
    });
    function initializeOptions() {
      let option_list = JSON.parse(props.dataValues);
      let list2 = [];
      for (let key in option_list) {
        if (key !== "_" && key !== "null" && option_list.hasOwnProperty(key)) {
          list2.push({ "label": option_list[key], "value": key });
        }
      }
      list2 = sortList(list2);
      return list2;
    }
    function isSelected(value) {
      return value !== null && inputValue.value !== null && value.toString() === inputValue.value.toString();
    }
    function setOption(value) {
      inputValue.value = inputValue.value === value ? null : value;
    }
    return (_ctx, _cache) => {
      return openBlock(), createElementBlock("div", _hoisted_1$3, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(list), (option) => {
          return openBlock(), createElementBlock("div", {
            class: normalizeClass(isSelected(option.value) ? "active" : ""),
            onClick: ($event) => setOption(option.value)
          }, toDisplayString(option.label), 11, _hoisted_2$3);
        }), 256)),
        withDirectives(createBaseVNode("input", {
          type: "hidden",
          id: __props.id,
          "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => inputValue.value = $event)
        }, null, 8, _hoisted_3$3), [
          [vModelText, inputValue.value]
        ])
      ]);
    };
  }
};
const _hoisted_1$2 = {
  key: 0,
  class: "checkbox"
};
const _hoisted_2$2 = ["name", "id", "checked"];
const _hoisted_3$2 = ["for"];
const _hoisted_4$1 = ["name", "id", "checked", "onChange"];
const _hoisted_5$1 = ["for"];
const _sfc_main$3 = {
  __name: "checkbox",
  props: /* @__PURE__ */ mergeModels({
    id: {
      type: String,
      default: null
    },
    dataValues: {
      type: String,
      default: "{}"
    },
    boolean: {
      type: Boolean,
      default: false
    },
    booleanNumeric: {
      type: Boolean,
      default: false
    },
    inline: {
      type: Boolean,
      default: true
    }
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props) {
    const { sortList } = useList({});
    const props = __props;
    const inputValue = useModel(__props, "modelValue");
    let list = ref([]);
    onBeforeMount(() => {
      list = initializeOptions();
    });
    const isChecked = computed(() => {
      return checkValue(inputValue.value);
    });
    function initializeOptions() {
      let list2 = [];
      if (!props.boolean || props.booleanNumeric) {
        let option_list = JSON.parse(props.dataValues);
        for (let key in option_list) {
          if (key !== "_" && key !== "null" && option_list.hasOwnProperty(key)) {
            list2.push({ "label": option_list[key], "value": key });
          }
        }
        list2 = sortList(list2);
      }
      return list2;
    }
    function checkChange(optionValue) {
      if (props.boolean) {
        inputValue.value = !inputValue.value;
      } else if (props.booleanNumeric) {
        inputValue.value = inputValue.value === 1 ? 0 : 1;
      } else {
        let selected_list = JSON.parse(inputValue.value);
        if (selected_list.includes(optionValue)) {
          selected_list = selected_list.filter((item) => item !== optionValue);
        } else {
          selected_list.push(optionValue);
        }
        inputValue.value = JSON.stringify(selected_list);
      }
    }
    function checkValue(value) {
      if (props.boolean) {
        return value === true;
      } else if (props.booleanNumeric) {
        return value === 1;
      }
    }
    function isOptionChecked(value) {
      return JSON.parse(inputValue.value).includes(value);
    }
    return (_ctx, _cache) => {
      return __props.boolean || __props.booleanNumeric ? (openBlock(), createElementBlock("span", _hoisted_1$2, [
        createBaseVNode("input", {
          type: "checkbox",
          name: __props.id,
          id: "bool-check_" + __props.id,
          checked: isChecked.value,
          onChange: _cache[0] || (_cache[0] = ($event) => checkChange())
        }, null, 40, _hoisted_2$2),
        createBaseVNode("label", {
          for: "bool-check_" + __props.id
        }, null, 8, _hoisted_3$2)
      ])) : (openBlock(), createElementBlock("span", {
        key: 1,
        class: normalizeClass(["checkbox list", __props.inline ? "inline" : ""])
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(list), (option) => {
          return openBlock(), createElementBlock("span", null, [
            createBaseVNode("input", {
              type: "checkbox",
              name: __props.id,
              id: "check_" + option.value + "_" + __props.id,
              checked: isOptionChecked(option.value),
              onChange: ($event) => checkChange(option.value)
            }, null, 40, _hoisted_4$1),
            createBaseVNode("label", {
              for: "check_" + option.value + "_" + __props.id
            }, toDisplayString(option.label), 9, _hoisted_5$1)
          ]);
        }), 256))
      ], 2));
    };
  }
};
const _hoisted_1$1 = ["innerHTML"];
const _hoisted_2$1 = { class: "with_header_and_footer" };
const _hoisted_3$1 = { class: "header" };
const _hoisted_4 = { class: "dialog-title" };
const _hoisted_5 = /* @__PURE__ */ createBaseVNode("i", { class: "fa fa-times black" }, null, -1);
const _hoisted_6 = [
  _hoisted_5
];
const _hoisted_7 = { class: "body" };
const _hoisted_8 = { class: "dialog_search" };
const _hoisted_9 = ["onKeydown"];
const _hoisted_10 = ["disabled"];
const _hoisted_11 = {
  key: 0,
  class: "dialog_search_error"
};
const _hoisted_12 = {
  key: 1,
  class: "dialog_search_count"
};
const _hoisted_13 = /* @__PURE__ */ createBaseVNode("br", null, null, -1);
const _hoisted_14 = {
  key: 2,
  class: "dialog_search_loading"
};
const _hoisted_15 = /* @__PURE__ */ createBaseVNode("br", null, null, -1);
const _hoisted_16 = /* @__PURE__ */ createBaseVNode("i", { class: "fa fa-spinner fa-spin fa-2x primary-800" }, null, -1);
const _hoisted_17 = [
  _hoisted_15,
  _hoisted_16
];
const _hoisted_18 = {
  key: 3,
  class: "dialog_search_results_filters"
};
const _hoisted_19 = {
  key: 4,
  class: "striped dialog_search_results"
};
const _hoisted_20 = /* @__PURE__ */ createBaseVNode("th", null, null, -1);
const _hoisted_21 = ["name", "id", "onClick"];
const _hoisted_22 = ["for"];
const _hoisted_23 = { class: "dialog_insert" };
const _hoisted_24 = { class: "dialog_insert_msg" };
const _hoisted_25 = { class: "dialog_insert" };
const _hoisted_26 = { class: "footer" };
const _hoisted_27 = /* @__PURE__ */ createBaseVNode("div", { class: "spacer" }, null, -1);
const _hoisted_28 = ["innerHTML"];
const _hoisted_29 = ["disabled"];
const _sfc_main$2 = {
  __name: "selector-dialog",
  props: /* @__PURE__ */ mergeModels({
    parentId: {
      type: String,
      default: null
    },
    searchUrl: {
      type: String,
      default: null
    },
    labelUrl: {
      type: String,
      default: null
    },
    createUrl: {
      type: String,
      default: null
    },
    withInsert: {
      type: Boolean,
      default: false
    },
    withId: {
      type: Boolean,
      default: false
    },
    keyMinLength: {
      type: Number,
      default: 4
    },
    parentSearchParamsValid: {
      type: Boolean,
      default: false
    }
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props, { expose: __expose }) {
    const Locale2 = window.ModularForms.Mixins.Locale;
    const props = __props;
    const dialogComponent = ref(null);
    const selectorComponent_AfterSearch = inject("afterSearch", null);
    const selectorComponent_SetLabel = inject("setLabel", null);
    const selectorComponent_SetValue = inject("setValue", null);
    const selectorComponent_beforeDialogClose = inject("beforeDialogClose", null);
    const selectorComponent_getSearchParams = inject("getSearchParams", null);
    const selectorComponent_confirmSelection = inject("confirmSelection", null);
    const selectorComponent_validateInsert = inject("validateInsert", null);
    const inputValue = useModel(__props, "modelValue");
    const selectedValue = ref(null);
    let anchorLabel = computed(() => {
      return setLabel();
    });
    const searchKey = ref("");
    const isSearching = ref(false);
    const searchResults = ref({});
    const showList = ref({});
    const totalCount = ref(null);
    const searchExecuted = ref(false);
    const confirmedItem = ref(null);
    const insertedItem = ref(null);
    const errorLabel = ref(null);
    const isSearchable = computed(() => {
      return props.parentSearchParamsValid || searchKey.value.length >= props.keyMinLength;
    });
    const keyLengthErrorMessage = computed(() => {
      return Locale2.getLabel("modular-forms::common.search_key_min_length", { num_chars: props.keyMinLength });
    });
    const recordFoundLabel = computed(() => {
      return Locale2.getLabel("modular-forms::common.record_found", totalCount.value);
    });
    const displaySearch = ref(true);
    const displayInsertText = ref(false);
    const displayInsertObject = ref(false);
    __expose({
      filterShowList,
      displaySearch
    });
    function setLabel() {
      let value = confirmedItem.value !== null && Object.keys(confirmedItem.value).length !== 0 ? confirmedItem.value : inputValue.value;
      if (typeof selectorComponent_SetLabel === "function") {
        return selectorComponent_SetLabel(value);
      }
      return value;
    }
    function resetSelectorDialog() {
      resetSearchResult();
      searchKey.value = "";
      errorLabel.value = null;
      displayInsertText.value = false;
      displayInsertObject.value = false;
      displaySearch.value = true;
      selectedValue.value = null;
      insertedItem.value = props.withId ? {} : null;
    }
    function resetSearchResult() {
      isSearching.value = false;
      searchExecuted.value = false;
      totalCount.value = null;
      selectedValue.value = null;
      searchResults.value = {};
      showList.value = {};
    }
    function closeSelectorDialog() {
      if (typeof selectorComponent_beforeDialogClose === "function") {
        selectorComponent_beforeDialogClose();
      }
      resetSelectorDialog();
      dialogComponent.value.closeDialog();
    }
    function applyAndClose() {
      inputValue.value = typeof selectorComponent_SetValue === "function" ? selectorComponent_SetValue(confirmedItem.value) : confirmedItem.value;
      closeSelectorDialog();
    }
    function setError(label = null) {
      label = label === null ? Locale2.getLabel("modular-forms::common.saved_error") : label;
      errorLabel.value = Locale2.getLabel(label);
    }
    function resetError() {
      errorLabel.value = null;
    }
    function searchParams() {
      let params = {
        "search_key": searchKey.value
      };
      if (typeof selectorComponent_getSearchParams === "function") {
        Object.entries(selectorComponent_getSearchParams()).forEach(([key, value]) => {
          params[key] = value;
        });
      }
      return params;
    }
    function applySearch(event) {
      if (isSearchable) {
        resetSearchResult();
        isSearching.value = true;
        fetch(props.searchUrl, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": window.Laravel.csrfToken
          },
          body: JSON.stringify(searchParams())
        }).then((response) => response.json()).then(function(data) {
          searchResults.value = data["records"];
          showList.value = data["records"];
          totalCount.value = Object.keys(searchResults.value).length;
          searchExecuted.value = true;
          isSearching.value = false;
          if (typeof selectorComponent_AfterSearch === "function") {
            selectorComponent_AfterSearch(data);
          }
        }).catch(function() {
          setError();
        });
      }
    }
    function filterShowList(filters) {
      selectedValue.value = null;
      let filteredList = searchResults.value;
      filteredList = Object.values(filteredList);
      Object.keys(filters).forEach(function(key) {
        filteredList = filterByAttribute(filteredList, filters[key], key);
      });
      showList.value = filteredList;
    }
    function selectResultItem(item) {
      selectedValue.value = item;
    }
    function confirmSelection() {
      confirmedItem.value = selectedValue.value;
      if (typeof selectorComponent_confirmSelection === "function") {
        selectorComponent_confirmSelection();
      } else {
        applyAndClose();
      }
    }
    function enableInsert() {
      displayInsertText.value = !props.withId;
      displayInsertObject.value = props.withId;
      displaySearch.value = false;
    }
    function confirmInsert() {
      resetError();
      confirmedItem.value = insertedItem.value;
      let valid = false;
      if (typeof selectorComponent_validateInsert === "function") {
        valid = selectorComponent_validateInsert(confirmedItem.value);
      } else {
        valid = props.withId ? confirmedItem.value !== {} : confirmedItem.value !== null;
      }
      if (valid) {
        if (props.withId) {
          saveNewItem();
        } else {
          applyAndClose();
        }
      } else {
        setError(Locale2.getLabel("common.validation_error"));
      }
    }
    function saveNewItem() {
      fetch(props.createUrl, {
        method: "post",
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-Token": window.Laravel.csrfToken
        },
        body: JSON.stringify(_this.confirmedItem)
      }).then((response) => response.json()).then(function(data) {
        confirmedItem.value = data.records;
        applyAndClose();
      }).catch(function() {
        setError();
      });
    }
    return (_ctx, _cache) => {
      const _component_dialog_box = resolveComponent("dialog-box");
      return openBlock(), createBlock(_component_dialog_box, {
        ref_key: "dialogComponent",
        ref: dialogComponent
      }, {
        "dialog-anchor": withCtx(() => [
          createBaseVNode("div", {
            class: "field-preview",
            innerHTML: unref(anchorLabel)
          }, null, 8, _hoisted_1$1)
        ]),
        "dialog-content": withCtx(() => [
          createBaseVNode("div", _hoisted_2$1, [
            createBaseVNode("div", _hoisted_3$1, [
              createBaseVNode("div", _hoisted_4, toDisplayString(unref(Locale2).getLabel("modular-forms::common.select_item")), 1),
              createBaseVNode("button", {
                type: "button",
                class: "close",
                onClick: closeSelectorDialog
              }, _hoisted_6)
            ]),
            createBaseVNode("div", _hoisted_7, [
              withDirectives(createBaseVNode("div", _hoisted_8, [
                createBaseVNode("i", null, toDisplayString(unref(Locale2).getLabel("modular-forms::common.search_item")) + ": ", 1),
                withDirectives(createBaseVNode("input", {
                  type: "text",
                  class: "field-edit dialog_search_by_key",
                  autofocus: "",
                  "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => searchKey.value = $event),
                  onKeydown: withKeys(withModifiers(applySearch, ["prevent"]), ["enter"])
                }, null, 40, _hoisted_9), [
                  [vModelText, searchKey.value]
                ]),
                renderSlot(_ctx.$slots, "searchFilters"),
                createBaseVNode("button", {
                  type: "button",
                  class: "btn-nav gray small",
                  onClick: applySearch,
                  disabled: !isSearchable.value
                }, toDisplayString(unref(Locale2).getLabel("modular-forms::common.search")), 9, _hoisted_10),
                searchKey.value.length > 0 && searchKey.value.length < __props.keyMinLength ? (openBlock(), createElementBlock("div", _hoisted_11, [
                  createBaseVNode("i", null, toDisplayString(keyLengthErrorMessage.value), 1)
                ])) : createCommentVNode("", true),
                searchExecuted.value ? (openBlock(), createElementBlock("div", _hoisted_12, [
                  createBaseVNode("b", null, toDisplayString(totalCount.value) + " " + toDisplayString(recordFoundLabel.value), 1),
                  _hoisted_13
                ])) : createCommentVNode("", true),
                isSearching.value ? (openBlock(), createElementBlock("div", _hoisted_14, _hoisted_17)) : createCommentVNode("", true),
                searchExecuted.value ? (openBlock(), createElementBlock("div", _hoisted_18, [
                  renderSlot(_ctx.$slots, "searchResultFilters")
                ])) : createCommentVNode("", true),
                searchExecuted.value ? (openBlock(), createElementBlock("table", _hoisted_19, [
                  createBaseVNode("thead", null, [
                    createBaseVNode("tr", null, [
                      _hoisted_20,
                      renderSlot(_ctx.$slots, "searchResultHeader")
                    ])
                  ]),
                  createBaseVNode("tbody", null, [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(showList.value, (item, index) => {
                      return openBlock(), createElementBlock("tr", null, [
                        createBaseVNode("td", null, [
                          createBaseVNode("input", {
                            type: "radio",
                            name: __props.parentId + "_radio",
                            id: __props.parentId + "_radio" + index,
                            onClick: ($event) => selectResultItem(item)
                          }, null, 8, _hoisted_21),
                          createBaseVNode("label", {
                            for: __props.parentId + "_radio" + index
                          }, null, 8, _hoisted_22)
                        ]),
                        renderSlot(_ctx.$slots, "searchResultItem", { item })
                      ]);
                    }), 256))
                  ])
                ])) : createCommentVNode("", true)
              ], 512), [
                [vShow, displaySearch.value]
              ]),
              withDirectives(createBaseVNode("div", _hoisted_23, [
                withDirectives(createBaseVNode("input", {
                  type: "text",
                  class: "field-edit dialog_insert_freetext",
                  "onUpdate:modelValue": _cache[1] || (_cache[1] = ($event) => insertedItem.value = $event)
                }, null, 512), [
                  [vModelText, insertedItem.value]
                ]),
                createBaseVNode("div", _hoisted_24, [
                  createBaseVNode("i", null, toDisplayString(unref(Locale2).getLabel("modular-forms::common.be_specific_as_possible")), 1)
                ])
              ], 512), [
                [vShow, displayInsertText.value]
              ]),
              withDirectives(createBaseVNode("div", _hoisted_25, [
                renderSlot(_ctx.$slots, "selector-insert")
              ], 512), [
                [vShow, displayInsertObject.value]
              ])
            ]),
            createBaseVNode("div", _hoisted_26, [
              withDirectives(createBaseVNode("button", {
                type: "button",
                class: "btn-nav dark small",
                onClick: enableInsert
              }, toDisplayString(unref(Locale2).getLabel("modular-forms::common.add_if_not_found")), 513), [
                [vShow, __props.withInsert && displaySearch.value]
              ]),
              _hoisted_27,
              createBaseVNode("div", {
                innerHTML: errorLabel.value,
                class: "error text-sm"
              }, null, 8, _hoisted_28),
              createBaseVNode("button", {
                type: "button",
                class: "btn-nav dark small",
                onClick: closeSelectorDialog
              }, toDisplayString(unref(Locale2).getLabel("modular-forms::common.cancel")), 1),
              withDirectives(createBaseVNode("button", {
                type: "button",
                class: "btn-nav dark small",
                onClick: confirmInsert
              }, toDisplayString(unref(Locale2).getLabel("modular-forms::common.add")), 513), [
                [vShow, displayInsertText.value || displayInsertObject.value]
              ]),
              withDirectives(createBaseVNode("button", {
                type: "button",
                class: "btn-nav dark small",
                disabled: selectedValue.value === null,
                onClick: confirmSelection
              }, toDisplayString(unref(Locale2).getLabel("modular-forms::common.confirm_select")), 9, _hoisted_29), [
                [vShow, displaySearch.value]
              ])
            ])
          ])
        ]),
        _: 3
      }, 512);
    };
  }
};
const _sfc_main$1 = {
  __name: "redlist_category",
  props: {
    category: {
      type: String,
      default: null
    },
    compact: {
      type: Boolean,
      default: false
    }
  },
  setup(__props) {
    const Locale2 = window.ModularForms.Mixins.Locale;
    const props = __props;
    const category_plain = Locale2.getLabel("modular-forms::entities.biodiversity.red_list_categories." + props.category);
    return (_ctx, _cache) => {
      const _component_tooltip = resolveComponent("tooltip");
      return openBlock(), createElementBlock("div", null, [
        createBaseVNode("span", {
          class: normalizeClass([__props.compact ? "compact" : "", "red-list_" + __props.category])
        }, toDisplayString(__props.category), 3),
        createVNode(_component_tooltip, null, {
          default: withCtx(() => [
            createTextVNode(toDisplayString(unref(category_plain)), 1)
          ]),
          _: 1
        })
      ]);
    };
  }
};
const _hoisted_1 = ["innerHTML"];
const _hoisted_2 = ["href"];
const _hoisted_3 = ["src"];
const _sfc_main = {
  __name: "selector-species_animal",
  props: /* @__PURE__ */ mergeModels({
    id: {
      type: String,
      default: null
    },
    searchUrl: {
      type: String,
      default: null
    },
    withInsert: {
      type: Boolean,
      default: false
    }
  }, {
    "modelValue": {},
    "modelModifiers": {}
  }),
  emits: ["update:modelValue"],
  setup(__props) {
    const Locale2 = window.ModularForms.Mixins.Locale;
    const selectorDialogComponent = ref(null);
    provide("setLabel", setLabel);
    provide("setValue", setValue);
    provide("afterSearch", afterSearch);
    const inputValue = useModel(__props, "modelValue");
    const filterByClass = ref(null);
    const filterByOrder = ref(null);
    const orders = ref([]);
    const classes = ref([]);
    const assetPath = window.ModularForms.assetPath;
    function setLabel(item) {
      if (typeof item === "object") {
        return item.genus + " " + item.species;
      } else if (item.split("|").length > 3) {
        let taxonomy = item.split("|");
        return taxonomy[4] + " " + taxonomy[5];
      }
      return item;
    }
    function setValue(item) {
      if (typeof item == "object") {
        return item.phylum + "|" + item.class + "|" + item.order + "|" + item.family + "|" + item.genus + "|" + item.species;
      }
      return item;
    }
    function getSpeciesDescription(item) {
      let description = "<div>" + item.class + " " + item.order + " " + item.family + " <b>" + item.genus + " " + item.species + "</b></div>";
      if (hasCommonNames(item)) {
        description += '<div class="common_names"><b><i>' + Locale2.getLabel("modular-forms::entities.biodiversity.common_names") + ":</i></b><br />";
        if (item.common_name_en !== null && item.common_name_en.toLowerCase() !== "null") {
          description += '<div><span class="fi fi-gb"></span> ' + item.common_name_en.replace(/\,/g, ", ") + "</div>";
        }
        if (item.common_name_fr !== null && item.common_name_fr.toLowerCase() !== "null") {
          description += '<div><span class="fi fi-fr"></span> ' + item.common_name_fr.replace(/\,/g, ", ") + "</div>";
        }
        if (item.common_name_sp !== null && item.common_name_sp.toLowerCase() !== "null") {
          description += '<div><span class="fi fi-es"></span> ' + item.common_name_sp.replace(/\,/g, ", ") + "</div>";
        }
        description += "</div>";
      }
      return description;
    }
    function hasCommonNames(item) {
      return item.common_name_en !== null || item.common_name_fr !== null || item.common_name_sp !== null;
    }
    function afterSearch(data) {
      orders.value = data["orders"];
      classes.value = data["classes"];
      filterByOrder.value = null;
      filterByClass.value = null;
    }
    function orderByClass() {
      return filterByClass.value != null ? orders.value[filterByClass.value] : [];
    }
    function filterList(alsoResetOrder) {
      if (alsoResetOrder) {
        filterByOrder.value = null;
      }
      filterByOrder.value = typeof filterByOrder.value === "undefined" ? null : filterByOrder.value;
      selectorDialogComponent.value.filterShowList({
        "class": filterByClass.value,
        "order": filterByOrder.value
      });
    }
    return (_ctx, _cache) => {
      return openBlock(), createBlock(_sfc_main$2, {
        modelValue: inputValue.value,
        "onUpdate:modelValue": _cache[4] || (_cache[4] = ($event) => inputValue.value = $event),
        "parent-id": __props.id,
        "search-url": __props.searchUrl,
        "with-insert": __props.withInsert,
        ref_key: "selectorDialogComponent",
        ref: selectorDialogComponent
      }, {
        searchResultFilters: withCtx(() => [
          createBaseVNode("i", null, toDisplayString(unref(Locale2).getLabel("modular-forms::common.filter_results")) + ": ", 1),
          createTextVNode("   " + toDisplayString(unref(Locale2).getLabel("modular-forms::entities.biodiversity.taxonomy.class")) + " ", 1),
          withDirectives(createBaseVNode("select", {
            "onUpdate:modelValue": _cache[0] || (_cache[0] = ($event) => filterByClass.value = $event),
            onChange: _cache[1] || (_cache[1] = ($event) => filterList(true)),
            class: "field-edit filterByClass"
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(classes.value, (option) => {
              return openBlock(), createElementBlock("option", null, toDisplayString(option), 1);
            }), 256))
          ], 544), [
            [vModelSelect, filterByClass.value]
          ]),
          createTextVNode(" " + toDisplayString(unref(Locale2).getLabel("modular-forms::entities.biodiversity.taxonomy.order")) + " ", 1),
          withDirectives(createBaseVNode("select", {
            "onUpdate:modelValue": _cache[2] || (_cache[2] = ($event) => filterByOrder.value = $event),
            onChange: _cache[3] || (_cache[3] = ($event) => filterList(false)),
            class: "field-edit filterByOrder"
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(orderByClass(), (option) => {
              return openBlock(), createElementBlock("option", null, toDisplayString(option), 1);
            }), 256))
          ], 544), [
            [vModelSelect, filterByOrder.value]
          ])
        ]),
        searchResultHeader: withCtx(() => [
          createBaseVNode("th", null, toDisplayString(unref(Locale2).getLabel("modular-forms::entities.biodiversity.species", 1)), 1),
          createBaseVNode("th", null, toDisplayString(unref(Locale2).getLabel("modular-forms::entities.biodiversity.red_list_category")), 1),
          createBaseVNode("th", null, toDisplayString(unref(Locale2).getLabel("modular-forms::entities.biodiversity.red_list")), 1)
        ]),
        searchResultItem: withCtx(({ item }) => [
          createBaseVNode("td", null, [
            createBaseVNode("span", {
              class: "result_left",
              innerHTML: getSpeciesDescription(item)
            }, null, 8, _hoisted_1)
          ]),
          createBaseVNode("td", null, [
            createVNode(_sfc_main$1, {
              category: item.iucn_redlist_category
            }, null, 8, ["category"])
          ]),
          createBaseVNode("td", null, [
            createBaseVNode("a", {
              target: "_blank",
              href: "http://www.iucnredlist.org/details/" + item.iucn_redlist_id + "/0"
            }, [
              createBaseVNode("img", {
                style: { "display": "inline-block" },
                src: unref(assetPath) + "images/iucn_red_list.png",
                alt: "IUCN RedList"
              }, null, 8, _hoisted_3)
            ], 8, _hoisted_2)
          ])
        ]),
        _: 1
      }, 8, ["modelValue", "parent-id", "search-url", "with-insert"]);
    };
  }
};
const selectorSpeciesAnimal = /* @__PURE__ */ _export_sfc(_sfc_main, [["__scopeId", "data-v-392f85df"]]);
function useDataStatus(component_data) {
  const NOT_APPLICABLE_KEY = "not_applicable";
  const NOT_AVAILABLE_KEY = "not_available";
  const not_applicable = ref(false);
  const not_available = ref(false);
  const enable_not_applicable = unref(component_data.enable_not_applicable);
  const module_type = unref(component_data.module_type);
  const groups = unref(component_data.groups);
  const records = unref(component_data.records);
  const empty_record = unref(component_data.empty_record);
  function initialize() {
    if (enable_not_applicable) {
      let record = module_type.includes("GROUP_") ? records[Object.keys(groups)[0]][0] : records[0];
      record = Object.assign({}, record);
      if (NOT_APPLICABLE_KEY in record) {
        not_applicable.value = record[NOT_APPLICABLE_KEY] === true;
        not_available.value = record[NOT_AVAILABLE_KEY] === true;
      }
    }
  }
  function isNotApplicable() {
    return not_applicable.value;
  }
  function isNotAvailable() {
    return not_available.value;
  }
  function toggle(toggle_key) {
    if (toggle_key === NOT_APPLICABLE_KEY) {
      not_applicable.value = !not_applicable.value;
      return updateRecords(NOT_APPLICABLE_KEY, not_applicable.value);
    } else if (toggle_key === NOT_AVAILABLE_KEY) {
      not_available.value = !not_available.value;
      return updateRecords(NOT_AVAILABLE_KEY, not_available.value);
    }
  }
  function updateRecords(toggle_key, toggle_value) {
    if (module_type.includes("GROUP_")) {
      Object.keys(groups).forEach(function(group_key) {
        records[group_key].splice(1);
        records[group_key][0] = Object.assign({}, empty_record);
        records[group_key][0][toggle_key] = toggle_value === true ? true : null;
      });
    } else {
      records.forEach(function(item, index) {
        if (index === 0) {
          records[index] = Object.assign({}, empty_record);
          records[index][toggle_key] = toggle_value === true ? true : null;
        } else {
          delete records[index];
        }
      });
    }
  }
  return { initialize, isNotApplicable, isNotAvailable, toggle };
}
function useArrangeRecords(component_data) {
  const module_type = unref(component_data.module_type);
  const groups = unref(component_data.groups);
  const group_key_field = unref(component_data.group_key_field);
  const records = unref(component_data.records);
  const empty_record = unref(component_data.empty_record);
  function arrange_by_group() {
    if (module_type.includes("GROUP_")) {
      records.forEach(function(item, index) {
        records[item[group_key_field]] = records[item[group_key_field]] || [];
        let group_index = records[item[group_key_field]].length;
        records[item[group_key_field]][group_index] = records[item[group_key_field]][group_index] || {};
        Object.keys(item).forEach(function(key) {
          records[item[group_key_field]][group_index][key] = JSON.parse(JSON.stringify(item[key]));
        });
        delete records[index];
      });
      Object.keys(groups).forEach(function(key) {
        if (!records[key]) {
          records[key] = [Object.assign({}, empty_record)];
          records[key][0][group_key_field] = key;
        }
      });
    }
  }
  return { arrange_by_group };
}
function useSave(component_data) {
  const module_type = unref(component_data.module_type);
  unref(component_data.groups);
  const records = unref(component_data.records);
  unref(component_data.empty_record);
  const records_backup = readonly(component_data.records_backup);
  function reset2() {
    if (module_type.includes("GROUP_")) ;
    else {
      records.forEach(function(record, index) {
        if (records_backup[index]) {
          records[index] = JSON.parse(JSON.stringify(records_backup[index]));
        } else {
          delete records[index];
        }
      });
    }
    nextTick().then(() => {
      component_data.status.value = "idle";
    });
  }
  function save() {
  }
  return { reset: reset2, save };
}
class Module {
  constructor(input_data = {}) {
    const options = {
      props: {
        module_key: String,
        module_type: String,
        common_fields: Object,
        groups: Object,
        group_key_field: String,
        predefined_values: Object,
        max_rows: Number,
        accordion_title_field: String,
        empty_record: Object,
        records: Object,
        last_update: Object,
        action: String,
        form_id: Number,
        enable_not_applicable: Boolean,
        warning_on_save: String
      },
      setup(props) {
        let records = reactive(props.records);
        let records_backup = JSON.parse(JSON.stringify(toRaw(records)));
        ref(null);
        let status = ref("init");
        let empty_record = props.empty_record;
        Object.keys(empty_record).forEach(function(key) {
          if (props.common_fields.map((f2) => f2["name"]).includes(key)) {
            empty_record[key] = records[0][key];
          }
        });
        const { arrange_by_group } = useArrangeRecords({
          module_type: props.module_type,
          groups: props.groups,
          group_key_field: props.group_key_field,
          empty_record,
          records
        });
        const { initialize: initializeDataStatus, isNotApplicable, isNotAvailable, toggle: toggleDataStatus } = useDataStatus({
          enable_not_applicable: props.enable_not_applicable,
          module_type: props.module_type,
          groups: props.groups,
          empty_record,
          records
        });
        const { reset: resetModule, save: saveModule } = useSave({
          module_type: props.module_type,
          groups: props.groups,
          empty_record,
          records,
          records_backup,
          status
        });
        arrange_by_group();
        initializeDataStatus();
        watch(records, (value) => {
          console.log("records changed");
          if (status.value !== "init") {
            status.value = status.value !== "changed" ? "changed" : status.value;
          }
        });
        onMounted(() => {
          status.value = "idle";
        });
        function toggleNotApplicable() {
          toggleDataStatus("not_applicable");
        }
        function toggleNotAvailable() {
          toggleDataStatus("not_available");
        }
        function addItem() {
        }
        function deleteItem() {
        }
        return {
          status,
          records,
          records_backup,
          // objects from or related to  composables
          isNotApplicable,
          isNotAvailable,
          toggleNotAvailable,
          toggleNotApplicable,
          resetModule,
          // TODO
          saveModule,
          addItem,
          deleteItem
        };
      }
    };
    return createApp(options, input_data).component("tooltip", tooltip).component("dialogBox", _sfc_main$d).component("simpleText", _sfc_main$c).component("simpleTextarea", _sfc_main$b).component("simpleUrl", _sfc_main$a).component("simpleEmail", _sfc_main$9).component("rating", _sfc_main$8).component("dropdown", _sfc_main$7).component("simpleDate", simpleDate).component("simpleNumeric", simpleNumeric).component("toggle", _sfc_main$4).component("checkbox", _sfc_main$3).component("selector-species_animal", selectorSpeciesAnimal).use(createPinia());
  }
}
const Accordion = {
  CLASS_NAME_SHOWING: "showing",
  CLASS_NAME_SHOW: "show",
  toggle(evt) {
    let clicked_accordion_item = evt.target.closest(".accordion-item");
    let accordion = clicked_accordion_item.closest(".accordion");
    let is_current_clicked_item_active = clicked_accordion_item.classList.contains(this.CLASS_NAME_SHOW);
    let accordion_items = accordion.querySelectorAll(".accordion-item");
    accordion_items.forEach((item) => {
      this.close(item);
    });
    if (is_current_clicked_item_active) {
      this.close(clicked_accordion_item);
    } else {
      this.open(clicked_accordion_item);
    }
  },
  open(item) {
    let item_body = item.querySelector(".accordion-item-body");
    item_body.style.maxHeight = item_body.scrollHeight + "px";
    item.classList.add(this.CLASS_NAME_SHOWING);
    setTimeout(() => {
      item.classList.add(this.CLASS_NAME_SHOW);
      item.classList.remove(this.CLASS_NAME_SHOWING);
    }, 500);
  },
  close(item) {
    item.querySelector(".accordion-item-body").style.maxHeight = null;
    item.classList.remove(this.CLASS_NAME_SHOW);
  }
};
window.Laravel = window.Laravel || {};
window.ModularForms = {};
window.ModularFormsVendor = window.ModularFormsVendor || {};
window.ModularForms.Mixins = window.ModularForms.Mixins || {};
window.ModularForms.Mixins.Locale = Locale;
window.ModularForms.Apps = window.ModularForms.Apps || {};
window.ModularForms.Apps.Base = Base;
window.ModularForms.Apps.FormErrors = FormErrors;
window.ModularForms.Apps.Module = Module;
window.ModularForms.assetPath = "/vendor/modular-forms/";
window.ModularForms.Accordion = Accordion;
